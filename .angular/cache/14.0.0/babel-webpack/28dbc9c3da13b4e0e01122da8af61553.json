{"ast":null,"code":"import { ComponentFactoryResolver, Directive, ElementRef, EventEmitter, Inject, Input, Optional, Output, PLATFORM_ID, Renderer2, ViewContainerRef } from '@angular/core';\nimport { isPlatformBrowser, isPlatformServer } from '@angular/common';\nimport { InlineSVGComponent } from './inline-svg.component';\nimport { SVGCacheService } from './svg-cache.service';\nimport { InlineSVGService } from './inline-svg.service';\nimport { InlineSVGConfig } from './inline-svg.config';\nimport * as SvgUtil from './svg-util';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./svg-cache.service\";\nimport * as i2 from \"./inline-svg.service\";\nimport * as i3 from \"./inline-svg.config\";\n\nvar InlineSVGDirective = function () {\n  function InlineSVGDirective(_el, _viewContainerRef, _resolver, _svgCache, _renderer, _inlineSVGService, _config, platformId) {\n    this._el = _el;\n    this._viewContainerRef = _viewContainerRef;\n    this._resolver = _resolver;\n    this._svgCache = _svgCache;\n    this._renderer = _renderer;\n    this._inlineSVGService = _inlineSVGService;\n    this._config = _config;\n    this.platformId = platformId;\n    this.resolveSVGUrl = true;\n    this.replaceContents = true;\n    this.prepend = false;\n    this.injectComponent = false;\n    this.cacheSVG = true;\n    this.forceEvalStyles = false;\n    this.evalScripts = \"always\";\n    this.onSVGInserted = new EventEmitter();\n    this.onSVGFailed = new EventEmitter();\n    this._supportsSVG = SvgUtil.isSvgSupported();\n\n    if (!isPlatformServer(this.platformId) && !this._supportsSVG) {\n      this._fail('Embed SVG are not supported by this browser');\n    }\n  }\n\n  InlineSVGDirective.prototype.ngOnInit = function () {\n    if (!this._isValidPlatform() || this._isSSRDisabled()) {\n      return;\n    }\n\n    this._insertSVG();\n  };\n\n  InlineSVGDirective.prototype.ngOnChanges = function (changes) {\n    if (!this._isValidPlatform() || this._isSSRDisabled()) {\n      return;\n    }\n\n    var setSVGAttributesChanged = Boolean(changes['setSVGAttributes']);\n\n    if (changes['inlineSVG'] || setSVGAttributesChanged) {\n      this._insertSVG(setSVGAttributesChanged);\n    }\n  };\n\n  InlineSVGDirective.prototype.ngOnDestroy = function () {\n    if (this._subscription) {\n      this._subscription.unsubscribe();\n    }\n  };\n\n  InlineSVGDirective.prototype._insertSVG = function (force) {\n    var _this = this;\n\n    if (force === void 0) {\n      force = false;\n    }\n\n    if (!isPlatformServer(this.platformId) && !this._supportsSVG) {\n      return;\n    }\n\n    if (!this.inlineSVG) {\n      this._fail('No URL passed to [inlineSVG]');\n\n      return;\n    }\n\n    if (!force && this.inlineSVG === this._prevUrl) {\n      return;\n    }\n\n    this._prevUrl = this.inlineSVG;\n    this._subscription = this._svgCache.getSVG(this.inlineSVG, this.resolveSVGUrl, this.cacheSVG).subscribe(function (svg) {\n      if (SvgUtil.isUrlSymbol(_this.inlineSVG)) {\n        var symbolId = _this.inlineSVG.split('#')[1];\n\n        svg = SvgUtil.createSymbolSvg(_this._renderer, svg, symbolId);\n      }\n\n      _this._processSvg(svg);\n    }, function (err) {\n      _this._fail(err);\n    });\n  };\n\n  InlineSVGDirective.prototype._processSvg = function (svg) {\n    if (!svg) {\n      return;\n    }\n\n    if (this.removeSVGAttributes && isPlatformBrowser(this.platformId)) {\n      SvgUtil.removeAttributes(svg, this.removeSVGAttributes);\n    }\n\n    if (this.setSVGAttributes) {\n      SvgUtil.setAttributes(svg, this.setSVGAttributes);\n    }\n\n    if (this.onSVGLoaded) {\n      svg = this.onSVGLoaded(svg, this._el.nativeElement);\n    }\n\n    this._insertEl(svg);\n\n    if (isPlatformBrowser(this.platformId)) {\n      this._inlineSVGService.evalScripts(svg, this.inlineSVG, this.evalScripts);\n    }\n\n    if (this.forceEvalStyles) {\n      var styleTags = svg.querySelectorAll('style');\n      Array.from(styleTags).forEach(function (tag) {\n        return tag.textContent += '';\n      });\n    }\n\n    this.onSVGInserted.emit(svg);\n  };\n\n  InlineSVGDirective.prototype._insertEl = function (el) {\n    if (this.injectComponent) {\n      if (!this._svgComp) {\n        var factory = this._resolver.resolveComponentFactory(InlineSVGComponent);\n\n        this._svgComp = this._viewContainerRef.createComponent(factory);\n      }\n\n      this._svgComp.instance.context = this;\n      this._svgComp.instance.replaceContents = this.replaceContents;\n      this._svgComp.instance.prepend = this.prepend;\n      this._svgComp.instance.content = el;\n\n      this._renderer.appendChild(this._el.nativeElement, this._svgComp.injector.get(InlineSVGComponent)._el.nativeElement);\n    } else {\n      this._inlineSVGService.insertEl(this, this._el.nativeElement, el, this.replaceContents, this.prepend);\n    }\n  };\n\n  InlineSVGDirective.prototype._fail = function (msg) {\n    this.onSVGFailed.emit(msg);\n\n    if (this.fallbackImgUrl) {\n      var elImg = this._renderer.createElement('IMG');\n\n      this._renderer.setAttribute(elImg, 'src', this.fallbackImgUrl);\n\n      this._insertEl(elImg);\n    } else if (this.fallbackSVG && this.fallbackSVG !== this.inlineSVG) {\n      this.inlineSVG = this.fallbackSVG;\n\n      this._insertSVG();\n    }\n  };\n\n  InlineSVGDirective.prototype._isValidPlatform = function () {\n    return isPlatformServer(this.platformId) || isPlatformBrowser(this.platformId);\n  };\n\n  InlineSVGDirective.prototype._isSSRDisabled = function () {\n    return isPlatformServer(this.platformId) && this._config && this._config.clientOnly;\n  };\n\n  InlineSVGDirective.ɵfac = function InlineSVGDirective_Factory(t) {\n    return new (t || InlineSVGDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i1.SVGCacheService), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i2.InlineSVGService), i0.ɵɵdirectiveInject(i3.InlineSVGConfig, 8), i0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  InlineSVGDirective.ɵdir = i0.ɵɵdefineDirective({\n    type: InlineSVGDirective,\n    selectors: [[\"\", \"inlineSVG\", \"\"]],\n    inputs: {\n      inlineSVG: \"inlineSVG\",\n      resolveSVGUrl: \"resolveSVGUrl\",\n      replaceContents: \"replaceContents\",\n      prepend: \"prepend\",\n      injectComponent: \"injectComponent\",\n      cacheSVG: \"cacheSVG\",\n      setSVGAttributes: \"setSVGAttributes\",\n      removeSVGAttributes: \"removeSVGAttributes\",\n      forceEvalStyles: \"forceEvalStyles\",\n      evalScripts: \"evalScripts\",\n      fallbackImgUrl: \"fallbackImgUrl\",\n      fallbackSVG: \"fallbackSVG\",\n      onSVGLoaded: \"onSVGLoaded\"\n    },\n    outputs: {\n      onSVGInserted: \"onSVGInserted\",\n      onSVGFailed: \"onSVGFailed\"\n    },\n    features: [i0.ɵɵProvidersFeature([SVGCacheService]), i0.ɵɵNgOnChangesFeature]\n  });\n  return InlineSVGDirective;\n}();\n\nexport { InlineSVGDirective };\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();","map":null,"metadata":{},"sourceType":"module"}