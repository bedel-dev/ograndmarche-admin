{"ast":null,"code":"import { DataUtil, ElementStyleUtil, EventHandlerUtil, getUniqueIdWithPrefix, getAttributeValueByBreakpoint } from '../_utils/index';\nconst defaultFeedbackOptions = {\n  width: 100,\n  placement: 'top-center',\n  content: '',\n  type: 'popup'\n};\n\nclass FeedbackComponent {\n  constructor(_element, options) {\n    this._handlers = () => {\n      this.element.addEventListener('click', e => {\n        e.preventDefault();\n\n        this._go();\n      });\n    };\n\n    this._go = () => {};\n\n    this.showPopup = () => {\n      this.element = document.createElement('DIV');\n      this.element.classList.add('feedback feedback-popup');\n      this.element.innerHTML = this.options.content || '';\n\n      if (this.options.placement === 'top-center') {\n        this.setPopupTopCenterPosition();\n      }\n\n      document.body.appendChild(this.element);\n      this.element.classList.add('feedback-shown');\n      this.shown = true;\n    };\n\n    this.setPopupTopCenterPosition = () => {\n      var _a;\n\n      const width = getAttributeValueByBreakpoint(((_a = this.options.width) === null || _a === void 0 ? void 0 : _a.toString()) || '0');\n      const height = ElementStyleUtil.get(this.element, 'height');\n      this.element.classList.add('feedback-top-center');\n      ElementStyleUtil.set(this.element, 'width', width);\n      ElementStyleUtil.set(this.element, 'left', '50%');\n      ElementStyleUtil.set(this.element, 'top', '-' + height);\n    };\n\n    this.hidePopup = () => {\n      this.element.remove();\n    }; ///////////////////////\n    // ** Public API  ** //\n    ///////////////////////\n\n\n    this.show = () => {\n      if (EventHandlerUtil.trigger(this.element, 'kt.feedback.show') === false) {\n        return;\n      }\n\n      if (this.options.type === 'popup') {\n        this.showPopup();\n      }\n\n      EventHandlerUtil.trigger(this.element, 'kt.feedback.shown');\n      return this;\n    };\n\n    this.hide = () => {\n      if (EventHandlerUtil.trigger(this.element, 'kt.feedback.hide') === false) {\n        return;\n      }\n\n      if (this.options.type === 'popup') {\n        this.hidePopup();\n      }\n\n      this.shown = false;\n      EventHandlerUtil.trigger(this.element, 'kt.feedback.hidden');\n      return this;\n    };\n\n    this.isShown = () => {\n      return this.isShown;\n    };\n\n    this.getElement = () => {\n      return this.element;\n    }; // Event API\n\n\n    this.on = (name, handler) => {\n      return EventHandlerUtil.on(this.element, name, handler);\n    };\n\n    this.one = (name, handler) => {\n      return EventHandlerUtil.one(this.element, name, handler);\n    };\n\n    this.off = (name, handerId) => {\n      return EventHandlerUtil.off(this.element, name, handerId);\n    };\n\n    this.trigger = (name, event) => {\n      return EventHandlerUtil.trigger(this.element, name, event);\n    };\n\n    this.element = _element;\n    this.options = Object.assign(defaultFeedbackOptions, options);\n    this.instanceUid = getUniqueIdWithPrefix('feedback');\n    this.shown = false; // Event handlers\n\n    this._handlers(); // will add in the show popup\n\n\n    DataUtil.set(this.element, 'feedback', this);\n  } // Create Instances\n\n\n  static createInstances(selector) {\n    throw new Error('not implemented');\n  } // Static methods\n\n\n  static hasInstace(element) {\n    throw new Error('not implemented');\n  }\n\n  static getInstance(element) {\n    throw new Error('not implemented');\n  }\n\n  static bootstrap(attr = '[data-Feedback]') {\n    throw new Error('not implemented');\n  }\n\n}\n\nexport { FeedbackComponent, defaultFeedbackOptions };","map":null,"metadata":{},"sourceType":"module"}