{"ast":null,"code":"import { EventHandlerUtil, DataUtil, getBreakpoint, getAttributeValueByBreakpoint, stringSnakeToCamel, getObjectPropertyValueByKey, getViewPort, isVisibleElement, throttle } from '../_utils/index';\nimport { MenuComponent, defaultMenuOptions } from './MenuComponent';\nconst defaultSearchOptions = {\n  minLength: 2,\n  keypress: true,\n  enter: true,\n  layout: 'menu',\n  showOnFocus: true // Always show menu on input focus\n\n};\nconst defaultSearchQueires = {\n  componentName: 'search',\n  instanseQuery: '[data-kt-search]',\n  attrQuery: 'data-kt-search-'\n};\nlet SearchComponent = /*#__PURE__*/(() => {\n  class SearchComponent {\n    constructor(_element, _options, _queries) {\n      this.processing = false;\n\n      this._getElement = name => {\n        return this.element.querySelector('[data-kt-search-element=\"' + name + '\"]');\n      }; // Get option\n\n\n      this.getOption = name => {\n        const attr = this.element.getAttribute(`${this.queries.attrQuery}${name}`);\n\n        if (attr) {\n          let value = getAttributeValueByBreakpoint(attr);\n\n          if (value !== null && String(value) === 'true') {\n            return true;\n          } else if (value !== null && String(value) === 'false') {\n            return false;\n          }\n\n          return value;\n        } else {\n          const optionName = stringSnakeToCamel(name);\n          const option = getObjectPropertyValueByKey(this.options, optionName);\n\n          if (option) {\n            return getAttributeValueByBreakpoint(option);\n          } else {\n            return null;\n          }\n        }\n      }; // Check if responsive form mode is enabled\n\n\n      this.getResponsiveFormMode = () => {\n        const responsive = this.getOption('responsive');\n        const width = getViewPort().width;\n\n        if (!responsive) {\n          return null;\n        }\n\n        const breakpoint = getBreakpoint(responsive);\n        let breakPointNum = -1;\n\n        if (!breakpoint) {\n          breakPointNum = parseInt(responsive);\n        } else {\n          breakPointNum = +breakpoint;\n        }\n\n        if (width < breakPointNum) {\n          return 'on';\n        } else {\n          return 'off';\n        }\n      }; // Focus\n\n\n      this.focus = () => {\n        this.element.classList.add('focus');\n\n        if (this.getOption('show-on-focus') === true || this.inputElement.value.length >= this.options.minLength) {\n          this.show();\n        }\n      }; // Blur\n\n\n      this.blur = () => {\n        this.element.classList.remove('focus');\n      }; // Enter\n\n\n      this.enter = e => {\n        const key = e.charCode || e.keyCode || 0;\n\n        if (key === 13) {\n          e.preventDefault();\n          this.search();\n        }\n      }; // Input\n\n\n      this.input = () => {\n        if (this.getOption('min-length')) {\n          const minLength = parseInt(this.getOption('min-length'));\n\n          if (this.inputElement.value.length >= minLength) {\n            this.search();\n          } else if (this.inputElement.value.length === 0) {\n            this.clear();\n          }\n        }\n      }; ///////////////////////\n      // ** Public API  ** //\n      ///////////////////////\n      // Update\n\n\n      this.update = () => {\n        // Handle responsive form\n        if (this.layout === 'menu') {\n          let responsiveFormMode = this.getResponsiveFormMode();\n\n          if (responsiveFormMode === 'on' && !this.contentElement.contains(this.formElement)) {\n            this.contentElement.prepend(this.formElement);\n            this.formElement.classList.remove('d-none');\n          } else if (responsiveFormMode === 'off' && this.contentElement.contains(this.formElement)) {\n            this.element.prepend(this.formElement);\n            this.formElement.classList.add('d-none');\n          }\n        }\n      }; // Show menu\n\n\n      this.show = () => {\n        if (this.menuObject) {\n          this.update();\n          this.menuObject.show(this.element);\n        }\n      }; // Hide menu\n\n\n      this.hide = () => {\n        if (this.menuObject) {\n          this.update();\n          this.menuObject.hide(this.element);\n        }\n      }; // Search\n\n\n      this.search = () => {\n        if (!this.processing) {\n          // Show search spinner\n          if (this.spinnerElement) {\n            this.spinnerElement.classList.remove('d-none');\n          } // Hide search clear button\n\n\n          if (this.clearElement) {\n            this.clearElement.classList.add('d-none');\n          } // Hide search toolbar\n\n\n          if (this.toolbarElement) {\n            this.toolbarElement.classList.add('d-none');\n          } // Focus input\n\n\n          this.inputElement.focus();\n          this.processing = true;\n          EventHandlerUtil.trigger(this.element, 'kt.search.process', this);\n        }\n      }; // Complete\n\n\n      this.complete = () => {\n        if (this.spinnerElement) {\n          this.spinnerElement.classList.add('d-none');\n        } // Show search toolbar\n\n\n        if (this.clearElement) {\n          this.clearElement.classList.remove('d-none');\n        }\n\n        if (this.inputElement.value.length === 0) {\n          this.clear();\n        } // Focus input\n\n\n        this.inputElement.focus();\n        this.show();\n        this.processing = false;\n      }; // Clear\n\n\n      this.clear = () => {\n        if (EventHandlerUtil.trigger(this.element, 'kt.search.clear') === false) {\n          return;\n        } // Clear and focus input\n\n\n        this.inputElement.value = '';\n        this.inputElement.focus(); // Hide clear icon\n\n        if (this.clearElement) {\n          this.clearElement.classList.add('d-none');\n        } // Show search toolbar\n\n\n        if (this.toolbarElement) {\n          this.toolbarElement.classList.remove('d-none');\n        } // Hide menu\n\n\n        if (this.getOption('show-on-focus') === false) {\n          this.hide();\n        }\n\n        EventHandlerUtil.trigger(this.element, 'kt.search.cleared');\n      };\n\n      this.isProcessing = () => {\n        return this.processing;\n      };\n\n      this.getQuery = () => {\n        return this.inputElement.value;\n      };\n\n      this.getMenu = () => {\n        return this.menuObject;\n      };\n\n      this.getFormElement = () => {\n        return this.formElement;\n      }; // Event API\n\n\n      this.on = (name, handler) => {\n        return EventHandlerUtil.on(this.element, name, handler);\n      };\n\n      this.one = (name, handler) => {\n        return EventHandlerUtil.one(this.element, name, handler);\n      };\n\n      this.off = (name, handlerId) => {\n        return EventHandlerUtil.off(this.element, name, handlerId);\n      }; // Variables\n\n\n      this.options = Object.assign(defaultSearchOptions, _options);\n      this.queries = _queries; // Elements\n\n      this.element = _element;\n      this.contentElement = this._getElement('content');\n      this.formElement = this._getElement('form');\n      this.inputElement = this._getElement('input');\n      this.spinnerElement = this._getElement('spinner');\n      this.clearElement = this._getElement('clear');\n      this.toggleElement = this._getElement('toggle');\n      this.submitElement = this._getElement('submit');\n      this.toolbarElement = this._getElement('toolbar');\n      this.resultsElement = this._getElement('results');\n      this.suggestionElement = this._getElement('suggestion');\n      this.emptyElement = this._getElement('empty'); // Layout\n\n      this.layout = this.getOption('layout');\n\n      if (this.layout === 'menu') {\n        this.menuObject = new MenuComponent(this.contentElement, defaultMenuOptions);\n      } // Update\n\n\n      this.update(); // Event Handlers\n\n      this.handlers();\n      DataUtil.set(this.element, this.queries.componentName, this);\n    }\n\n    handlers() {\n      const context = this; // Focus\n\n      this.inputElement.addEventListener('focus', this.focus); // Blur\n\n      this.inputElement.addEventListener('blur', this.blur); // Keypress\n\n      if (this.getOption('keypress') === true) {\n        this.inputElement.addEventListener('input', this.input);\n      } // Submit\n\n\n      if (this.submitElement) {\n        this.submitElement.addEventListener('click', this.search);\n      } // Enter\n\n\n      if (this.getOption('enter') === true) {\n        this.inputElement.addEventListener('keypress', this.enter);\n      } // Clear\n\n\n      if (this.clearElement) {\n        this.clearElement.addEventListener('click', this.clear);\n      } // Menu\n\n\n      if (this.menuObject) {\n        // Toggle menu\n        if (this.toggleElement) {\n          this.toggleElement.addEventListener('click', this.show);\n          this.menuObject.on('kt.menu.dropdown.show', function () {\n            // @ts-ignore\n            if (isVisibleElement(context.toggleElement)) {\n              // @ts-ignore\n              context.toggleElement.classList.add('active'); // @ts-ignore\n\n              context.toggleElement.classList.add('show');\n            }\n          });\n          this.menuObject.on('kt.menu.dropdown.hide', function () {\n            // @ts-ignore\n            if (isVisibleElement(context.toggleElement)) {\n              // @ts-ignore\n              context.toggleElement.classList.remove('active'); // @ts-ignore\n\n              context.toggleElement.classList.remove('show');\n            }\n          });\n        }\n\n        this.menuObject.on('kt.menu.dropdown.shown', function () {\n          // @ts-ignore\n          context.inputElement.focus();\n        });\n      } // Window resize handling\n\n\n      window.addEventListener('resize', () => {\n        let timer;\n        throttle(timer, () => {\n          this.update();\n        }, 200);\n      });\n    }\n\n    getInputElement() {\n      return this.inputElement;\n    }\n\n    getContentElement() {\n      return this.contentElement;\n    }\n\n    getElement() {\n      return this.element;\n    }\n\n  }\n\n  // Static methods\n  SearchComponent.getInstance = (el, componentName = defaultSearchQueires.componentName) => {\n    const Search = DataUtil.get(el, componentName);\n\n    if (Search) {\n      return Search;\n    }\n\n    return null;\n  };\n\n  SearchComponent.createInstances = (selector = defaultSearchQueires.instanseQuery, options = defaultSearchOptions, queries = defaultSearchQueires) => {\n    const elements = document.body.querySelectorAll(selector);\n    elements.forEach(el => {\n      const item = el;\n      let Search = SearchComponent.getInstance(item);\n\n      if (!Search) {\n        Search = new SearchComponent(item, options, queries);\n      }\n    });\n  };\n\n  SearchComponent.createInsance = (selector = defaultSearchQueires.instanseQuery, options = defaultSearchOptions, queries = defaultSearchQueires) => {\n    const element = document.body.querySelector(selector);\n\n    if (!element) {\n      return;\n    }\n\n    const item = element;\n    let Search = SearchComponent.getInstance(item);\n\n    if (!Search) {\n      Search = new SearchComponent(item, options, queries);\n    }\n\n    return Search;\n  };\n\n  SearchComponent.bootstrap = (selector = defaultSearchQueires.instanseQuery) => {\n    SearchComponent.createInstances(selector);\n  };\n\n  SearchComponent.reinitialization = (selector = defaultSearchQueires.instanseQuery) => {\n    SearchComponent.createInstances(selector);\n  };\n\n  return SearchComponent;\n})();\nexport { SearchComponent, defaultSearchOptions, defaultSearchQueires };","map":null,"metadata":{},"sourceType":"module"}