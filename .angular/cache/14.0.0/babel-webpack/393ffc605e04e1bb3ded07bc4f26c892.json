{"ast":null,"code":"import { Injectable, RendererFactory2 } from '@angular/core';\nimport * as i0 from \"@angular/core\";\n\nvar InlineSVGService = function () {\n  function InlineSVGService(rendererFactory) {\n    this._ranScripts = {};\n    this._renderer = rendererFactory.createRenderer(null, null);\n  }\n\n  InlineSVGService.prototype.insertEl = function (dir, parentEl, content, replaceContents, prepend) {\n    if (replaceContents && !prepend) {\n      var parentNode = dir._prevSVG && dir._prevSVG.parentNode;\n\n      if (parentNode) {\n        this._renderer.removeChild(parentNode, dir._prevSVG);\n      }\n\n      parentEl.innerHTML = '';\n    }\n\n    if (prepend) {\n      this._renderer.insertBefore(parentEl, content, parentEl.firstChild);\n    } else {\n      this._renderer.appendChild(parentEl, content);\n    }\n\n    if (content.nodeName === 'svg') {\n      dir._prevSVG = content;\n    }\n  };\n\n  InlineSVGService.prototype.evalScripts = function (svg, url, evalMode) {\n    var scripts = svg.querySelectorAll('script');\n    var scriptsToEval = [];\n\n    for (var i = 0; i < scripts.length; i++) {\n      var scriptType = scripts[i].getAttribute('type');\n\n      if (!scriptType || scriptType === 'application/ecmascript' || scriptType === 'application/javascript') {\n        var script = scripts[i].innerText || scripts[i].textContent;\n        scriptsToEval.push(script);\n\n        this._renderer.removeChild(scripts[i].parentNode, scripts[i]);\n      }\n    }\n\n    if (scriptsToEval.length > 0 && (evalMode === \"always\" || evalMode === \"once\" && !this._ranScripts[url])) {\n      for (var i = 0; i < scriptsToEval.length; i++) {\n        new Function(scriptsToEval[i])(window);\n      }\n\n      this._ranScripts[url] = true;\n    }\n  };\n\n  InlineSVGService.ɵfac = function InlineSVGService_Factory(t) {\n    return new (t || InlineSVGService)(i0.ɵɵinject(i0.RendererFactory2));\n  };\n\n  InlineSVGService.ɵprov = i0.ɵɵdefineInjectable({\n    token: InlineSVGService,\n    factory: InlineSVGService.ɵfac,\n    providedIn: 'root'\n  });\n  return InlineSVGService;\n}();\n\nexport { InlineSVGService };\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();","map":null,"metadata":{},"sourceType":"module"}