{"ast":null,"code":"/* eslint-disable array-callback-return */\n\n/* eslint-disable no-useless-escape */\nimport { DataUtil } from '../_utils/index';\nconst defaultPasswordMeterOptions = {\n  minLength: 8,\n  checkUppercase: true,\n  checkLowercase: true,\n  checkDigit: true,\n  checkChar: true,\n  scoreHighlightClass: 'active'\n};\nconst defaultPasswordMeterQueires = {\n  componentName: 'password-meter',\n  instanseQuery: '[data-kt-password-meter]',\n  inputQuery: 'input[type]',\n  visibilityQuery: '[data-kt-password-meter-control=\"visibility\"]',\n  highlightQuery: '[data-kt-password-meter-control=\"highlight\"]'\n};\nlet PasswordMeterComponent = /*#__PURE__*/(() => {\n  class PasswordMeterComponent {\n    constructor(_element, _options, _queries) {\n      ///////////////////////\n      // ** Public API  ** //\n      ///////////////////////\n      this.reset = () => {\n        this.score = 0;\n        this.highlight();\n      };\n\n      this.element = _element;\n      this.options = Object.assign(defaultPasswordMeterOptions, _options);\n      this.queries = _queries;\n      this.score = 0;\n      this.checkSteps = 5; // Elements\n\n      this.inputElement = this.element.querySelector(this.queries.inputQuery);\n      this.visibilityElement = this.element.querySelector(this.queries.visibilityQuery);\n      this.highlightElement = this.element.querySelector(this.queries.highlightQuery); // Event Handlers\n\n      this.handlers();\n      DataUtil.set(this.element, this.queries.componentName, this);\n    }\n\n    handlers() {\n      if (this.inputElement) {\n        this.inputElement.addEventListener('input', () => {\n          this.check();\n        });\n      }\n\n      if (this.visibilityElement) {\n        this.visibilityElement.addEventListener('click', () => {\n          this.visitbility();\n        });\n      }\n    }\n\n    visitbility() {\n      if (this.visibilityElement && this.inputElement) {\n        const visibleIcon = this.visibilityElement.querySelector('i:not(.d-none), .svg-icon:not(.d-none)');\n        const hiddenIcon = this.visibilityElement.querySelector('i.d-none, .svg-icon.d-none');\n        const typeAttr = this.inputElement.getAttribute('type') || '';\n\n        if (typeAttr === 'password') {\n          this.inputElement.setAttribute('type', 'text');\n        } else {\n          this.inputElement.setAttribute('type', 'password');\n        }\n\n        visibleIcon === null || visibleIcon === void 0 ? void 0 : visibleIcon.classList.add('d-none');\n        hiddenIcon === null || hiddenIcon === void 0 ? void 0 : hiddenIcon.classList.remove('d-none');\n        this.inputElement.focus();\n      }\n    }\n\n    checkScore() {\n      return 0;\n    }\n\n    checkLength() {\n      if (this.inputElement) {\n        return this.inputElement.value.length >= this.options.minLength; // 20 score\n      }\n\n      return false;\n    }\n\n    checkLowerCase() {\n      const val = this.inputElement ? this.inputElement.value : '';\n      return /[a-z]/.test(val); // 20 score\n    }\n\n    checkUppercase() {\n      const val = this.inputElement ? this.inputElement.value : '';\n      return /[A-Z]/.test(val); // 20 score\n    }\n\n    checkDigit() {\n      const val = this.inputElement ? this.inputElement.value : '';\n      return /[0-9]/.test(val); // 20 score\n    }\n\n    checkChar() {\n      const val = this.inputElement ? this.inputElement.value : '';\n      return /[~`!#$%\\^&*+=\\-\\[\\]\\\\';,/{}|\\\\\":<>\\?]/g.test(val); // 20 score\n    }\n\n    getCheckScore() {\n      let count = 1;\n\n      if (this.options.checkUppercase) {\n        count++;\n      }\n\n      if (this.options.checkLowercase) {\n        count++;\n      }\n\n      if (this.options.checkDigit) {\n        count++;\n      }\n\n      if (this.options.checkChar) {\n        count++;\n      }\n\n      this.checkSteps = count;\n      return 100 / this.checkSteps;\n    }\n\n    highlight() {\n      const items = this.highlightElement ? [].slice.call(this.highlightElement.querySelectorAll('div')) : [];\n      const total = items.length;\n      let index = 0;\n      const checkScore = this.getCheckScore();\n      const score = this.getScore();\n      items.map(item => {\n        index++;\n\n        if (checkScore * index * (this.checkSteps / total) <= score) {\n          item.classList.add('active');\n        } else {\n          item.classList.remove('active');\n        }\n      });\n    }\n\n    getScore() {\n      return this.score;\n    }\n\n    check() {\n      let score = 0;\n      const checkScore = this.getCheckScore();\n\n      if (this.checkLength()) {\n        score = score + checkScore;\n      }\n\n      if (this.options.checkUppercase && this.checkLowerCase()) {\n        score = score + checkScore;\n      }\n\n      if (this.options.checkLowercase && this.checkUppercase()) {\n        score = score + checkScore;\n      }\n\n      if (this.options.checkDigit && this.checkDigit()) {\n        score = score + checkScore;\n      }\n\n      if (this.options.checkChar && this.checkChar()) {\n        score = score + checkScore;\n      }\n\n      this.score = score;\n      this.highlight();\n    }\n\n  }\n\n  // Static methods\n  PasswordMeterComponent.getInstance = (el, componentName = defaultPasswordMeterQueires.componentName) => {\n    const passwordMeter = DataUtil.get(el, componentName);\n\n    if (passwordMeter) {\n      return passwordMeter;\n    }\n  };\n\n  PasswordMeterComponent.createInstances = (selector = defaultPasswordMeterQueires.instanseQuery, options = defaultPasswordMeterOptions, queries = defaultPasswordMeterQueires) => {\n    const elements = document.body.querySelectorAll(selector);\n    elements.forEach(el => {\n      const item = el;\n      let passwordMeter = PasswordMeterComponent.getInstance(item);\n\n      if (!passwordMeter) {\n        passwordMeter = new PasswordMeterComponent(item, options, queries);\n      }\n    });\n  };\n\n  PasswordMeterComponent.createInsance = (selector = defaultPasswordMeterQueires.instanseQuery, options = defaultPasswordMeterOptions, queries = defaultPasswordMeterQueires) => {\n    const element = document.body.querySelector(selector);\n\n    if (!element) {\n      return;\n    }\n\n    const item = element;\n    let passwordMeter = PasswordMeterComponent.getInstance(item);\n\n    if (!passwordMeter) {\n      passwordMeter = new PasswordMeterComponent(item, options, queries);\n    }\n\n    return passwordMeter;\n  };\n\n  PasswordMeterComponent.bootstrap = (selector = defaultPasswordMeterQueires.instanseQuery) => {\n    PasswordMeterComponent.createInstances(selector);\n  };\n\n  PasswordMeterComponent.reinitialization = (selector = defaultPasswordMeterQueires.instanseQuery) => {\n    PasswordMeterComponent.createInstances(selector);\n  };\n\n  return PasswordMeterComponent;\n})();\nexport { PasswordMeterComponent, defaultPasswordMeterOptions, defaultPasswordMeterQueires };","map":null,"metadata":{},"sourceType":"module"}