{"ast":null,"code":"import { ChangeDetectionStrategy, Component, ElementRef, Input } from '@angular/core';\nimport { InlineSVGDirective } from './inline-svg.directive';\nimport { InlineSVGService } from './inline-svg.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./inline-svg.service\";\n\nvar InlineSVGComponent = function () {\n  function InlineSVGComponent(_inlineSVGService, el) {\n    this._inlineSVGService = _inlineSVGService;\n    this._el = el;\n  }\n\n  InlineSVGComponent.prototype.ngAfterViewInit = function () {\n    this._updateContent();\n  };\n\n  InlineSVGComponent.prototype.ngOnChanges = function (changes) {\n    if (changes['content']) {\n      this._updateContent();\n    }\n  };\n\n  InlineSVGComponent.prototype._updateContent = function () {\n    this._inlineSVGService.insertEl(this.context, this._el.nativeElement, this.content, this.replaceContents, this.prepend);\n  };\n\n  InlineSVGComponent.ɵfac = function InlineSVGComponent_Factory(t) {\n    return new (t || InlineSVGComponent)(i0.ɵɵdirectiveInject(i1.InlineSVGService), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  InlineSVGComponent.ɵcmp = i0.ɵɵdefineComponent({\n    type: InlineSVGComponent,\n    selectors: [[\"inline-svg\"]],\n    inputs: {\n      context: \"context\",\n      content: \"content\",\n      replaceContents: \"replaceContents\",\n      prepend: \"prepend\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 0,\n    vars: 0,\n    template: function InlineSVGComponent_Template(rf, ctx) {},\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return InlineSVGComponent;\n}();\n\nexport { InlineSVGComponent };\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();","map":null,"metadata":{},"sourceType":"module"}