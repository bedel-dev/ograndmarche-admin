{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngx-translate/core\";\nconst LOCALIZATION_LOCAL_STORAGE_KEY = 'language';\nexport let TranslationService = /*#__PURE__*/(() => {\n  class TranslationService {\n    constructor(translate) {\n      this.translate = translate; // Private properties\n\n      this.langIds = []; // add new langIds to the list\n\n      this.translate.addLangs(['en']); // this language will be used as a fallback when a translation isn't found in the current language\n\n      this.translate.setDefaultLang('en');\n    }\n\n    loadTranslations(...args) {\n      const locales = [...args];\n      locales.forEach(locale => {\n        // use setTranslation() with the third argument set to true\n        // to append translations instead of replacing them\n        this.translate.setTranslation(locale.lang, locale.data, true);\n        this.langIds.push(locale.lang);\n      }); // add new languages to the list\n\n      this.translate.addLangs(this.langIds);\n      this.translate.use(this.getSelectedLanguage());\n    }\n\n    setLanguage(lang) {\n      if (lang) {\n        this.translate.use(this.translate.getDefaultLang());\n        this.translate.use(lang);\n        localStorage.setItem(LOCALIZATION_LOCAL_STORAGE_KEY, lang);\n      }\n    }\n    /**\n     * Returns selected language\n     */\n\n\n    getSelectedLanguage() {\n      return localStorage.getItem(LOCALIZATION_LOCAL_STORAGE_KEY) || this.translate.getDefaultLang();\n    }\n\n  }\n\n  TranslationService.ɵfac = function TranslationService_Factory(t) {\n    return new (t || TranslationService)(i0.ɵɵinject(i1.TranslateService));\n  };\n\n  TranslationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TranslationService,\n    factory: TranslationService.ɵfac,\n    providedIn: 'root'\n  });\n  return TranslationService;\n})();","map":null,"metadata":{},"sourceType":"module"}