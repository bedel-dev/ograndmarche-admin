{"ast":null,"code":"import { APP_BASE_HREF, PlatformLocation } from '@angular/common';\nimport { HttpBackend, HttpClient } from '@angular/common/http';\nimport { Inject, Injectable, Optional, RendererFactory2 } from '@angular/core';\nimport { of, throwError } from 'rxjs';\nimport { catchError, map, share, tap } from 'rxjs/operators';\nimport { InlineSVGConfig } from './inline-svg.config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"./inline-svg.config\";\nimport * as i3 from \"@angular/common/http\";\n\nvar SVGCacheService = function () {\n  function SVGCacheService(_appBase, _location, _config, httpClient, httpBackend, rendererFactory) {\n    this._appBase = _appBase;\n    this._location = _location;\n    this._config = _config;\n    this._http = _config && !_config.bypassHttpClientInterceptorChain ? httpClient : new HttpClient(httpBackend);\n    this._renderer = rendererFactory.createRenderer(null, null);\n    this.setBaseUrl();\n\n    if (!SVGCacheService._cache) {\n      SVGCacheService._cache = new Map();\n    }\n\n    if (!SVGCacheService._inProgressReqs) {\n      SVGCacheService._inProgressReqs = new Map();\n    }\n  }\n\n  SVGCacheService.prototype.getSVG = function (url, resolveSVGUrl, cache) {\n    var _this = this;\n\n    if (cache === void 0) {\n      cache = true;\n    }\n\n    var svgUrl = (resolveSVGUrl ? this.getAbsoluteUrl(url) : url).replace(/#.+$/, '');\n\n    if (cache && SVGCacheService._cache.has(svgUrl)) {\n      return of(this._cloneSVG(SVGCacheService._cache.get(svgUrl)));\n    }\n\n    if (SVGCacheService._inProgressReqs.has(svgUrl)) {\n      return SVGCacheService._inProgressReqs.get(svgUrl);\n    }\n\n    var req = this._http.get(svgUrl, {\n      responseType: 'text'\n    }).pipe(tap(function () {\n      SVGCacheService._inProgressReqs.delete(svgUrl);\n    }), catchError(function (error) {\n      SVGCacheService._inProgressReqs.delete(svgUrl);\n\n      return throwError(error.message);\n    }), share(), map(function (svgText) {\n      var svgEl = _this._svgElementFromString(svgText);\n\n      SVGCacheService._cache.set(svgUrl, svgEl);\n\n      return _this._cloneSVG(svgEl);\n    }));\n\n    SVGCacheService._inProgressReqs.set(svgUrl, req);\n\n    return req;\n  };\n\n  SVGCacheService.prototype.setBaseUrl = function () {\n    if (this._config) {\n      this._baseUrl = this._config.baseUrl;\n    } else if (this._appBase !== null) {\n      this._baseUrl = this._appBase;\n    } else if (this._location !== null) {\n      this._baseUrl = this._location.getBaseHrefFromDOM();\n    }\n  };\n\n  SVGCacheService.prototype.getAbsoluteUrl = function (url) {\n    if (this._baseUrl && !/^https?:\\/\\//i.test(url)) {\n      url = this._baseUrl + url;\n\n      if (url.indexOf('//') === 0) {\n        url = url.substring(1);\n      }\n    }\n\n    var base = this._renderer.createElement('BASE');\n\n    base.href = url;\n    return base.href;\n  };\n\n  SVGCacheService.prototype._svgElementFromString = function (str) {\n    var div = this._renderer.createElement('DIV');\n\n    div.innerHTML = str;\n    var svg = div.querySelector('svg');\n\n    if (!svg) {\n      throw new Error('No SVG found in loaded contents');\n    }\n\n    return svg;\n  };\n\n  SVGCacheService.prototype._cloneSVG = function (svg) {\n    return svg.cloneNode(true);\n  };\n\n  SVGCacheService.ɵfac = function SVGCacheService_Factory(t) {\n    return new (t || SVGCacheService)(i0.ɵɵinject(APP_BASE_HREF, 8), i0.ɵɵinject(i1.PlatformLocation, 8), i0.ɵɵinject(i2.InlineSVGConfig, 8), i0.ɵɵinject(i3.HttpClient), i0.ɵɵinject(i3.HttpBackend), i0.ɵɵinject(i0.RendererFactory2));\n  };\n\n  SVGCacheService.ɵprov = i0.ɵɵdefineInjectable({\n    token: SVGCacheService,\n    factory: SVGCacheService.ɵfac,\n    providedIn: 'root'\n  });\n  return SVGCacheService;\n}();\n\nexport { SVGCacheService };\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();","map":null,"metadata":{},"sourceType":"module"}