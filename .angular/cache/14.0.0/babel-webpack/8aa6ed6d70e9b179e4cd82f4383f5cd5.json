{"ast":null,"code":"import { DataUtil, getObjectPropertyValueByKey, stringSnakeToCamel, getAttributeValueByBreakpoint, getViewPort, isVisibleElement, throttle, getCSS, ElementStyleUtil } from '../_utils/index';\nimport { CookieComponent } from './_CookieComponent';\nconst defaultScrollOptions = {\n  saveState: true\n};\nlet ScrollComponent = /*#__PURE__*/(() => {\n  class ScrollComponent {\n    constructor(_element, options) {\n      this.getOption = name => {\n        if (this.element.hasAttribute('data-kt-scroll-' + name) === true) {\n          const attr = this.element.getAttribute('data-kt-scroll-' + name) || '';\n          let value = getAttributeValueByBreakpoint(attr);\n\n          if (value !== null && String(value) === 'true') {\n            value = true;\n          } else if (value !== null && String(value) === 'false') {\n            value = false;\n          }\n\n          return value;\n        } else {\n          const optionName = stringSnakeToCamel(name);\n          const option = getObjectPropertyValueByKey(this.options, optionName);\n\n          if (option) {\n            return getAttributeValueByBreakpoint(option);\n          } else {\n            return null;\n          }\n        }\n      };\n\n      this.getHeightType = () => {\n        if (this.getOption('height')) {\n          return 'height';\n        }\n\n        if (this.getOption('min-height')) {\n          return 'min-height';\n        }\n\n        if (this.getOption('max-height')) {\n          return 'max-height';\n        }\n      };\n\n      this.getAutoHeight = () => {\n        let height = getViewPort().height;\n        const dependencies = this.getOption('dependencies');\n        const wrappers = this.getOption('wrappers');\n        const offset = this.getOption('offset'); // Height dependencies\n\n        if (dependencies !== null) {\n          const elements = document.querySelectorAll(dependencies);\n\n          if (elements && elements.length > 0) {\n            for (let i = 0, len = elements.length; i < len; i++) {\n              const element = elements[i];\n\n              if (isVisibleElement(element) === false) {\n                continue;\n              }\n\n              height = height - parseInt(getCSS(element, 'height'));\n              height = height - parseInt(getCSS(element, 'margin-top'));\n              height = height - parseInt(getCSS(element, 'margin-bottom'));\n              const borderTop = getCSS(element, 'border-top');\n\n              if (borderTop) {\n                height = height - parseInt(borderTop);\n              }\n\n              const borderBottom = getCSS(element, 'border-bottom');\n\n              if (borderBottom) {\n                height = height - parseInt(borderBottom);\n              }\n            }\n          }\n        } // Wrappers\n\n\n        if (wrappers !== null) {\n          var elements = document.querySelectorAll(wrappers);\n\n          if (elements && elements.length > 0) {\n            for (let i = 0, len = elements.length; i < len; i++) {\n              const element = elements[i];\n\n              if (!isVisibleElement(element)) {\n                continue;\n              }\n\n              height = height - parseInt(getCSS(element, 'margin-top'));\n              height = height - parseInt(getCSS(element, 'margin-bottom'));\n              height = height - parseInt(getCSS(element, 'padding-top'));\n              height = height - parseInt(getCSS(element, 'padding-bottom'));\n              const borderTop = getCSS(element, 'border-top');\n\n              if (borderTop) {\n                height = height - parseInt(borderTop);\n              }\n\n              const borderBottom = getCSS(element, 'border-bottom');\n\n              if (borderBottom) {\n                height = height - parseInt(borderBottom);\n              }\n            }\n          }\n        } // Custom offset\n\n\n        if (offset !== null) {\n          height = height - parseInt(offset);\n        }\n\n        height = height - parseInt(getCSS(this.element, 'margin-top'));\n        height = height - parseInt(getCSS(this.element, 'margin-bottom'));\n        const borderTop = getCSS(this.element, 'border-top');\n\n        if (borderTop) {\n          height = height - parseInt(borderTop);\n        }\n\n        const borderBottom = getCSS(this.element, 'border-bottom');\n\n        if (borderBottom) {\n          height = height - parseInt(borderBottom);\n        }\n\n        height = String(height) + 'px';\n        return height;\n      };\n\n      this.setupHeight = () => {\n        let height = this.getHeight();\n        let heightType = this.getHeightType(); // Set height\n\n        if (height !== null && height.length > 0) {\n          ElementStyleUtil.set(this.element, heightType, height);\n        } else {\n          ElementStyleUtil.set(this.element, heightType, '');\n        }\n      };\n\n      this.setupState = () => {\n        if (this.getOption('save-state') === true && this.id) {\n          const cookie = CookieComponent.get(this.id + 'st');\n\n          if (cookie) {\n            var pos = parseInt(cookie);\n\n            if (pos > 0) {\n              this.element.scrollTop = pos;\n            }\n          }\n        }\n      };\n\n      this.setupScrollHandler = () => {\n        if (this.getOption('save-state') === true && this.id) {\n          this.element.addEventListener('scroll', this.scrollHandler);\n        } else {\n          this.element.removeEventListener('scroll', this.scrollHandler);\n        }\n      };\n\n      this.scrollHandler = () => {\n        const cookieId = this.id + 'st';\n        CookieComponent.set(cookieId, this.element.scrollTop, {});\n      };\n\n      this.destroyScrollHandler = () => {\n        this.element.removeEventListener('scroll', this.scrollHandler);\n      };\n\n      this.resetHeight = () => {\n        const heghtType = this.getHeightType();\n\n        if (heghtType) {\n          ElementStyleUtil.set(this.element, heghtType, '');\n        }\n      }; ///////////////////////\n      // ** Public API  ** //\n      ///////////////////////\n\n\n      this.update = () => {\n        // Activate/deactivate\n        if (this.getOption('activate') === true || !this.element.hasAttribute('data-kt-scroll-activate')) {\n          this.setupHeight();\n          this.setupScrollHandler();\n          this.setupState();\n        } else {\n          this.resetHeight();\n          this.destroyScrollHandler();\n        }\n      };\n\n      this.getHeight = () => {\n        const heightType = this.getHeightType();\n        const height = this.getOption(heightType || '');\n\n        if (height instanceof Function) {\n          return height.call(height);\n        } else if (height !== null && typeof height === 'string' && height.toLowerCase() === 'auto') {\n          return this.getAutoHeight();\n        } else {\n          return height;\n        }\n      };\n\n      this.getElement = () => {\n        return this.element;\n      };\n\n      this.element = _element;\n      this.options = Object.assign(defaultScrollOptions, options);\n      this.id = this.element.getAttribute('id') || '';\n      this.update(); // this.element.setAttribute('data-kt-scrolltop', 'true')\n\n      DataUtil.set(this.element, 'scroll', this);\n    } // Static methods\n\n\n    static hasInstace(element) {\n      return DataUtil.has(element, 'scroll');\n    }\n\n    static getInstance(element) {\n      if (element !== null && ScrollComponent.hasInstace(element)) {\n        const data = DataUtil.get(element, 'scroll');\n\n        if (data) {\n          return data;\n        }\n      }\n    } // Create Instances\n\n\n    static createInstances(selector) {\n      const elements = document.body.querySelectorAll(selector);\n      elements.forEach(element => {\n        const item = element;\n        let scroll = ScrollComponent.getInstance(item);\n\n        if (!scroll) {\n          scroll = new ScrollComponent(item, defaultScrollOptions);\n        }\n      });\n    }\n\n    static destroyAll(attr = '[data-kt-scroll=\"true\"]') {}\n\n    static bootstrap(attr = '[data-kt-scroll=\"true\"]') {\n      ScrollComponent.createInstances(attr);\n      ScrollComponent.resize();\n    }\n\n    static reinitialization(attr = '[data-kt-scroll=\"true\"]') {\n      ScrollComponent.createInstances(attr);\n    }\n\n    static updateAll() {\n      const elements = document.body.querySelectorAll('[data-kt-scroll=\"true\"]');\n      elements.forEach(element => {\n        const instance = ScrollComponent.getInstance(element);\n\n        if (instance) {\n          instance.update();\n        }\n      });\n    }\n\n    static resize() {\n      // Window Resize Handling\n      window.addEventListener('resize', function () {\n        let timer;\n        throttle(timer, () => {\n          // Locate and update Drawer instances on window resize\n          ScrollComponent.updateAll();\n        }, 200);\n      });\n    }\n\n  }\n\n  ScrollComponent.createInstance = (element, options = defaultScrollOptions) => {\n    let scroll = ScrollComponent.getInstance(element);\n\n    if (!scroll) {\n      scroll = new ScrollComponent(element, options);\n    }\n\n    return scroll;\n  };\n\n  return ScrollComponent;\n})();\nexport { ScrollComponent, defaultScrollOptions };","map":null,"metadata":{},"sourceType":"module"}