{"ast":null,"code":"import { EventHandlerUtil, DataUtil, getUniqueIdWithPrefix, getCSS } from '../_utils/index';\nconst defaultImageInputOptions = {};\nconst defaultImageInputQueires = {\n  componentName: 'image-input',\n  instanseQuery: '[data-kt-image-input]',\n  inputQuery: 'input[type=\"file\"]',\n  wrapperQuery: '.image-input-wrapper',\n  cancelQuery: '[data-kt-image-input-action=\"cancel\"]',\n  removeQuery: '[data-kt-image-input-action=\"remove\"]',\n  hiddenQuery: 'input[type=\"hidden\"]'\n};\nlet ImageInputComponent = /*#__PURE__*/(() => {\n  class ImageInputComponent {\n    constructor(_element, _options, _queries) {\n      this.src = '';\n      this.value = ''; // Event Handlers\n\n      this._change = e => {\n        e.preventDefault();\n\n        if (this.inputElement !== null && this.inputElement.files && this.inputElement.files[0]) {\n          // Fire change event\n          if (EventHandlerUtil.trigger(this.element, 'kt.imageinput.change', e) === false) {\n            return;\n          }\n\n          const reader = new FileReader();\n\n          reader.onload = e => {\n            if (this.wrapperElement && e.target) {\n              this.wrapperElement.style.setProperty('background-image', `url('${e.target.result}')`);\n            }\n          };\n\n          reader.readAsDataURL(this.inputElement.files[0]);\n          this.element.classList.add('image-input-changed');\n          this.element.classList.remove('image-input-empty'); // Fire removed event\n\n          EventHandlerUtil.trigger(this.element, 'kt.imageinput.changed', e);\n        }\n      };\n\n      this._cancel = e => {\n        e.preventDefault(); // Fire cancel event\n\n        if (EventHandlerUtil.trigger(this.element, 'kt.imageinput.cancel', e) === false) {\n          return;\n        }\n\n        this.element.classList.remove('image-input-changed');\n        this.element.classList.remove('image-input-empty');\n        this.element.style.setProperty('background-image', this.src);\n\n        if (this.inputElement) {\n          this.inputElement.value = '';\n        }\n\n        if (this.hiddenElement !== null) {\n          this.hiddenElement.value = '0';\n        } // Fire canceled event\n\n\n        EventHandlerUtil.trigger(this.element, 'kt.imageinput.canceled', e);\n      };\n\n      this._remove = e => {\n        e.preventDefault(); // Fire remove event\n\n        if (EventHandlerUtil.trigger(this.element, 'kt.imageinput.remove', e) === false) {\n          return;\n        }\n\n        this.element.classList.remove('image-input-changed');\n        this.element.classList.add('image-input-empty');\n\n        if (this.wrapperElement) {\n          this.wrapperElement.style.setProperty('background-image', 'none');\n        }\n\n        if (this.inputElement) {\n          this.inputElement.value = '';\n        }\n\n        if (this.hiddenElement !== null) {\n          this.hiddenElement.value = '1';\n        } // Fire removed event\n\n\n        EventHandlerUtil.trigger(this.element, 'kt.imageinput.removed', e);\n      }; // Event API\n\n\n      this.on = (name, handler) => {\n        return EventHandlerUtil.on(this.element, name, handler);\n      };\n\n      this.one = (name, handler) => {\n        return EventHandlerUtil.one(this.element, name, handler);\n      };\n\n      this.off = (name, handlerId) => {\n        return EventHandlerUtil.off(this.element, name, handlerId);\n      };\n\n      this.trigger = (name, event) => {\n        return EventHandlerUtil.trigger(this.element, name, event);\n      }; // Variables\n\n\n      this.options = Object.assign(defaultImageInputOptions, _options);\n      this.queries = _queries;\n      this.uid = getUniqueIdWithPrefix(this.queries.componentName); // Elements\n\n      this.element = _element;\n      this.inputElement = this.element.querySelector(this.queries.inputQuery);\n      this.wrapperElement = this.element.querySelector(this.queries.wrapperQuery);\n      this.cancelElement = this.element.querySelector(this.queries.cancelQuery);\n      this.removeElement = this.element.querySelector(this.queries.removeQuery);\n      this.hiddenElement = this.element.querySelector(this.queries.hiddenQuery);\n\n      if (this.wrapperElement) {\n        this.src = getCSS(this.wrapperElement, 'backgroundImage');\n      } // Event Handlers\n\n\n      this.handlers();\n      DataUtil.set(this.element, this.queries.componentName, this);\n    }\n\n    handlers() {\n      this.element.addEventListener('change', this._change);\n\n      if (this.cancelElement) {\n        this.cancelElement.addEventListener('click', this._cancel);\n      }\n\n      if (this.removeElement) {\n        this.removeElement.addEventListener('click', this._cancel);\n      }\n    } ///////////////////////\n    // ** Public API  ** //\n    ///////////////////////\n\n\n    getInputElement() {\n      return this.inputElement;\n    }\n\n    getElement() {\n      return this.element;\n    }\n\n  }\n\n  // Static methods\n  ImageInputComponent.getInstance = (el, componentName = defaultImageInputQueires.componentName) => {\n    const ImageInput = DataUtil.get(el, componentName);\n\n    if (ImageInput) {\n      return ImageInput;\n    }\n  };\n\n  ImageInputComponent.createInstances = (selector = defaultImageInputQueires.instanseQuery, options = defaultImageInputOptions, queries = defaultImageInputQueires) => {\n    const elements = document.body.querySelectorAll(selector);\n    elements.forEach(el => {\n      const item = el;\n      let ImageInput = ImageInputComponent.getInstance(item);\n\n      if (!ImageInput) {\n        ImageInput = new ImageInputComponent(item, options, queries);\n      }\n    });\n  };\n\n  ImageInputComponent.createInsance = (selector = defaultImageInputQueires.instanseQuery, options = defaultImageInputOptions, queries = defaultImageInputQueires) => {\n    const element = document.body.querySelector(selector);\n\n    if (!element) {\n      return;\n    }\n\n    const item = element;\n    let ImageInput = ImageInputComponent.getInstance(item);\n\n    if (!ImageInput) {\n      ImageInput = new ImageInputComponent(item, options, queries);\n    }\n\n    return ImageInput;\n  };\n\n  ImageInputComponent.bootstrap = (selector = defaultImageInputQueires.instanseQuery) => {\n    ImageInputComponent.createInstances(selector);\n  };\n\n  ImageInputComponent.reinitialization = (selector = defaultImageInputQueires.instanseQuery) => {\n    ImageInputComponent.createInstances(selector);\n  };\n\n  return ImageInputComponent;\n})();\nexport { ImageInputComponent, defaultImageInputOptions, defaultImageInputQueires };","map":null,"metadata":{},"sourceType":"module"}