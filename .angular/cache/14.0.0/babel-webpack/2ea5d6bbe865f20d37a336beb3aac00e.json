{"ast":null,"code":"var _a;\n\nimport { EventHandlerUtil, getUniqueIdWithPrefix, getObjectPropertyValueByKey, stringSnakeToCamel, getAttributeValueByBreakpoint, throttle, getCSS, DOMEventHandlerUtil, ElementStyleUtil } from '../_utils/index';\nexport class DrawerStore {\n  static set(instanceId, drawerComponentObj) {\n    if (DrawerStore.has(instanceId)) {\n      return;\n    }\n\n    DrawerStore.store.set(instanceId, drawerComponentObj);\n  }\n\n  static get(instanceId) {\n    if (!DrawerStore.has(instanceId)) {\n      return;\n    }\n\n    return DrawerStore.store.get(instanceId);\n  }\n\n  static remove(instanceId) {\n    if (!DrawerStore.has(instanceId)) {\n      return;\n    }\n\n    DrawerStore.store.delete(instanceId);\n  }\n\n  static has(instanceId) {\n    return DrawerStore.store.has(instanceId);\n  }\n\n  static getAllInstances() {\n    return DrawerStore.store;\n  }\n\n}\nDrawerStore.store = new Map();\nconst defaultDrawerOptions = {\n  overlay: true,\n  baseClass: 'drawer',\n  overlayClass: 'drawer-overlay',\n  direction: 'end'\n};\n\nclass DrawerComponent {\n  constructor(_element, options) {\n    this.overlayElement = null;\n    this.toggleElement = null;\n    this.name = '';\n    this.shown = false;\n    this.lastWidth = 0;\n    this.closeElement = null;\n\n    this._handlers = () => {\n      const togglers = this._getOption('toggle');\n\n      const closers = this._getOption('close');\n\n      if (togglers !== null && togglers.length > 0) {\n        DOMEventHandlerUtil.on(document.body, togglers, 'click', e => {\n          e.preventDefault();\n          this.toggleElement = document.getElementById(togglers);\n\n          this._toggle();\n        });\n      }\n\n      if (closers !== null && closers.length > 0) {\n        DOMEventHandlerUtil.on(document.body, closers, 'click', e => {\n          e.preventDefault();\n          this.closeElement = document.getElementById(closers);\n\n          this._hide();\n        });\n      }\n    };\n\n    this._update = () => {\n      const width = String(this._getOption('width'));\n      const direction = String(this._getOption('direction')); // Reset state\n\n      const hasBaseClass = this.element.classList.contains(`${this.options.baseClass}-on`);\n      const bodyCanvasAttr = String(document.body.getAttribute(`data-kt-drawer-${this.name}-`));\n\n      if (hasBaseClass === true && bodyCanvasAttr === 'on') {\n        this.shown = true;\n      } else {\n        this.shown = false;\n      } // Activate/deactivate\n\n\n      if (this._getOption('activate') === true) {\n        this.element.classList.add(this.options.baseClass);\n        this.element.classList.add(`${this.options.baseClass}-${direction}`);\n        ElementStyleUtil.set(this.element, 'width', width, true);\n        this.lastWidth = parseInt(width);\n      } else {\n        ElementStyleUtil.set(this.element, 'width', '');\n        this.element.classList.remove(this.options.baseClass);\n        this.element.classList.remove(`${this.options.baseClass}-${direction}`);\n\n        this._hide();\n      }\n    };\n\n    this._getOption = name => {\n      const attr = this.element.getAttribute(`data-kt-drawer-${name}`);\n\n      if (attr) {\n        let value = getAttributeValueByBreakpoint(attr);\n\n        if (value !== null && String(value) === 'true') {\n          return true;\n        } else {\n          if (value !== null && String(value) === 'false') {\n            return false;\n          }\n        }\n\n        return value;\n      } else {\n        const optionName = stringSnakeToCamel(name);\n        const option = getObjectPropertyValueByKey(this.options, optionName);\n\n        if (option) {\n          return getAttributeValueByBreakpoint(option);\n        } else {\n          return null;\n        }\n      }\n    };\n\n    this._toggle = () => {\n      if (EventHandlerUtil.trigger(this.element, 'kt.drawer.toggle') === false) {\n        return;\n      }\n\n      if (this.shown) {\n        this._hide();\n      } else {\n        this._show();\n      }\n\n      EventHandlerUtil.trigger(this.element, 'kt.drawer.toggled');\n    };\n\n    this._hide = () => {\n      if (EventHandlerUtil.trigger(this.element, 'kt.drawer.hide') === false) {\n        return;\n      }\n\n      this.shown = false;\n\n      this._deleteOverlay();\n\n      document.body.removeAttribute(`data-kt-drawer-${this.name}`);\n      document.body.removeAttribute(`data-kt-drawer`);\n      this.element.classList.remove(`${this.options.baseClass}-on`);\n\n      if (this.toggleElement != null) {\n        this.toggleElement.classList.remove('active');\n      }\n\n      EventHandlerUtil.trigger(this.element, 'kt.drawer.after.hidden');\n    };\n\n    this._show = () => {\n      if (EventHandlerUtil.trigger(this.element, 'kt.drawer.show') === false) {\n        return;\n      }\n\n      this.shown = true;\n\n      this._createOverlay();\n\n      document.body.setAttribute(`data-kt-drawer-${this.name}`, 'on');\n      document.body.setAttribute('data-kt-drawer', 'on');\n      this.element.classList.add(`${this.options.baseClass}-on`);\n\n      if (this.toggleElement !== null) {\n        this.toggleElement.classList.add('active');\n      }\n\n      EventHandlerUtil.trigger(this.element, 'kt.drawer.shown');\n    };\n\n    this._createOverlay = () => {\n      if (this._getOption('overlay') === true) {\n        this.overlayElement = document.createElement('DIV');\n        const elementZIndex = getCSS(this.element, 'z-index');\n\n        if (elementZIndex) {\n          const overlayZindex = parseInt(elementZIndex) - 1;\n          ElementStyleUtil.set(this.overlayElement, 'z-index', overlayZindex); // update\n        }\n\n        document.body.append(this.overlayElement);\n\n        const overlayClassOption = this._getOption('overlay-class');\n\n        if (overlayClassOption) {\n          this.overlayElement.classList.add(overlayClassOption.toString());\n        }\n\n        this.overlayElement.addEventListener('click', e => {\n          e.preventDefault();\n\n          this._hide();\n        });\n      }\n    };\n\n    this._deleteOverlay = () => {\n      if (this.overlayElement !== null && this.overlayElement.parentNode) {\n        this.overlayElement.parentNode.removeChild(this.overlayElement);\n      }\n    };\n\n    this._getDirection = () => {\n      return String(this._getOption('direction')) === 'left' ? 'left' : 'right';\n    };\n\n    this._getWidth = () => {\n      let width = this._getOption('width');\n\n      if (width && width === 'auto') {\n        width = getCSS(this.element, 'width');\n      }\n\n      return width;\n    }; ///////////////////////\n    // ** Public API  ** //\n    ///////////////////////\n\n\n    this.toggle = () => {\n      this._toggle();\n    };\n\n    this.show = () => {\n      this._show();\n    };\n\n    this.hide = () => {\n      this._hide();\n    };\n\n    this.isShown = () => {\n      return this.shown;\n    };\n\n    this.update = () => {\n      this._update();\n    };\n\n    this.goElement = () => {\n      return this.element;\n    }; // Event API\n\n\n    this.on = (name, handler) => {\n      return EventHandlerUtil.on(this.element, name, handler);\n    };\n\n    this.one = (name, handler) => {\n      return EventHandlerUtil.one(this.element, name, handler);\n    };\n\n    this.off = (name, handerId) => {\n      return EventHandlerUtil.off(this.element, name, handerId);\n    };\n\n    this.trigger = (name, event) => {\n      return EventHandlerUtil.trigger(this.element, name, event);\n    };\n\n    this.element = _element;\n    this.options = Object.assign(defaultDrawerOptions, options);\n    this.instanceUid = getUniqueIdWithPrefix('drawer');\n    this.overlayElement = null;\n    this.name = this.element.getAttribute('data-kt-drawer-name') || '';\n    this.shown = false;\n    this.toggleElement = null; // Event Handlers\n\n    this._handlers(); // Update Instance\n\n\n    this._update(); // Bind Instance\n\n\n    DrawerStore.set(this.element.id, this);\n  } // Create Instances\n\n\n  static createInstances(selector) {\n    const elements = document.body.querySelectorAll(selector);\n    elements.forEach(element => {\n      const item = element;\n      let drawer = DrawerComponent.getInstance(item.id);\n\n      if (!drawer) {\n        drawer = new DrawerComponent(item, defaultDrawerOptions);\n      }\n\n      drawer.element = item;\n      drawer.hide();\n    });\n  } // Global Initialization\n\n\n  static initGlobalHandlers() {\n    // Window Resize Handling\n    window.addEventListener('resize', function () {\n      let timer;\n      throttle(timer, () => {\n        // Locate and update Drawer instances on window resize\n        const elements = document.body.querySelectorAll('[data-kt-drawer=\"true\"]');\n        elements.forEach(el => {\n          const item = el;\n          const instance = DrawerComponent.getInstance(item.id);\n\n          if (instance) {\n            instance.element = item;\n            instance.update();\n          }\n        });\n      }, 200);\n    });\n  }\n\n}\n\n_a = DrawerComponent; // Static methods\n\nDrawerComponent.hasInstace = elementId => {\n  return DrawerStore.has(elementId);\n};\n\nDrawerComponent.getInstance = elementId => {\n  return DrawerStore.get(elementId);\n};\n\nDrawerComponent.hideAll = () => {\n  const oldInstances = DrawerStore.getAllInstances();\n  oldInstances.forEach(dr => {\n    dr.hide();\n  });\n};\n\nDrawerComponent.updateAll = () => {\n  const oldInstances = DrawerStore.getAllInstances();\n  oldInstances.forEach(dr => {\n    dr.update();\n  });\n}; // Dismiss instances\n\n\nDrawerComponent.handleDismiss = () => {\n  // External drawer toggle handler\n  DOMEventHandlerUtil.on(document.body, '[data-kt-drawer-dismiss=\"true\"]', 'click', () => {\n    /* @ts-ignore */\n    const element = _a.closest('[data-kt-drawer=\"true\"]');\n\n    if (element) {\n      const drawer = DrawerComponent.getInstance(element);\n\n      if (drawer && drawer.isShown()) {\n        drawer.hide();\n      }\n    }\n  });\n};\n\nDrawerComponent.bootstrap = () => {\n  DrawerComponent.createInstances('[data-kt-drawer=\"true\"]');\n  DrawerComponent.initGlobalHandlers();\n  DrawerComponent.handleDismiss();\n};\n\nDrawerComponent.reinitialization = () => {\n  DrawerComponent.createInstances('[data-kt-drawer=\"true\"]');\n  DrawerComponent.hideAll();\n  DrawerComponent.updateAll();\n  DrawerComponent.handleDismiss();\n};\n\nexport { DrawerComponent, defaultDrawerOptions };","map":null,"metadata":{},"sourceType":"module"}