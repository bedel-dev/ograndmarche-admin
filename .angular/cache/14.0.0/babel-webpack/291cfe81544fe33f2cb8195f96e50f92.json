{"ast":null,"code":"import { getElementIndex, getUniqueIdWithPrefix, ElementAnimateUtil, EventHandlerUtil, DataUtil, DOMEventHandlerUtil, ElementStyleUtil } from '../_utils/index';\nconst defaultStepperOptions = {\n  startIndex: 1,\n  animation: false,\n  animationSpeed: '0.3s',\n  animationNextClass: 'animate__animated animate__slideInRight animate__fast',\n  animationPreviousClass: 'animate__animated animate__slideInLeft animate__fast'\n};\nlet StepperComponent = /*#__PURE__*/(() => {\n  class StepperComponent {\n    constructor(_element, options) {\n      var _a;\n\n      this.totatStepsNumber = 0;\n      this.passedStepIndex = 0;\n      this.currentStepIndex = 1;\n\n      this._goTo = index => {\n        EventHandlerUtil.trigger(this.element, 'kt.stepper.change'); // Skip if this step is already shown\n\n        if (index === this.currentStepIndex || index > this.totatStepsNumber || index < 0) {\n          return;\n        } // Validate step number\n\n\n        index = parseInt(index.toString()); // Set current step\n\n        this.passedStepIndex = this.currentStepIndex;\n        this.currentStepIndex = index; // Refresh elements\n\n        this.refreshUI();\n        EventHandlerUtil.trigger(this.element, 'kt.stepper.changed');\n      };\n\n      this.initHandlers = () => {\n        var _a, _b;\n\n        (_a = this.btnNext) === null || _a === void 0 ? void 0 : _a.addEventListener('click', e => {\n          e.preventDefault();\n          EventHandlerUtil.trigger(this.element, 'kt.stepper.next', e);\n        });\n        (_b = this.btnPrev) === null || _b === void 0 ? void 0 : _b.addEventListener('click', e => {\n          e.preventDefault();\n          EventHandlerUtil.trigger(this.element, 'kt.stepper.previous', e);\n        });\n        DOMEventHandlerUtil.on(this.element, '[data-kt-stepper-action=\"step\"]', 'click', e => {\n          e.preventDefault();\n\n          if (this.steps && this.steps.length > 0) {\n            for (let i = 0; i < this.steps.length; i++) {\n              if (this.steps[i] === this.element) {\n                let index = i + 1;\n\n                const stepDirection = this._getStepDirection(index);\n\n                EventHandlerUtil.trigger(this.element, `stepper.${stepDirection}`, e);\n                return;\n              }\n            }\n          }\n        });\n      };\n\n      this._getStepDirection = index => {\n        return index > this.currentStepIndex ? 'next' : 'previous';\n      };\n\n      this.getStepContent = index => {\n        const content = this.element.querySelectorAll('[data-kt-stepper-element=\"content\"]');\n\n        if (!content) {\n          return false;\n        }\n\n        if (content[index - 1]) {\n          return content[index - 1];\n        }\n\n        return false;\n      };\n\n      this.getLastStepIndex = () => {\n        return this.totatStepsNumber;\n      };\n\n      this.getTotalStepsNumber = () => {\n        return this.totatStepsNumber;\n      };\n\n      this.refreshUI = () => {\n        let state = '';\n\n        if (this.isLastStep()) {\n          state = 'last';\n        } else if (this.isFirstStep()) {\n          state = 'first';\n        } else {\n          state = 'between';\n        } // Set state class\n\n\n        this.element.classList.remove('last');\n        this.element.classList.remove('first');\n        this.element.classList.remove('between');\n        this.element.classList.add(state); // Step Items\n\n        const elements = this.element.querySelectorAll('[data-kt-stepper-element=\"nav\"], [data-kt-stepper-element=\"content\"], [data-kt-stepper-element=\"info\"]');\n\n        if (!elements || elements.length <= 0) {\n          return;\n        }\n\n        for (var i = 0, len = elements.length; i < len; i++) {\n          var element = elements[i];\n          var index = getElementIndex(element) + 1;\n          element.classList.remove('current');\n          element.classList.remove('completed');\n          element.classList.remove('pending');\n\n          if (index === this.currentStepIndex) {\n            element.classList.add('current');\n\n            if (this.options.animation !== false && element.getAttribute('data-kt-stepper-element') === 'content') {\n              ElementStyleUtil.set(element, 'animationDuration', this.options.animationSpeed);\n              const animation = this._getStepDirection(this.passedStepIndex) === 'previous' ? this.options.animationPreviousClass : this.options.animationNextClass;\n              ElementAnimateUtil.animateClass(element, animation);\n            }\n          } else {\n            if (index < this.currentStepIndex) {\n              element.classList.add('completed');\n            } else {\n              element.classList.add('pending');\n            }\n          }\n        }\n      };\n\n      this.isLastStep = () => {\n        return this.currentStepIndex === this.totatStepsNumber;\n      };\n\n      this.isFirstStep = () => {\n        return this.currentStepIndex === 1;\n      };\n\n      this.isBetweenStep = () => {\n        return this.isLastStep() === false && this.isFirstStep() === false;\n      }; //   ///////////////////////\n      //   // ** Public API  ** //\n      //   ///////////////////////\n      //   // Plugin API\n\n\n      this.goto = index => {\n        return this._goTo(index);\n      };\n\n      this.goNext = () => {\n        return this.goto(this.getNextStepIndex());\n      };\n\n      this.goPrev = () => {\n        return this.goto(this.getPrevStepIndex());\n      };\n\n      this.goFirst = () => {\n        return this.goto(1);\n      };\n\n      this.goLast = () => {\n        return this.goto(this.getLastStepIndex());\n      };\n\n      this.getCurrentStepIndex = () => {\n        return this.currentStepIndex;\n      };\n\n      this.getNextStepIndex = () => {\n        if (this.totatStepsNumber >= this.currentStepIndex + 1) {\n          return this.currentStepIndex + 1;\n        } else {\n          return this.totatStepsNumber;\n        }\n      };\n\n      this.getPassedStepIndex = () => {\n        return this.passedStepIndex;\n      };\n\n      this.getPrevStepIndex = () => {\n        if (this.currentStepIndex - 1 > 1) {\n          return this.currentStepIndex - 1;\n        } else {\n          return 1;\n        }\n      };\n\n      this.getElement = index => {\n        return this.element;\n      }; // Event API\n\n\n      this.on = (name, handler) => {\n        return EventHandlerUtil.on(this.element, name, handler);\n      };\n\n      this.one = (name, handler) => {\n        return EventHandlerUtil.one(this.element, name, handler);\n      };\n\n      this.off = (name, handlerId) => {\n        return EventHandlerUtil.off(this.element, name, handlerId);\n      };\n\n      this.destroy = () => {\n        console.log('destroy stepper');\n      };\n\n      this.trigger = (name, event) => {\n        return EventHandlerUtil.trigger(this.element, name, event);\n      };\n\n      this.element = _element;\n      this.options = Object.assign(defaultStepperOptions, options);\n      this.instanceUid = getUniqueIdWithPrefix('stepper'); // Elements\n\n      this.steps = this.element.querySelectorAll('[data-kt-stepper-element=\"nav\"]');\n      this.btnNext = this.element.querySelector('[data-kt-stepper-action=\"next\"]');\n      this.btnPrev = this.element.querySelector('[data-kt-stepper-action=\"previous\"]');\n      this.btnSubmit = this.element.querySelector('[data-kt-stepper-action=\"submit\"]'); // Variables\n\n      this.totatStepsNumber = ((_a = this.steps) === null || _a === void 0 ? void 0 : _a.length) | 0;\n      this.passedStepIndex = 0;\n      this.currentStepIndex = 1; // Set Current Step\n\n      if (this.options.startIndex > 1) {\n        this._goTo(this.options.startIndex);\n      } // Event Handlers\n\n\n      this.initHandlers(); // Bind Instance\n\n      DataUtil.set(this.element, 'stepper', this);\n    } // Static methods\n\n\n    static hasInstace(element) {\n      return DataUtil.has(element, 'stepper');\n    }\n\n    static getInstance(element) {\n      if (element !== null && StepperComponent.hasInstace(element)) {\n        const data = DataUtil.get(element, 'stepper');\n\n        if (data) {\n          return data;\n        }\n      }\n    } // Create Instances\n\n\n    static createInstances(selector) {\n      const elements = document.body.querySelectorAll(selector);\n      elements.forEach(element => {\n        const item = element;\n        let stepper = StepperComponent.getInstance(item);\n\n        if (!stepper) {\n          stepper = new StepperComponent(item, defaultStepperOptions);\n        }\n      });\n    }\n\n    static bootstrap(attr = '[data-kt-stepper]') {\n      StepperComponent.createInstances(attr);\n    }\n\n  }\n\n  StepperComponent.createInsance = (element, options = defaultStepperOptions) => {\n    if (!element) {\n      return null;\n    }\n\n    let stepper = StepperComponent.getInstance(element);\n\n    if (!stepper) {\n      stepper = new StepperComponent(element, options);\n    }\n\n    return stepper;\n  };\n\n  return StepperComponent;\n})();\nexport { StepperComponent, defaultStepperOptions };","map":null,"metadata":{},"sourceType":"module"}