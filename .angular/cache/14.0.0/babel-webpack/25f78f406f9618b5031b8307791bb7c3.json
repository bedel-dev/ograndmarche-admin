{"ast":null,"code":"import { createPopper } from '@popperjs/core';\nimport { getElementChild, getElementParents, getAttributeValueByBreakpoint, getUniqueIdWithPrefix, DataUtil, ElementStyleUtil, EventHandlerUtil, insertAfterElement, slideUp, slideDown, DOMEventHandlerUtil, throttle, getHighestZindex } from '../_utils/index';\nconst defaultMenuOptions = {\n  dropdown: {\n    hoverTimeout: 200,\n    zindex: 105\n  },\n  accordion: {\n    slideSpeed: 250,\n    expand: false\n  }\n};\nlet MenuComponent = /*#__PURE__*/(() => {\n  class MenuComponent {\n    constructor(_element, options) {\n      this.triggerElement = null; // Set external trigger element\n\n      this._setTriggerElement = () => {\n        const target = document.querySelector(`[data-kt-menu-target=\"#${this.element.getAttribute('id')}\"`);\n\n        if (target) {\n          this.triggerElement = target;\n        } else if (this.element.closest('[data-kt-menu-trigger]')) {\n          this.triggerElement = this.element.closest('[data-kt-menu-trigger]');\n        } else if (this.element.parentNode && getElementChild(this.element.parentNode, '[data-kt-menu-trigger]')) {\n          const child = getElementChild(this.element.parentNode, '[data-kt-menu-trigger]');\n\n          if (child) {\n            this.triggerElement = child;\n          }\n        }\n\n        if (this.triggerElement) {\n          DataUtil.set(this.triggerElement, 'menu', this);\n        }\n      }; // Test if menu has external trigger element\n\n\n      this._isTriggerElement = item => {\n        return this.triggerElement === item;\n      }; // Get item option(through html attributes)\n\n\n      this._getItemOption = (item, name) => {\n        let value = null;\n\n        if (item && item.hasAttribute('data-kt-menu-' + name)) {\n          const attr = item.getAttribute('data-kt-menu-' + name) || '';\n          value = getAttributeValueByBreakpoint(attr);\n\n          if (value !== null && String(value) === 'true') {\n            value = true;\n          } else if (value !== null && String(value) === 'false') {\n            value = false;\n          }\n        }\n\n        return value;\n      }; // Get item element\n\n\n      this._getItemElement = _element => {\n        // Element is the external trigger element\n        if (this._isTriggerElement(_element)) {\n          return _element;\n        } // Element has item toggler attribute\n\n\n        if (_element.hasAttribute('data-kt-menu-trigger')) {\n          return _element;\n        } // Element has item DOM reference in it's data storage\n\n\n        const itemElement = DataUtil.get(_element, 'item');\n\n        if (itemElement) {\n          return itemElement;\n        } // Item is parent of element\n\n\n        const item = _element.closest('.menu-item[data-kt-menu-trigger]');\n\n        if (item) {\n          return item;\n        } // Element's parent has item DOM reference in it's data storage\n\n\n        const sub = _element.closest('.menu-sub');\n\n        if (sub) {\n          const subItem = DataUtil.get(sub, 'item');\n\n          if (subItem) {\n            return subItem;\n          }\n        }\n      }; // Get item parent element\n\n\n      this._getItemParentElement = item => {\n        const sub = item.closest('.menu-sub');\n\n        if (!sub) {\n          return null;\n        }\n\n        const subItem = DataUtil.get(sub, 'item');\n\n        if (subItem) {\n          return subItem;\n        }\n\n        const parentItem = sub.closest('.menu-item[data-kt-menu-trigger]');\n\n        if (sub && parentItem) {\n          return parentItem;\n        }\n\n        return null;\n      }; // Get item parent elements\n\n\n      this._getItemParentElements = item => {\n        const parents = [];\n        let parent;\n        let i = 0;\n        let buffer = item;\n\n        do {\n          parent = this._getItemParentElement(buffer);\n\n          if (parent) {\n            parents.push(parent);\n            buffer = parent;\n          }\n\n          i++;\n        } while (parent !== null && i < 20);\n\n        if (this.triggerElement) {\n          parents.unshift(this.triggerElement);\n        }\n\n        return parents;\n      }; // Prepare popper config for dropdown(see: https://popper.js.org/docs/v2/)\n\n\n      this._getDropdownPopperConfig = item => {\n        // Placement\n        const placementOption = this._getItemOption(item, 'placement');\n\n        let placement = 'right';\n\n        if (placementOption) {\n          placement = placementOption;\n        } // Flip\n        // const flipValue = this._getItemOption(item, 'flip')\n        // const flip = flipValue ? flipValue.toString().split(',') : []\n        // Offset\n\n\n        const offsetValue = this._getItemOption(item, 'offset');\n\n        const offset = offsetValue ? offsetValue.toString().split(',') : []; // Strategy\n\n        const strategy = this._getItemOption(item, 'overflow') === true ? 'absolute' : 'fixed';\n        return {\n          placement: placement,\n          strategy: strategy,\n          modifiers: [{\n            name: 'offset',\n            options: {\n              offset: offset\n            }\n          }, {\n            name: 'preventOverflow'\n          }, {\n            name: 'flip',\n            options: {\n              // altBoundary: true,\n              // fallbackPlacements: flip,\n              flipVariations: false\n            }\n          }]\n        };\n      }; // Get item child element\n\n\n      this._getItemChildElement = item => {\n        let selector = item;\n        const subItem = DataUtil.get(item, 'sub');\n\n        if (subItem) {\n          selector = subItem;\n        }\n\n        if (selector) {\n          //element = selector.querySelector('.show.menu-item[data-kt-menu-trigger]');\n          const element = selector.querySelector('.menu-item[data-kt-menu-trigger]');\n\n          if (element) {\n            return element;\n          }\n        }\n\n        return null;\n      }; // Get item child elements\n\n\n      this._getItemChildElements = item => {\n        const children = [];\n        let child;\n        let i = 0;\n        let buffer = item;\n\n        do {\n          child = this._getItemChildElement(buffer);\n\n          if (child) {\n            children.push(child);\n            buffer = child;\n          }\n\n          i++;\n        } while (child !== null && i < 20);\n\n        return children;\n      }; // Get item sub element\n\n\n      this._getItemSubElement = item => {\n        if (!item) {\n          return null;\n        }\n\n        if (this._isTriggerElement(item)) {\n          return this.element;\n        }\n\n        if (item.classList.contains('menu-sub')) {\n          return item;\n        } else if (DataUtil.has(item, 'sub')) {\n          const itemSub = DataUtil.get(item, 'sub');\n          return itemSub ? itemSub : null;\n        } else {\n          return getElementChild(item, '.menu-sub');\n        }\n      };\n\n      this._getCss = (el, styleProp) => {\n        const defaultView = (el.ownerDocument || document).defaultView;\n\n        if (!defaultView) {\n          return '';\n        } // sanitize property name to css notation\n        // (hyphen separated words eg. font-Size)\n\n\n        styleProp = styleProp.replace(/([A-Z])/g, '-$1').toLowerCase();\n        return defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);\n      }; // Get item sub type\n\n\n      this._getItemSubType = element => {\n        const sub = this._getItemSubElement(element);\n\n        if (sub && parseInt(this._getCss(sub, 'z-index')) > 0) {\n          return 'dropdown';\n        } else {\n          return 'accordion';\n        }\n      }; // Test if item's sub is shown\n\n\n      this._isItemSubShown = item => {\n        let sub = this._getItemSubElement(item);\n\n        if (sub) {\n          if (this._getItemSubType(item) === 'dropdown') {\n            const subHTMLElement = sub;\n            return subHTMLElement.classList.contains('show') && subHTMLElement.hasAttribute('data-popper-placement');\n          } else {\n            return item.classList.contains('show');\n          }\n        }\n\n        return false;\n      }; // Test if item dropdown is permanent\n\n\n      this._isItemDropdownPermanent = item => {\n        return this._getItemOption(item, 'permanent') === true;\n      }; // Test if item's parent is shown\n\n\n      this._isItemParentShown = item => {\n        return getElementParents(item, '.menu-item.show').length > 0;\n      }; // Test of it is item sub element\n\n\n      this._isItemSubElement = item => {\n        return item.classList.contains('menu-sub');\n      }; // Test if item has sub\n\n\n      this._hasItemSub = item => {\n        return item.classList.contains('menu-item') && item.hasAttribute('data-kt-menu-trigger');\n      }; // Get link element\n\n\n      this._getItemLinkElement = item => {\n        return getElementChild(item, '.menu-link');\n      }; // Get toggle element\n\n\n      this._getItemToggleElement = item => {\n        if (this.triggerElement) {\n          return this.triggerElement;\n        }\n\n        return this._getItemLinkElement(item);\n      }; // Show item dropdown\n\n\n      this._showDropdown = item => {\n        if (EventHandlerUtil.trigger(this.element, 'kt.menu.dropdown.show') === false) {\n          return;\n        } // Hide all currently shown dropdowns except current one\n\n\n        MenuComponent.hideDropdowns(item); // const toggle = this._isTriggerElement(item) ? item : this._getItemLinkElement(item);\n\n        const sub = this._getItemSubElement(item);\n\n        const width = this._getItemOption(item, 'width');\n\n        const height = this._getItemOption(item, 'height');\n\n        let zindex = this.options.dropdown.zindex;\n        const parentZindex = getHighestZindex(item); // update\n        // Apply a new z-index if dropdown's toggle element or it's parent has greater z-index // update\n\n        if (parentZindex !== null && parentZindex >= zindex) {\n          zindex = parentZindex + 1;\n        }\n\n        if (zindex && sub) {\n          ElementStyleUtil.set(sub, 'z-index', zindex);\n        }\n\n        if (width && sub) {\n          ElementStyleUtil.set(sub, 'width', width);\n        }\n\n        if (height && sub) {\n          ElementStyleUtil.set(sub, 'height', height);\n        }\n\n        this.initDropdownPopper(item, sub);\n        item.classList.add('show');\n        item.classList.add('menu-dropdown');\n        sub === null || sub === void 0 ? void 0 : sub.classList.add('show'); // Append the sub the the root of the menu\n\n        if (this._getItemOption(item, 'overflow') === true) {\n          if (sub) {\n            document.body.appendChild(sub);\n            DataUtil.set(item, 'sub', sub);\n            DataUtil.set(sub, 'item', item);\n            DataUtil.set(sub, 'menu', this);\n          }\n        } else {\n          if (sub) {\n            DataUtil.set(sub, 'item', item);\n          }\n        }\n\n        EventHandlerUtil.trigger(this.element, 'kt.menu.dropdown.shown');\n      }; // Init dropdown popper(new)\n\n\n      this.initDropdownPopper = (item, sub) => {\n        // Setup popper instance\n        let reference;\n\n        const attach = this._getItemOption(item, 'attach');\n\n        if (attach) {\n          if (attach === 'parent') {\n            reference = item.parentNode;\n          } else {\n            reference = document.querySelector(attach);\n          }\n        } else {\n          reference = item;\n        }\n\n        if (reference) {\n          const popper = createPopper(reference, sub, this._getDropdownPopperConfig(item));\n          DataUtil.set(item, 'popper', popper);\n        }\n      }; // Hide item dropdown\n\n\n      this._hideDropdown = item => {\n        if (EventHandlerUtil.trigger(this.element, 'kt.menu.dropdown.hide') === false) {\n          return;\n        }\n\n        const sub = this._getItemSubElement(item);\n\n        if (sub) {\n          ElementStyleUtil.set(sub, 'z-index', '');\n          ElementStyleUtil.set(sub, 'width', '');\n          ElementStyleUtil.set(sub, 'height', '');\n        }\n\n        item.classList.remove('show');\n        item.classList.remove('menu-dropdown');\n\n        if (sub) {\n          sub.classList.remove('show');\n        } // Append the sub back to it's parent\n\n\n        if (this._getItemOption(item, 'overflow') === true) {\n          if (item.classList.contains('menu-item')) {\n            if (sub) {\n              item.appendChild(sub);\n            }\n          } else {\n            insertAfterElement(this.element, item);\n          }\n\n          if (sub) {\n            DataUtil.remove(item, 'sub');\n            DataUtil.remove(sub, 'item');\n            DataUtil.remove(sub, 'menu');\n          }\n        }\n\n        if (DataUtil.has(item, 'popper') === true) {\n          // @ts-ignore\n          DataUtil.get(item, 'popper').destroy();\n          DataUtil.remove(item, 'popper');\n        } // Destroy popper(new)\n\n\n        this.destroyDropdownPopper(item);\n        EventHandlerUtil.trigger(this.element, 'kt.menu.dropdown.hidden');\n      }; // Destroy dropdown popper(new)\n\n\n      this.destroyDropdownPopper = item => {\n        if (DataUtil.has(item, 'popper') === true) {\n          // @ts-ignore\n          DataUtil.get(item, 'popper').destroy();\n          DataUtil.remove(item, 'popper');\n        }\n\n        EventHandlerUtil.trigger(this.element, 'kt.menu.dropdown.hidden');\n      };\n\n      this._showAccordion = item => {\n        if (EventHandlerUtil.trigger(this.element, 'kt.menu.accordion.show') === false) {\n          return;\n        }\n\n        if (this.options.accordion.expand === false) {\n          this._hideAccordions(item);\n        }\n\n        if (DataUtil.has(item, 'popper') === true) {\n          this._hideDropdown(item);\n        }\n\n        item.classList.add('hover'); // updateWW\n\n        item.classList.add('showing');\n\n        const subElement = this._getItemSubElement(item);\n\n        if (subElement) {\n          const sub = subElement;\n          slideDown(sub, this.options.accordion.slideSpeed, () => {\n            item.classList.remove('showing');\n            item.classList.add('show');\n            sub.classList.add('show');\n            EventHandlerUtil.trigger(this.element, 'kt.menu.accordion.shown');\n          });\n        }\n      };\n\n      this._hideAccordion = item => {\n        if (EventHandlerUtil.trigger(this.element, 'kt.menu.accordion.hide') === false) {\n          return;\n        }\n\n        const sub = this._getItemSubElement(item);\n\n        item.classList.add('hiding');\n\n        if (sub) {\n          slideUp(sub, this.options.accordion.slideSpeed, () => {\n            item.classList.remove('hiding');\n            item.classList.remove('show');\n            sub.classList.remove('show');\n            item.classList.remove('hover'); // update\n\n            EventHandlerUtil.trigger(this.element, 'kt.menu.accordion.hidden');\n          });\n        }\n      }; // Hide all shown accordions of item\n\n\n      this._hideAccordions = item => {\n        const itemsToHide = this.element.querySelectorAll('.show[data-kt-menu-trigger]');\n\n        if (itemsToHide && itemsToHide.length > 0) {\n          for (var i = 0, len = itemsToHide.length; i < len; i++) {\n            const itemToHide = itemsToHide[i];\n\n            if (this._getItemSubType(itemToHide) === 'accordion' && itemToHide !== item && item.contains(itemToHide) === false && itemToHide.contains(item) === false) {\n              this._hideAccordion(itemToHide);\n            }\n          }\n        }\n      }; // Event Handlers\n      // Reset item state classes if item sub type changed\n\n\n      this._reset = item => {\n        if (this._hasItemSub(item) === false) {\n          return;\n        }\n\n        const sub = this._getItemSubElement(item); // Reset sub state if sub type is changed during the window resize\n\n\n        if (DataUtil.has(item, 'type') && DataUtil.get(item, 'type') !== this._getItemSubType(item)) {\n          // updated\n          item.classList.remove('hover');\n          item.classList.remove('show');\n          item.classList.remove('show');\n\n          if (sub) {\n            sub.classList.remove('show');\n          }\n        } // updated\n\n      }; // TODO: not done\n\n\n      this._destroy = () => {}; // Update all item state classes if item sub type changed\n\n\n      this._update = () => {\n        const items = this.element.querySelectorAll('.menu-item[data-kt-menu-trigger]');\n        items.forEach(el => this._reset(el));\n      }; // Hide item sub\n\n\n      this._hide = item => {\n        if (!item) {\n          return;\n        }\n\n        if (this._isItemSubShown(item) === false) {\n          return;\n        }\n\n        if (this._getItemSubType(item) === 'dropdown') {\n          this._hideDropdown(item);\n        } else if (this._getItemSubType(item) === 'accordion') {\n          this._hideAccordion(item);\n        }\n      }; // Show item sub\n\n\n      this._show = item => {\n        if (!item) {\n          return;\n        }\n\n        if (this._isItemSubShown(item) === true) {\n          return;\n        }\n\n        if (this._getItemSubType(item) === 'dropdown') {\n          this._showDropdown(item); // // show current dropdown\n\n        } else if (this._getItemSubType(item) === 'accordion') {\n          this._showAccordion(item);\n        } // Remember last submenu type\n\n\n        DataUtil.set(item, 'type', this._getItemSubType(item)); // updated\n      }; // Toggle item sub\n\n\n      this._toggle = item => {\n        if (!item) {\n          return;\n        }\n\n        if (this._isItemSubShown(item) === true) {\n          this._hide(item);\n        } else {\n          this._show(item);\n        }\n      }; // Mouseout handle\n\n\n      this._mouseout = (element, e) => {\n        const item = this._getItemElement(element);\n\n        if (!item) {\n          return;\n        }\n\n        if (this._getItemOption(item, 'trigger') !== 'hover') {\n          return;\n        }\n\n        const timeout = setTimeout(() => {\n          if (DataUtil.get(item, 'hover') === '1') {\n            this._hide(item);\n          }\n        }, this.options.dropdown.hoverTimeout);\n        DataUtil.set(item, 'hover', '1');\n        DataUtil.set(item, 'timeout', timeout);\n      }; // Mouseover handle\n\n\n      this._mouseover = (element, e) => {\n        const item = this._getItemElement(element);\n\n        if (!item) {\n          return;\n        }\n\n        if (this._getItemOption(item, 'trigger') !== 'hover') {\n          return;\n        }\n\n        if (DataUtil.get(item, 'hover') === '1') {\n          const timeout = DataUtil.get(item, 'timeout');\n\n          if (timeout) {\n            clearTimeout(timeout);\n          }\n\n          DataUtil.remove(item, 'hover');\n          DataUtil.remove(item, 'timeout');\n        }\n\n        this._show(item);\n      }; // Dismiss handler\n\n\n      this._dismiss = (element, e) => {\n        const item = this._getItemElement(element);\n\n        if (!item) {\n          return;\n        }\n\n        const items = this._getItemChildElements(item); //if ( item !== null && _getItemOption(item, 'trigger') === 'click' &&  _getItemSubType(item) === 'dropdown' ) {\n\n\n        const itemSubType = this._getItemSubType(item);\n\n        if (item !== null && itemSubType === 'dropdown') {\n          this._hide(item); // hide items dropdown\n          // Hide all child elements as well\n\n\n          if (items.length > 0) {\n            for (let i = 0, len = items.length; i < len; i++) {\n              //if ( _getItemOption(item, 'trigger') === 'click' &&  _getItemSubType(item) === 'dropdown' ) {\n              if (items[i] !== null && this._getItemSubType(items[i]) === 'dropdown') {\n                this._hide(items[i]);\n              }\n            }\n          }\n        }\n      }; // Link handler\n\n\n      this._link = (element, e) => {\n        if (EventHandlerUtil.trigger(this.element, 'kt.menu.link.click') === false) {\n          return;\n        } // Dismiss all shown dropdowns\n\n\n        MenuComponent.hideDropdowns(undefined);\n        EventHandlerUtil.trigger(this.element, 'kt.menu.link.clicked');\n      };\n\n      this._click = (element, e) => {\n        e.preventDefault();\n\n        const item = this._getItemElement(element);\n\n        if (item) {\n          if (this._getItemOption(item, 'trigger') !== 'click') {\n            return;\n          }\n\n          if (this._getItemOption(item, 'toggle') === false) {\n            this._show(item);\n          } else {\n            this._toggle(item);\n          }\n        }\n      }; ///////////////////////\n      // ** Public API  ** //\n      ///////////////////////\n\n\n      this.click = (element, e) => {\n        return this._click(element, e);\n      };\n\n      this.link = (element, e) => {\n        return this._link(element, e);\n      };\n\n      this.dismiss = (element, e) => {\n        return this._dismiss(element, e);\n      };\n\n      this.mouseover = (element, e) => {\n        return this._mouseover(element, e);\n      };\n\n      this.mouseout = (element, e) => {\n        return this._mouseout(element, e);\n      }; // General Methods\n\n\n      this.getItemTriggerType = item => {\n        return this._getItemOption(item, 'trigger');\n      };\n\n      this.getItemSubType = element => {\n        return this._getItemSubType(element);\n      };\n\n      this.show = item => {\n        return this._show(item);\n      };\n\n      this.hide = item => {\n        return this._hide(item);\n      };\n\n      this.reset = item => {\n        return this._reset(item);\n      };\n\n      this.update = () => {\n        return this._update();\n      };\n\n      this.getElement = () => {\n        return this.element;\n      };\n\n      this.getItemLinkElement = item => {\n        return this._getItemLinkElement(item);\n      };\n\n      this.getItemToggleElement = item => {\n        return this._getItemToggleElement(item);\n      };\n\n      this.getItemSubElement = item => {\n        return this._getItemSubElement(item);\n      };\n\n      this.getItemParentElements = item => {\n        return this._getItemParentElements(item);\n      };\n\n      this.isItemSubShown = item => {\n        return this._isItemSubShown(item);\n      };\n\n      this.isItemParentShown = item => {\n        return this._isItemParentShown(item);\n      };\n\n      this.getTriggerElement = () => {\n        return this.triggerElement;\n      };\n\n      this.isItemDropdownPermanent = item => {\n        return this._isItemDropdownPermanent(item);\n      }; // Accordion Mode Methods\n\n\n      this.hideAccordions = item => {\n        return this._hideAccordions(item);\n      }; // Event API\n\n\n      this.on = (name, handler) => {\n        return EventHandlerUtil.on(this.element, name, handler);\n      };\n\n      this.one = (name, handler) => {\n        return EventHandlerUtil.one(this.element, name, handler);\n      };\n\n      this.off = (name, handlerId) => {\n        return EventHandlerUtil.off(this.element, name, handlerId);\n      };\n\n      this.element = _element;\n      this.options = Object.assign(defaultMenuOptions, options);\n      this.instanceUid = getUniqueIdWithPrefix('menu'); // this.element.setAttribute('data-kt-menu', 'true')\n\n      this._setTriggerElement();\n\n      this._update();\n\n      DataUtil.set(this.element, 'menu', this);\n      return this;\n    }\n\n  }\n\n  // public static methods\n  // Get KTMenu instance by element\n  MenuComponent.getInstance = element => {\n    // Element has menu DOM reference in it's DATA storage\n    const elementMenu = DataUtil.get(element, 'menu');\n\n    if (elementMenu) {\n      return elementMenu;\n    } // Element has .menu parent\n\n\n    const menu = element.closest('.menu');\n\n    if (menu) {\n      const menuData = DataUtil.get(menu, 'menu');\n\n      if (menuData) {\n        return menuData;\n      }\n    } // Element has a parent with DOM reference to .menu in it's DATA storage\n\n\n    if (element.classList.contains('menu-link')) {\n      const sub = element.closest('.menu-sub');\n\n      if (sub) {\n        const subMenu = DataUtil.get(sub, 'menu');\n\n        if (subMenu) {\n          return subMenu;\n        }\n      }\n    }\n\n    return null;\n  }; // Hide all dropdowns and skip one if provided\n\n\n  MenuComponent.hideDropdowns = skip => {\n    const items = document.querySelectorAll('.show.menu-dropdown[data-kt-menu-trigger]');\n\n    if (items && items.length > 0) {\n      for (let i = 0, len = items.length; i < len; i++) {\n        const item = items[i];\n        const menu = MenuComponent.getInstance(item);\n\n        if (menu && menu.getItemSubType(item) === 'dropdown') {\n          if (skip) {\n            if ( // @ts-ignore\n            menu.getItemSubElement(item).contains(skip) === false && item.contains(skip) === false && item !== skip) {\n              menu.hide(item);\n            }\n          } else {\n            menu.hide(item);\n          }\n        }\n      }\n    }\n  };\n\n  MenuComponent.updateDropdowns = () => {\n    const items = document.querySelectorAll('.show.menu-dropdown[data-kt-menu-trigger]');\n\n    if (items && items.length > 0) {\n      for (var i = 0, len = items.length; i < len; i++) {\n        var item = items[i];\n\n        if (DataUtil.has(item, 'popper')) {\n          // @ts-ignore\n          DataUtil.get(item, 'popper').forceUpdate();\n        }\n      }\n    }\n  }; // Global handlers\n\n\n  MenuComponent.createInstances = selector => {\n    // Initialize menus\n    document.querySelectorAll(selector).forEach(el => {\n      const menuItem = el;\n      let menuInstance = MenuComponent.getInstance(menuItem);\n\n      if (!menuInstance) {\n        menuInstance = new MenuComponent(el, defaultMenuOptions);\n      }\n    });\n  };\n\n  MenuComponent.initGlobalHandlers = () => {\n    // Dropdown handler\n    document.addEventListener('click', e => {\n      const menuItems = document.querySelectorAll('.show.menu-dropdown[data-kt-menu-trigger]');\n\n      if (menuItems && menuItems.length > 0) {\n        for (let i = 0; i < menuItems.length; i++) {\n          const item = menuItems[i];\n          const menuObj = MenuComponent.getInstance(item);\n\n          if (menuObj && menuObj.getItemSubType(item) === 'dropdown') {\n            // eslint-disable-next-line @typescript-eslint/no-unused-vars\n            const menu = menuObj.getElement();\n            const sub = menuObj.getItemSubElement(item);\n\n            if (item === e.target || item.contains(e.target)) {\n              continue;\n            }\n\n            if (sub && (sub === e.target || sub.contains(e.target))) {\n              continue;\n            }\n\n            menuObj.hide(item);\n          }\n        }\n      }\n    }); // Sub toggle handler\n\n    DOMEventHandlerUtil.on(document.body, '.menu-item[data-kt-menu-trigger] > .menu-link, [data-kt-menu-trigger]:not(.menu-item):not([data-kt-menu-trigger=\"auto\"])', 'click', function (e) {\n      const menu = MenuComponent.getInstance(this);\n\n      if (menu) {\n        return menu.click(this, e);\n      }\n    }); // // Link handler\n\n    DOMEventHandlerUtil.on(document.body, '.menu-item:not([data-kt-menu-trigger]) > .menu-link', 'click', function (e) {\n      e.stopPropagation();\n      const menu = MenuComponent.getInstance(this);\n\n      if (menu && menu.link) {\n        return menu.link(this, e);\n      }\n    }); // Dismiss handler\n\n    DOMEventHandlerUtil.on(document.body, '[data-kt-menu-dismiss=\"true\"]', 'click', function (e) {\n      const menu = MenuComponent.getInstance(this);\n\n      if (menu) {\n        return menu.dismiss(this, e);\n      }\n    }); // Mouseover handler\n\n    DOMEventHandlerUtil.on(document.body, '[data-kt-menu-trigger], .menu-sub', 'mouseover', function (e) {\n      const menu = MenuComponent.getInstance(this);\n\n      if (menu && menu.getItemSubType(this) === 'dropdown') {\n        return menu.mouseover(this, e);\n      }\n    }); // Mouseout handler\n\n    DOMEventHandlerUtil.on(document.body, '[data-kt-menu-trigger], .menu-sub', 'mouseout', function (e) {\n      const menu = MenuComponent.getInstance(this);\n\n      if (menu && menu.getItemSubType(this) === 'dropdown') {\n        return menu.mouseout(this, e);\n      }\n    }); // Resize handler\n\n    window.addEventListener('resize', () => {\n      let timer;\n      throttle(timer, () => {\n        // Locate and update Drawer instances on window resize\n        const elements = document.querySelectorAll('[data-kt-menu=\"true\"]');\n        elements.forEach(el => {\n          const menu = MenuComponent.getInstance(el);\n\n          if (menu) {\n            menu.update();\n          }\n        });\n      }, 200);\n    });\n  };\n\n  MenuComponent.bootstrap = () => {\n    MenuComponent.initGlobalHandlers();\n    MenuComponent.createInstances('[data-kt-menu=\"true\"]');\n  };\n\n  MenuComponent.reinitialization = () => {\n    MenuComponent.createInstances('[data-kt-menu=\"true\"]');\n  };\n\n  MenuComponent.createInsance = (selector, options = defaultMenuOptions) => {\n    const element = document.body.querySelector(selector);\n\n    if (!element) {\n      return;\n    }\n\n    const item = element;\n    let menu = MenuComponent.getInstance(item);\n\n    if (!menu) {\n      menu = new MenuComponent(item, options);\n    }\n\n    return menu;\n  };\n\n  return MenuComponent;\n})();\nexport { MenuComponent, defaultMenuOptions };","map":null,"metadata":{},"sourceType":"module"}