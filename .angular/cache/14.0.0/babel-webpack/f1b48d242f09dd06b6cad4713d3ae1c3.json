{"ast":null,"code":"import * as lpn from 'google-libphonenumber';\nimport * as i0 from '@angular/core';\nimport { Injectable, Directive, EventEmitter, forwardRef, Component, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport * as i4 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { setTheme } from 'ngx-bootstrap/utils';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from 'ngx-bootstrap/dropdown';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nconst _c0 = [\"countryList\"];\n\nfunction NgxIntlTelInputComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"+\", ctx_r0.selectedCountry.dialCode, \"\");\n  }\n}\n\nfunction NgxIntlTelInputComponent_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"input\", 18);\n    i0.ɵɵlistener(\"ngModelChange\", function NgxIntlTelInputComponent_div_6_div_1_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.countrySearchText = $event);\n    })(\"keyup\", function NgxIntlTelInputComponent_div_6_div_1_Template_input_keyup_1_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.searchCountry());\n    })(\"click\", function NgxIntlTelInputComponent_div_6_div_1_Template_input_click_1_listener($event) {\n      return $event.stopPropagation();\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.countrySearchText)(\"placeholder\", ctx_r3.searchCountryPlaceholder);\n  }\n}\n\nfunction NgxIntlTelInputComponent_div_6_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 19);\n    i0.ɵɵlistener(\"click\", function NgxIntlTelInputComponent_div_6_li_4_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const country_r12 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n\n      const _r2 = i0.ɵɵreference(8);\n\n      return i0.ɵɵresetView(ctx_r13.onCountrySelect(country_r12, _r2));\n    });\n    i0.ɵɵelementStart(1, \"div\", 20);\n    i0.ɵɵelement(2, \"div\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 21);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 22);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const country_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"id\", country_r12.htmlId + \"-preferred\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", country_r12.flagClass);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(country_r12.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"+\", country_r12.dialCode, \"\");\n  }\n}\n\nfunction NgxIntlTelInputComponent_div_6_li_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"li\", 23);\n  }\n}\n\nfunction NgxIntlTelInputComponent_div_6_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 24);\n    i0.ɵɵlistener(\"click\", function NgxIntlTelInputComponent_div_6_li_6_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const country_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n\n      const _r2 = i0.ɵɵreference(8);\n\n      return i0.ɵɵresetView(ctx_r16.onCountrySelect(country_r15, _r2));\n    });\n    i0.ɵɵelementStart(1, \"div\", 20);\n    i0.ɵɵelement(2, \"div\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 21);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 22);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const country_r15 = ctx.$implicit;\n    i0.ɵɵproperty(\"id\", country_r15.htmlId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", country_r15.flagClass);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(country_r15.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"+\", country_r15.dialCode, \"\");\n  }\n}\n\nfunction NgxIntlTelInputComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, NgxIntlTelInputComponent_div_6_div_1_Template, 2, 2, \"div\", 11);\n    i0.ɵɵelementStart(2, \"ul\", 12, 13);\n    i0.ɵɵtemplate(4, NgxIntlTelInputComponent_div_6_li_4_Template, 7, 4, \"li\", 14);\n    i0.ɵɵtemplate(5, NgxIntlTelInputComponent_div_6_li_5_Template, 1, 0, \"li\", 15);\n    i0.ɵɵtemplate(6, NgxIntlTelInputComponent_div_6_li_6_Template, 7, 4, \"li\", 16);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.searchCountryFlag && ctx_r1.searchCountryField);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.preferredCountriesInDropDown);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.preferredCountriesInDropDown == null ? null : ctx_r1.preferredCountriesInDropDown.length);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.allCountries);\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    \"disabled\": a0\n  };\n};\n\nvar CountryISO;\n\n(function (CountryISO) {\n  CountryISO[\"Afghanistan\"] = \"af\";\n  CountryISO[\"Albania\"] = \"al\";\n  CountryISO[\"Algeria\"] = \"dz\";\n  CountryISO[\"AmericanSamoa\"] = \"as\";\n  CountryISO[\"Andorra\"] = \"ad\";\n  CountryISO[\"Angola\"] = \"ao\";\n  CountryISO[\"Anguilla\"] = \"ai\";\n  CountryISO[\"AntiguaAndBarbuda\"] = \"ag\";\n  CountryISO[\"Argentina\"] = \"ar\";\n  CountryISO[\"Armenia\"] = \"am\";\n  CountryISO[\"Aruba\"] = \"aw\";\n  CountryISO[\"Australia\"] = \"au\";\n  CountryISO[\"Austria\"] = \"at\";\n  CountryISO[\"Azerbaijan\"] = \"az\";\n  CountryISO[\"Bahamas\"] = \"bs\";\n  CountryISO[\"Bahrain\"] = \"bh\";\n  CountryISO[\"Bangladesh\"] = \"bd\";\n  CountryISO[\"Barbados\"] = \"bb\";\n  CountryISO[\"Belarus\"] = \"by\";\n  CountryISO[\"Belgium\"] = \"be\";\n  CountryISO[\"Belize\"] = \"bz\";\n  CountryISO[\"Benin\"] = \"bj\";\n  CountryISO[\"Bermuda\"] = \"bm\";\n  CountryISO[\"Bhutan\"] = \"bt\";\n  CountryISO[\"Bolivia\"] = \"bo\";\n  CountryISO[\"BosniaAndHerzegovina\"] = \"ba\";\n  CountryISO[\"Botswana\"] = \"bw\";\n  CountryISO[\"Brazil\"] = \"br\";\n  CountryISO[\"BritishIndianOceanTerritory\"] = \"io\";\n  CountryISO[\"BritishVirginIslands\"] = \"vg\";\n  CountryISO[\"Brunei\"] = \"bn\";\n  CountryISO[\"Bulgaria\"] = \"bg\";\n  CountryISO[\"BurkinaFaso\"] = \"bf\";\n  CountryISO[\"Burundi\"] = \"bi\";\n  CountryISO[\"Cambodia\"] = \"kh\";\n  CountryISO[\"Cameroon\"] = \"cm\";\n  CountryISO[\"Canada\"] = \"ca\";\n  CountryISO[\"CapeVerde\"] = \"cv\";\n  CountryISO[\"CaribbeanNetherlands\"] = \"bq\";\n  CountryISO[\"CaymanIslands\"] = \"ky\";\n  CountryISO[\"CentralAfricanRepublic\"] = \"cf\";\n  CountryISO[\"Chad\"] = \"td\";\n  CountryISO[\"Chile\"] = \"cl\";\n  CountryISO[\"China\"] = \"cn\";\n  CountryISO[\"ChristmasIsland\"] = \"cx\";\n  CountryISO[\"Cocos\"] = \"cc\";\n  CountryISO[\"Colombia\"] = \"co\";\n  CountryISO[\"Comoros\"] = \"km\";\n  CountryISO[\"CongoDRCJamhuriYaKidemokrasiaYaKongo\"] = \"cd\";\n  CountryISO[\"CongoRepublicCongoBrazzaville\"] = \"cg\";\n  CountryISO[\"CookIslands\"] = \"ck\";\n  CountryISO[\"CostaRica\"] = \"cr\";\n  CountryISO[\"C\\u00F4teDIvoire\"] = \"ci\";\n  CountryISO[\"Croatia\"] = \"hr\";\n  CountryISO[\"Cuba\"] = \"cu\";\n  CountryISO[\"Cura\\u00E7ao\"] = \"cw\";\n  CountryISO[\"Cyprus\"] = \"cy\";\n  CountryISO[\"CzechRepublic\"] = \"cz\";\n  CountryISO[\"Denmark\"] = \"dk\";\n  CountryISO[\"Djibouti\"] = \"dj\";\n  CountryISO[\"Dominica\"] = \"dm\";\n  CountryISO[\"DominicanRepublic\"] = \"do\";\n  CountryISO[\"Ecuador\"] = \"ec\";\n  CountryISO[\"Egypt\"] = \"eg\";\n  CountryISO[\"ElSalvador\"] = \"sv\";\n  CountryISO[\"EquatorialGuinea\"] = \"gq\";\n  CountryISO[\"Eritrea\"] = \"er\";\n  CountryISO[\"Estonia\"] = \"ee\";\n  CountryISO[\"Ethiopia\"] = \"et\";\n  CountryISO[\"FalklandIslands\"] = \"fk\";\n  CountryISO[\"FaroeIslands\"] = \"fo\";\n  CountryISO[\"Fiji\"] = \"fj\";\n  CountryISO[\"Finland\"] = \"fi\";\n  CountryISO[\"France\"] = \"fr\";\n  CountryISO[\"FrenchGuiana\"] = \"gf\";\n  CountryISO[\"FrenchPolynesia\"] = \"pf\";\n  CountryISO[\"Gabon\"] = \"ga\";\n  CountryISO[\"Gambia\"] = \"gm\";\n  CountryISO[\"Georgia\"] = \"ge\";\n  CountryISO[\"Germany\"] = \"de\";\n  CountryISO[\"Ghana\"] = \"gh\";\n  CountryISO[\"Gibraltar\"] = \"gi\";\n  CountryISO[\"Greece\"] = \"gr\";\n  CountryISO[\"Greenland\"] = \"gl\";\n  CountryISO[\"Grenada\"] = \"gd\";\n  CountryISO[\"Guadeloupe\"] = \"gp\";\n  CountryISO[\"Guam\"] = \"gu\";\n  CountryISO[\"Guatemala\"] = \"gt\";\n  CountryISO[\"Guernsey\"] = \"gg\";\n  CountryISO[\"Guinea\"] = \"gn\";\n  CountryISO[\"GuineaBissau\"] = \"gw\";\n  CountryISO[\"Guyana\"] = \"gy\";\n  CountryISO[\"Haiti\"] = \"ht\";\n  CountryISO[\"Honduras\"] = \"hn\";\n  CountryISO[\"HongKong\"] = \"hk\";\n  CountryISO[\"Hungary\"] = \"hu\";\n  CountryISO[\"Iceland\"] = \"is\";\n  CountryISO[\"India\"] = \"in\";\n  CountryISO[\"Indonesia\"] = \"id\";\n  CountryISO[\"Iran\"] = \"ir\";\n  CountryISO[\"Iraq\"] = \"iq\";\n  CountryISO[\"Ireland\"] = \"ie\";\n  CountryISO[\"IsleOfMan\"] = \"im\";\n  CountryISO[\"Israel\"] = \"il\";\n  CountryISO[\"Italy\"] = \"it\";\n  CountryISO[\"Jamaica\"] = \"jm\";\n  CountryISO[\"Japan\"] = \"jp\";\n  CountryISO[\"Jersey\"] = \"je\";\n  CountryISO[\"Jordan\"] = \"jo\";\n  CountryISO[\"Kazakhstan\"] = \"kz\";\n  CountryISO[\"Kenya\"] = \"ke\";\n  CountryISO[\"Kiribati\"] = \"ki\";\n  CountryISO[\"Kosovo\"] = \"xk\";\n  CountryISO[\"Kuwait\"] = \"kw\";\n  CountryISO[\"Kyrgyzstan\"] = \"kg\";\n  CountryISO[\"Laos\"] = \"la\";\n  CountryISO[\"Latvia\"] = \"lv\";\n  CountryISO[\"Lebanon\"] = \"lb\";\n  CountryISO[\"Lesotho\"] = \"ls\";\n  CountryISO[\"Liberia\"] = \"lr\";\n  CountryISO[\"Libya\"] = \"ly\";\n  CountryISO[\"Liechtenstein\"] = \"li\";\n  CountryISO[\"Lithuania\"] = \"lt\";\n  CountryISO[\"Luxembourg\"] = \"lu\";\n  CountryISO[\"Macau\"] = \"mo\";\n  CountryISO[\"Macedonia\"] = \"mk\";\n  CountryISO[\"Madagascar\"] = \"mg\";\n  CountryISO[\"Malawi\"] = \"mw\";\n  CountryISO[\"Malaysia\"] = \"my\";\n  CountryISO[\"Maldives\"] = \"mv\";\n  CountryISO[\"Mali\"] = \"ml\";\n  CountryISO[\"Malta\"] = \"mt\";\n  CountryISO[\"MarshallIslands\"] = \"mh\";\n  CountryISO[\"Martinique\"] = \"mq\";\n  CountryISO[\"Mauritania\"] = \"mr\";\n  CountryISO[\"Mauritius\"] = \"mu\";\n  CountryISO[\"Mayotte\"] = \"yt\";\n  CountryISO[\"Mexico\"] = \"mx\";\n  CountryISO[\"Micronesia\"] = \"fm\";\n  CountryISO[\"Moldova\"] = \"md\";\n  CountryISO[\"Monaco\"] = \"mc\";\n  CountryISO[\"Mongolia\"] = \"mn\";\n  CountryISO[\"Montenegro\"] = \"me\";\n  CountryISO[\"Montserrat\"] = \"ms\";\n  CountryISO[\"Morocco\"] = \"ma\";\n  CountryISO[\"Mozambique\"] = \"mz\";\n  CountryISO[\"Myanmar\"] = \"mm\";\n  CountryISO[\"Namibia\"] = \"na\";\n  CountryISO[\"Nauru\"] = \"nr\";\n  CountryISO[\"Nepal\"] = \"np\";\n  CountryISO[\"Netherlands\"] = \"nl\";\n  CountryISO[\"NewCaledonia\"] = \"nc\";\n  CountryISO[\"NewZealand\"] = \"nz\";\n  CountryISO[\"Nicaragua\"] = \"ni\";\n  CountryISO[\"Niger\"] = \"ne\";\n  CountryISO[\"Nigeria\"] = \"ng\";\n  CountryISO[\"Niue\"] = \"nu\";\n  CountryISO[\"NorfolkIsland\"] = \"nf\";\n  CountryISO[\"NorthKorea\"] = \"kp\";\n  CountryISO[\"NorthernMarianaIslands\"] = \"mp\";\n  CountryISO[\"Norway\"] = \"no\";\n  CountryISO[\"Oman\"] = \"om\";\n  CountryISO[\"Pakistan\"] = \"pk\";\n  CountryISO[\"Palau\"] = \"pw\";\n  CountryISO[\"Palestine\"] = \"ps\";\n  CountryISO[\"Panama\"] = \"pa\";\n  CountryISO[\"PapuaNewGuinea\"] = \"pg\";\n  CountryISO[\"Paraguay\"] = \"py\";\n  CountryISO[\"Peru\"] = \"pe\";\n  CountryISO[\"Philippines\"] = \"ph\";\n  CountryISO[\"Poland\"] = \"pl\";\n  CountryISO[\"Portugal\"] = \"pt\";\n  CountryISO[\"PuertoRico\"] = \"pr\";\n  CountryISO[\"Qatar\"] = \"qa\";\n  CountryISO[\"R\\u00E9union\"] = \"re\";\n  CountryISO[\"Romania\"] = \"ro\";\n  CountryISO[\"Russia\"] = \"ru\";\n  CountryISO[\"Rwanda\"] = \"rw\";\n  CountryISO[\"SaintBarth\\u00E9lemy\"] = \"bl\";\n  CountryISO[\"SaintHelena\"] = \"sh\";\n  CountryISO[\"SaintKittsAndNevis\"] = \"kn\";\n  CountryISO[\"SaintLucia\"] = \"lc\";\n  CountryISO[\"SaintMartin\"] = \"mf\";\n  CountryISO[\"SaintPierreAndMiquelon\"] = \"pm\";\n  CountryISO[\"SaintVincentAndTheGrenadines\"] = \"vc\";\n  CountryISO[\"Samoa\"] = \"ws\";\n  CountryISO[\"SanMarino\"] = \"sm\";\n  CountryISO[\"S\\u00E3oTom\\u00E9AndPr\\u00EDncipe\"] = \"st\";\n  CountryISO[\"SaudiArabia\"] = \"sa\";\n  CountryISO[\"Senegal\"] = \"sn\";\n  CountryISO[\"Serbia\"] = \"rs\";\n  CountryISO[\"Seychelles\"] = \"sc\";\n  CountryISO[\"SierraLeone\"] = \"sl\";\n  CountryISO[\"Singapore\"] = \"sg\";\n  CountryISO[\"SintMaarten\"] = \"sx\";\n  CountryISO[\"Slovakia\"] = \"sk\";\n  CountryISO[\"Slovenia\"] = \"si\";\n  CountryISO[\"SolomonIslands\"] = \"sb\";\n  CountryISO[\"Somalia\"] = \"so\";\n  CountryISO[\"SouthAfrica\"] = \"za\";\n  CountryISO[\"SouthKorea\"] = \"kr\";\n  CountryISO[\"SouthSudan\"] = \"ss\";\n  CountryISO[\"Spain\"] = \"es\";\n  CountryISO[\"SriLanka\"] = \"lk\";\n  CountryISO[\"Sudan\"] = \"sd\";\n  CountryISO[\"Suriname\"] = \"sr\";\n  CountryISO[\"SvalbardAndJanMayen\"] = \"sj\";\n  CountryISO[\"Swaziland\"] = \"sz\";\n  CountryISO[\"Sweden\"] = \"se\";\n  CountryISO[\"Switzerland\"] = \"ch\";\n  CountryISO[\"Syria\"] = \"sy\";\n  CountryISO[\"Taiwan\"] = \"tw\";\n  CountryISO[\"Tajikistan\"] = \"tj\";\n  CountryISO[\"Tanzania\"] = \"tz\";\n  CountryISO[\"Thailand\"] = \"th\";\n  CountryISO[\"TimorLeste\"] = \"tl\";\n  CountryISO[\"Togo\"] = \"tg\";\n  CountryISO[\"Tokelau\"] = \"tk\";\n  CountryISO[\"Tonga\"] = \"to\";\n  CountryISO[\"TrinidadAndTobago\"] = \"tt\";\n  CountryISO[\"Tunisia\"] = \"tn\";\n  CountryISO[\"Turkey\"] = \"tr\";\n  CountryISO[\"Turkmenistan\"] = \"tm\";\n  CountryISO[\"TurksAndCaicosIslands\"] = \"tc\";\n  CountryISO[\"Tuvalu\"] = \"tv\";\n  CountryISO[\"USVirginIslands\"] = \"vi\";\n  CountryISO[\"Uganda\"] = \"ug\";\n  CountryISO[\"Ukraine\"] = \"ua\";\n  CountryISO[\"UnitedArabEmirates\"] = \"ae\";\n  CountryISO[\"UnitedKingdom\"] = \"gb\";\n  CountryISO[\"UnitedStates\"] = \"us\";\n  CountryISO[\"Uruguay\"] = \"uy\";\n  CountryISO[\"Uzbekistan\"] = \"uz\";\n  CountryISO[\"Vanuatu\"] = \"vu\";\n  CountryISO[\"VaticanCity\"] = \"va\";\n  CountryISO[\"Venezuela\"] = \"ve\";\n  CountryISO[\"Vietnam\"] = \"vn\";\n  CountryISO[\"WallisAndFutuna\"] = \"wf\";\n  CountryISO[\"WesternSahara\"] = \"eh\";\n  CountryISO[\"Yemen\"] = \"ye\";\n  CountryISO[\"Zambia\"] = \"zm\";\n  CountryISO[\"Zimbabwe\"] = \"zw\";\n  CountryISO[\"\\u00C5landIslands\"] = \"ax\";\n})(CountryISO || (CountryISO = {}));\n\nclass CountryCode {\n  constructor() {\n    this.allCountries = [['Afghanistan (‫افغانستان‬‎)', CountryISO.Afghanistan, '93'], ['Albania (Shqipëri)', CountryISO.Albania, '355'], ['Algeria (‫الجزائر‬‎)', CountryISO.Algeria, '213'], ['American Samoa', 'as', '1', 1, ['684']], ['Andorra', CountryISO.Andorra, '376'], ['Angola', CountryISO.Angola, '244'], ['Anguilla', 'ai', '1', 1, ['264']], ['Antigua and Barbuda', 'ag', '1', 1, ['268']], ['Argentina', CountryISO.Argentina, '54'], ['Armenia (Հայաստան)', CountryISO.Armenia, '374'], ['Aruba', CountryISO.Aruba, '297'], ['Australia', CountryISO.Australia, '61', 0], ['Austria (Österreich)', CountryISO.Austria, '43'], ['Azerbaijan (Azərbaycan)', CountryISO.Azerbaijan, '994'], ['Bahamas', 'bs', '1', 1, ['242']], ['Bahrain (‫البحرين‬‎)', CountryISO.Bahrain, '973'], ['Bangladesh (বাংলাদেশ)', CountryISO.Bangladesh, '880'], ['Barbados', 'bb', '1', 1, ['246']], ['Belarus (Беларусь)', CountryISO.Belarus, '375'], ['Belgium (België)', CountryISO.Belgium, '32'], ['Belize', CountryISO.Belize, '501'], ['Benin (Bénin)', CountryISO.Benin, '229'], ['Bermuda', 'bm', '1', 1, ['441']], ['Bhutan (འབྲུག)', CountryISO.Bhutan, '975'], ['Bolivia', CountryISO.Bolivia, '591'], ['Bosnia and Herzegovina (Босна и Херцеговина)', CountryISO.BosniaAndHerzegovina, '387'], ['Botswana', CountryISO.Botswana, '267'], ['Brazil (Brasil)', CountryISO.Brazil, '55'], ['British Indian Ocean Territory', CountryISO.BritishIndianOceanTerritory, '246'], ['British Virgin Islands', 'vg', '1', 1, ['284']], ['Brunei', CountryISO.Brunei, '673'], ['Bulgaria (България)', CountryISO.Bulgaria, '359'], ['Burkina Faso', CountryISO.BurkinaFaso, '226'], ['Burundi (Uburundi)', CountryISO.Burundi, '257'], ['Cambodia (កម្ពុជា)', CountryISO.Cambodia, '855'], ['Cameroon (Cameroun)', CountryISO.Cameroon, '237'], ['Canada', CountryISO.Canada, '1', 1, ['204', '226', '236', '249', '250', '289', '306', '343', '365', '387', '403', '416', '418', '431', '437', '438', '450', '506', '514', '519', '548', '579', '581', '587', '604', '613', '639', '647', '672', '705', '709', '742', '778', '780', '782', '807', '819', '825', '867', '873', '902', '905']], ['Cape Verde (Kabu Verdi)', CountryISO.CapeVerde, '238'], ['Caribbean Netherlands', CountryISO.CaribbeanNetherlands, '599', 1], ['Cayman Islands', 'ky', '1', 1, ['345']], ['Central African Republic (République centrafricaine)', CountryISO.CentralAfricanRepublic, '236'], ['Chad (Tchad)', CountryISO.Chad, '235'], ['Chile', CountryISO.Chile, '56'], ['China (中国)', CountryISO.China, '86'], ['Christmas Island', CountryISO.ChristmasIsland, '61', 2], ['Cocos (Keeling) Islands', CountryISO.Cocos, '61', 1], ['Colombia', CountryISO.Colombia, '57'], ['Comoros (‫جزر القمر‬‎)', CountryISO.Comoros, '269'], ['Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)', CountryISO.CongoDRCJamhuriYaKidemokrasiaYaKongo, '243'], ['Congo (Republic) (Congo-Brazzaville)', CountryISO.CongoRepublicCongoBrazzaville, '242'], ['Cook Islands', CountryISO.CookIslands, '682'], ['Costa Rica', CountryISO.CostaRica, '506'], ['Côte d’Ivoire', CountryISO.CôteDIvoire, '225'], ['Croatia (Hrvatska)', CountryISO.Croatia, '385'], ['Cuba', CountryISO.Cuba, '53'], ['Curaçao', CountryISO.Curaçao, '599', 0], ['Cyprus (Κύπρος)', CountryISO.Cyprus, '357'], ['Czech Republic (Česká republika)', CountryISO.CzechRepublic, '420'], ['Denmark (Danmark)', CountryISO.Denmark, '45'], ['Djibouti', CountryISO.Djibouti, '253'], ['Dominica', CountryISO.Dominica, '1767'], ['Dominican Republic (República Dominicana)', CountryISO.DominicanRepublic, '1', 2, ['809', '829', '849']], ['Ecuador', CountryISO.Ecuador, '593'], ['Egypt (‫مصر‬‎)', CountryISO.Egypt, '20'], ['El Salvador', CountryISO.ElSalvador, '503'], ['Equatorial Guinea (Guinea Ecuatorial)', CountryISO.EquatorialGuinea, '240'], ['Eritrea', CountryISO.Eritrea, '291'], ['Estonia (Eesti)', CountryISO.Estonia, '372'], ['Ethiopia', CountryISO.Ethiopia, '251'], ['Falkland Islands (Islas Malvinas)', CountryISO.FalklandIslands, '500'], ['Faroe Islands (Føroyar)', CountryISO.FaroeIslands, '298'], ['Fiji', CountryISO.Fiji, '679'], ['Finland (Suomi)', CountryISO.Finland, '358', 0], ['France', CountryISO.France, '33'], ['French Guiana (Guyane française)', CountryISO.FrenchGuiana, '594'], ['French Polynesia (Polynésie française)', CountryISO.FrenchPolynesia, '689'], ['Gabon', CountryISO.Gabon, '241'], ['Gambia', CountryISO.Gambia, '220'], ['Georgia (საქართველო)', CountryISO.Georgia, '995'], ['Germany (Deutschland)', CountryISO.Germany, '49'], ['Ghana (Gaana)', CountryISO.Ghana, '233'], ['Gibraltar', CountryISO.Gibraltar, '350'], ['Greece (Ελλάδα)', CountryISO.Greece, '30'], ['Greenland (Kalaallit Nunaat)', CountryISO.Greenland, '299'], ['Grenada', CountryISO.Grenada, '1473'], ['Guadeloupe', CountryISO.Guadeloupe, '590', 0], ['Guam', 'gu', '1', 1, ['671']], ['Guatemala', CountryISO.Guatemala, '502'], ['Guernsey', CountryISO.Guernsey, '44', 1, [1481]], ['Guinea (Guinée)', CountryISO.Guinea, '224'], ['Guinea-Bissau (Guiné Bissau)', CountryISO.GuineaBissau, '245'], ['Guyana', CountryISO.Guyana, '592'], ['Haiti', CountryISO.Haiti, '509'], ['Honduras', CountryISO.Honduras, '504'], ['Hong Kong (香港)', CountryISO.HongKong, '852'], ['Hungary (Magyarország)', CountryISO.Hungary, '36'], ['Iceland (Ísland)', CountryISO.Iceland, '354'], ['India (भारत)', CountryISO.India, '91'], ['Indonesia', CountryISO.Indonesia, '62'], ['Iran (‫ایران‬‎)', CountryISO.Iran, '98'], ['Iraq (‫العراق‬‎)', CountryISO.Iraq, '964'], ['Ireland', CountryISO.Ireland, '353'], ['Isle of Man', CountryISO.IsleOfMan, '44', 2, [1624]], ['Israel (‫ישראל‬‎)', CountryISO.Israel, '972'], ['Italy (Italia)', CountryISO.Italy, '39', 0], ['Jamaica', 'jm', '1', 1, ['876']], ['Japan (日本)', CountryISO.Japan, '81'], ['Jersey', CountryISO.Jersey, '44', 3, [1534]], ['Jordan (‫الأردن‬‎)', CountryISO.Jordan, '962'], ['Kazakhstan (Казахстан)', CountryISO.Kazakhstan, '7', 1], ['Kenya', CountryISO.Kenya, '254'], ['Kiribati', CountryISO.Kiribati, '686'], ['Kosovo', CountryISO.Kosovo, '383'], ['Kuwait (‫الكويت‬‎)', CountryISO.Kuwait, '965'], ['Kyrgyzstan (Кыргызстан)', CountryISO.Kyrgyzstan, '996'], ['Laos (ລາວ)', CountryISO.Laos, '856'], ['Latvia (Latvija)', CountryISO.Latvia, '371'], ['Lebanon (‫لبنان‬‎)', CountryISO.Lebanon, '961'], ['Lesotho', CountryISO.Lesotho, '266'], ['Liberia', CountryISO.Liberia, '231'], ['Libya (‫ليبيا‬‎)', CountryISO.Libya, '218'], ['Liechtenstein', CountryISO.Liechtenstein, '423'], ['Lithuania (Lietuva)', CountryISO.Lithuania, '370'], ['Luxembourg', CountryISO.Luxembourg, '352'], ['Macau (澳門)', CountryISO.Macau, '853'], ['Macedonia (FYROM) (Македонија)', CountryISO.Macedonia, '389'], ['Madagascar (Madagasikara)', CountryISO.Madagascar, '261'], ['Malawi', CountryISO.Malawi, '265'], ['Malaysia', CountryISO.Malaysia, '60'], ['Maldives', CountryISO.Maldives, '960'], ['Mali', CountryISO.Mali, '223'], ['Malta', CountryISO.Malta, '356'], ['Marshall Islands', CountryISO.MarshallIslands, '692'], ['Martinique', CountryISO.Martinique, '596'], ['Mauritania (‫موريتانيا‬‎)', CountryISO.Mauritania, '222'], ['Mauritius (Moris)', CountryISO.Mauritius, '230'], ['Mayotte', CountryISO.Mayotte, '262', 1], ['Mexico (México)', CountryISO.Mexico, '52'], ['Micronesia', CountryISO.Micronesia, '691'], ['Moldova (Republica Moldova)', CountryISO.Moldova, '373'], ['Monaco', CountryISO.Monaco, '377'], ['Mongolia (Монгол)', CountryISO.Mongolia, '976'], ['Montenegro (Crna Gora)', CountryISO.Montenegro, '382'], ['Montserrat', 'ms', '1', 1, ['664']], ['Morocco (‫المغرب‬‎)', CountryISO.Morocco, '212', 0], ['Mozambique (Moçambique)', CountryISO.Mozambique, '258'], ['Myanmar (Burma) (မြန်မာ)', CountryISO.Myanmar, '95'], ['Namibia (Namibië)', CountryISO.Namibia, '264'], ['Nauru', CountryISO.Nauru, '674'], ['Nepal (नेपाल)', CountryISO.Nepal, '977'], ['Netherlands (Nederland)', CountryISO.Netherlands, '31'], ['New Caledonia (Nouvelle-Calédonie)', CountryISO.NewCaledonia, '687'], ['New Zealand', CountryISO.NewZealand, '64'], ['Nicaragua', CountryISO.Nicaragua, '505'], ['Niger (Nijar)', CountryISO.Niger, '227'], ['Nigeria', CountryISO.Nigeria, '234'], ['Niue', CountryISO.Niue, '683'], ['Norfolk Island', CountryISO.NorfolkIsland, '672'], ['North Korea (조선 민주주의 인민 공화국)', CountryISO.NorthKorea, '850'], ['Northern Mariana Islands', CountryISO.NorthernMarianaIslands, '1670'], ['Norway (Norge)', CountryISO.Norway, '47', 0], ['Oman (‫عُمان‬‎)', CountryISO.Oman, '968'], ['Pakistan (‫پاکستان‬‎)', CountryISO.Pakistan, '92'], ['Palau', CountryISO.Palau, '680'], ['Palestine (‫فلسطين‬‎)', CountryISO.Palestine, '970'], ['Panama (Panamá)', CountryISO.Panama, '507'], ['Papua New Guinea', CountryISO.PapuaNewGuinea, '675'], ['Paraguay', CountryISO.Paraguay, '595'], ['Peru (Perú)', CountryISO.Peru, '51'], ['Philippines', CountryISO.Philippines, '63'], ['Poland (Polska)', CountryISO.Poland, '48'], ['Portugal', CountryISO.Portugal, '351'], ['Puerto Rico', CountryISO.PuertoRico, '1', 3, ['787', '939']], ['Qatar (‫قطر‬‎)', CountryISO.Qatar, '974'], ['Réunion (La Réunion)', CountryISO.Réunion, '262', 0], ['Romania (România)', CountryISO.Romania, '40'], ['Russia (Россия)', CountryISO.Russia, '7', 0], ['Rwanda', CountryISO.Rwanda, '250'], ['Saint Barthélemy (Saint-Barthélemy)', CountryISO.SaintBarthélemy, '590', 1], ['Saint Helena', CountryISO.SaintHelena, '290'], ['Saint Kitts and Nevis', CountryISO.SaintKittsAndNevis, '1869'], ['Saint Lucia', 'lc', '1', 1, ['758']], ['Saint Martin (Saint-Martin (partie française))', CountryISO.SaintMartin, '590', 2], ['Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)', CountryISO.SaintPierreAndMiquelon, '508'], ['Saint Vincent and the Grenadines', 'vc', '1', 1, ['784']], ['Samoa', CountryISO.Samoa, '685'], ['San Marino', CountryISO.SanMarino, '378'], ['São Tomé and Príncipe (São Tomé e Príncipe)', CountryISO.SãoToméAndPríncipe, '239'], ['Saudi Arabia (‫المملكة العربية السعودية‬‎)', CountryISO.SaudiArabia, '966'], ['Senegal (Sénégal)', CountryISO.Senegal, '221'], ['Serbia (Србија)', CountryISO.Serbia, '381'], ['Seychelles', CountryISO.Seychelles, '248'], ['Sierra Leone', CountryISO.SierraLeone, '232'], ['Singapore', CountryISO.Singapore, '65'], ['Sint Maarten', 'sx', '1', 1, ['721']], ['Slovakia (Slovensko)', CountryISO.Slovakia, '421'], ['Slovenia (Slovenija)', CountryISO.Slovenia, '386'], ['Solomon Islands', CountryISO.SolomonIslands, '677'], ['Somalia (Soomaaliya)', CountryISO.Somalia, '252'], ['South Africa', CountryISO.SouthAfrica, '27'], ['South Korea (대한민국)', CountryISO.SouthKorea, '82'], ['South Sudan (‫جنوب السودان‬‎)', CountryISO.SouthSudan, '211'], ['Spain (España)', CountryISO.Spain, '34'], ['Sri Lanka (ශ්‍රී ලංකාව)', CountryISO.SriLanka, '94'], ['Sudan (‫السودان‬‎)', CountryISO.Sudan, '249'], ['Suriname', CountryISO.Suriname, '597'], ['Svalbard and Jan Mayen', CountryISO.SvalbardAndJanMayen, '47', 1], ['Swaziland', CountryISO.Swaziland, '268'], ['Sweden (Sverige)', CountryISO.Sweden, '46'], ['Switzerland (Schweiz)', CountryISO.Switzerland, '41'], ['Syria (‫سوريا‬‎)', CountryISO.Syria, '963'], ['Taiwan (台灣)', CountryISO.Taiwan, '886'], ['Tajikistan', CountryISO.Tajikistan, '992'], ['Tanzania', CountryISO.Tanzania, '255'], ['Thailand (ไทย)', CountryISO.Thailand, '66'], ['Timor-Leste', CountryISO.TimorLeste, '670'], ['Togo', CountryISO.Togo, '228'], ['Tokelau', CountryISO.Tokelau, '690'], ['Tonga', CountryISO.Tonga, '676'], ['Trinidad and Tobago', 'tt', '1', 1, ['868']], ['Tunisia (‫تونس‬‎)', CountryISO.Tunisia, '216'], ['Turkey (Türkiye)', CountryISO.Turkey, '90'], ['Turkmenistan', CountryISO.Turkmenistan, '993'], ['Turks and Caicos Islands', CountryISO.TurksAndCaicosIslands, '1649'], ['Tuvalu', CountryISO.Tuvalu, '688'], ['U.S. Virgin Islands', 'vi', '1', 1, ['340']], ['Uganda', CountryISO.Uganda, '256'], ['Ukraine (Україна)', CountryISO.Ukraine, '380'], ['United Arab Emirates (‫الإمارات العربية المتحدة‬‎)', CountryISO.UnitedArabEmirates, '971'], ['United Kingdom', CountryISO.UnitedKingdom, '44', 0], ['United States', CountryISO.UnitedStates, '1', 0], ['Uruguay', CountryISO.Uruguay, '598'], ['Uzbekistan (Oʻzbekiston)', CountryISO.Uzbekistan, '998'], ['Vanuatu', CountryISO.Vanuatu, '678'], ['Vatican City (Città del Vaticano)', CountryISO.VaticanCity, '39', 1], ['Venezuela', CountryISO.Venezuela, '58'], ['Vietnam (Việt Nam)', CountryISO.Vietnam, '84'], ['Wallis and Futuna', CountryISO.WallisAndFutuna, '681'], ['Western Sahara (‫الصحراء الغربية‬‎)', CountryISO.WesternSahara, '212', 1], ['Yemen (‫اليمن‬‎)', CountryISO.Yemen, '967'], ['Zambia', CountryISO.Zambia, '260'], ['Zimbabwe', CountryISO.Zimbabwe, '263'], ['Åland Islands', CountryISO.ÅlandIslands, '358', 1]];\n  }\n\n}\n\nCountryCode.ɵfac = function CountryCode_Factory(t) {\n  return new (t || CountryCode)();\n};\n\nCountryCode.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CountryCode,\n  factory: CountryCode.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CountryCode, [{\n    type: Injectable\n  }], null, null);\n})();\n\nvar SearchCountryField;\n\n(function (SearchCountryField) {\n  SearchCountryField[\"DialCode\"] = \"dialCode\";\n  SearchCountryField[\"Iso2\"] = \"iso2\";\n  SearchCountryField[\"Name\"] = \"name\";\n  SearchCountryField[\"All\"] = \"all\";\n})(SearchCountryField || (SearchCountryField = {}));\n/*\nWe use \"control: any\" instead of \"control: FormControl\" to silence:\n\"Property 'nativeElement' does not exist on type 'FormControl'\".\nThis happens because I've expanded control with nativeElement via\n'NativeElementInjectorDirective' to get an access to the element.\nMore about this approach and reasons for this:\nhttps://github.com/angular/angular/issues/18025\nhttps://stackoverflow.com/a/54075119/1617590\n*/\n\n\nconst phoneNumberValidator = control => {\n  if (!control.value) {\n    return;\n  } // Find <input> inside injected nativeElement and get its \"id\".\n\n\n  const el = control.nativeElement;\n  const inputBox = el ? el.querySelector('input[type=\"tel\"]') : undefined;\n\n  if (inputBox) {\n    const id = inputBox.id;\n    const isCheckValidation = inputBox.getAttribute('validation');\n\n    if (isCheckValidation === 'true') {\n      const isRequired = control.errors && control.errors.required === true;\n      const error = {\n        validatePhoneNumber: {\n          valid: false\n        }\n      };\n      inputBox.setCustomValidity('Invalid field.');\n      let number;\n\n      try {\n        number = lpn.PhoneNumberUtil.getInstance().parse(control.value.number, control.value.countryCode);\n      } catch (e) {\n        if (isRequired) {\n          return error;\n        } else {\n          inputBox.setCustomValidity('');\n        }\n      }\n\n      if (control.value) {\n        // @ts-ignore\n        if (!number) {\n          return error;\n        } else {\n          if (!lpn.PhoneNumberUtil.getInstance().isValidNumberForRegion(number, control.value.countryCode)) {\n            return error;\n          } else {\n            inputBox.setCustomValidity('');\n          }\n        }\n      }\n    } else if (isCheckValidation === 'false') {\n      inputBox.setCustomValidity('');\n      control.clearValidators();\n    }\n  }\n\n  return;\n};\n\nvar PhoneNumberFormat;\n\n(function (PhoneNumberFormat) {\n  PhoneNumberFormat[\"International\"] = \"INTERNATIONAL\";\n  PhoneNumberFormat[\"National\"] = \"NATIONAL\";\n})(PhoneNumberFormat || (PhoneNumberFormat = {}));\n/*\n\"Property 'nativeElement' does not exist on type 'FormControl'\".\n'NativeElementInjectorDirective' injects nativeElement to each control,\nso we can access it from inside validator for example.\nMore about this approach and reasons for this:\nhttps://github.com/angular/angular/issues/18025\nhttps://stackoverflow.com/a/54075119/1617590\n*/\n\n\nclass NativeElementInjectorDirective {\n  constructor(controlDir, host) {\n    this.controlDir = controlDir;\n    this.host = host;\n  }\n\n  ngOnInit() {\n    if (this.controlDir.control) {\n      // @ts-ignore\n      this.controlDir.control['nativeElement'] = this.host.nativeElement;\n    }\n  }\n\n}\n\nNativeElementInjectorDirective.ɵfac = function NativeElementInjectorDirective_Factory(t) {\n  return new (t || NativeElementInjectorDirective)(i0.ɵɵdirectiveInject(i4.NgControl), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nNativeElementInjectorDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: NativeElementInjectorDirective,\n  selectors: [[\"\", \"ngModel\", \"\"], [\"\", \"formControl\", \"\"], [\"\", \"formControlName\", \"\"]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NativeElementInjectorDirective, [{\n    type: Directive,\n    args: [{\n      // tslint:disable-next-line: directive-selector\n      selector: '[ngModel], [formControl], [formControlName]'\n    }]\n  }], function () {\n    return [{\n      type: i4.NgControl\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n\nclass NgxIntlTelInputComponent {\n  constructor(countryCodeData) {\n    this.countryCodeData = countryCodeData;\n    this.value = '';\n    this.preferredCountries = [];\n    this.enablePlaceholder = true;\n    this.numberFormat = PhoneNumberFormat.International;\n    this.cssClass = 'form-control';\n    this.onlyCountries = [];\n    this.enableAutoCountrySelect = true;\n    this.searchCountryFlag = false;\n    this.searchCountryField = [SearchCountryField.All];\n    this.searchCountryPlaceholder = 'Search Country';\n    this.selectFirstCountry = true;\n    this.phoneValidation = true;\n    this.inputId = 'phone';\n    this.separateDialCode = false;\n    this.countryChange = new EventEmitter();\n    this.selectedCountry = {\n      areaCodes: undefined,\n      dialCode: '',\n      htmlId: '',\n      flagClass: '',\n      iso2: '',\n      name: '',\n      placeHolder: '',\n      priority: 0\n    };\n    this.phoneNumber = '';\n    this.allCountries = [];\n    this.preferredCountriesInDropDown = []; // Has to be 'any' to prevent a need to install @types/google-libphonenumber by the package user...\n\n    this.phoneUtil = lpn.PhoneNumberUtil.getInstance();\n    this.disabled = false;\n    this.errors = ['Phone number is required.'];\n    this.countrySearchText = '';\n\n    this.onTouched = () => {};\n\n    this.propagateChange = _ => {}; // If this is not set, ngx-bootstrap will try to use the bs3 CSS (which is not what we've embedded) and will\n    // Add the wrong classes and such\n\n\n    setTheme('bs4');\n  }\n\n  ngOnInit() {\n    this.init();\n  }\n\n  ngOnChanges(changes) {\n    const selectedISO = changes['selectedCountryISO'];\n\n    if (this.allCountries && selectedISO && selectedISO.currentValue !== selectedISO.previousValue) {\n      this.updateSelectedCountry();\n    }\n\n    if (changes['preferredCountries']) {\n      this.updatePreferredCountries();\n    }\n\n    this.checkSeparateDialCodeStyle();\n  }\n  /*\n      This is a wrapper method to avoid calling this.ngOnInit() in writeValue().\n      Ref: http://codelyzer.com/rules/no-life-cycle-call/\n  */\n\n\n  init() {\n    this.fetchCountryData();\n\n    if (this.preferredCountries.length) {\n      this.updatePreferredCountries();\n    }\n\n    if (this.onlyCountries.length) {\n      this.allCountries = this.allCountries.filter(c => this.onlyCountries.includes(c.iso2));\n    }\n\n    if (this.selectFirstCountry) {\n      if (this.preferredCountriesInDropDown.length) {\n        this.setSelectedCountry(this.preferredCountriesInDropDown[0]);\n      } else {\n        this.setSelectedCountry(this.allCountries[0]);\n      }\n    }\n\n    this.updateSelectedCountry();\n    this.checkSeparateDialCodeStyle();\n  }\n\n  setSelectedCountry(country) {\n    this.selectedCountry = country;\n    this.countryChange.emit(country);\n  }\n  /**\n   * Search country based on country name, iso2, dialCode or all of them.\n   */\n\n\n  searchCountry() {\n    if (!this.countrySearchText) {\n      this.countryList.nativeElement.querySelector('.iti__country-list li').scrollIntoView({\n        behavior: 'smooth',\n        block: 'nearest',\n        inline: 'nearest'\n      });\n      return;\n    }\n\n    const countrySearchTextLower = this.countrySearchText.toLowerCase(); // @ts-ignore\n\n    const country = this.allCountries.filter(c => {\n      if (this.searchCountryField.indexOf(SearchCountryField.All) > -1) {\n        // Search in all fields\n        if (c.iso2.toLowerCase().startsWith(countrySearchTextLower)) {\n          return c;\n        }\n\n        if (c.name.toLowerCase().startsWith(countrySearchTextLower)) {\n          return c;\n        }\n\n        if (c.dialCode.startsWith(this.countrySearchText)) {\n          return c;\n        }\n      } else {\n        // Or search by specific SearchCountryField(s)\n        if (this.searchCountryField.indexOf(SearchCountryField.Iso2) > -1) {\n          if (c.iso2.toLowerCase().startsWith(countrySearchTextLower)) {\n            return c;\n          }\n        }\n\n        if (this.searchCountryField.indexOf(SearchCountryField.Name) > -1) {\n          if (c.name.toLowerCase().startsWith(countrySearchTextLower)) {\n            return c;\n          }\n        }\n\n        if (this.searchCountryField.indexOf(SearchCountryField.DialCode) > -1) {\n          if (c.dialCode.startsWith(this.countrySearchText)) {\n            return c;\n          }\n        }\n      }\n    });\n\n    if (country.length > 0) {\n      const el = this.countryList.nativeElement.querySelector('#' + country[0].htmlId);\n\n      if (el) {\n        el.scrollIntoView({\n          behavior: 'smooth',\n          block: 'nearest',\n          inline: 'nearest'\n        });\n      }\n    }\n\n    this.checkSeparateDialCodeStyle();\n  }\n\n  onPhoneNumberChange() {\n    let countryCode; // Handle the case where the user sets the value programatically based on a persisted ChangeData obj.\n\n    if (this.phoneNumber && typeof this.phoneNumber === 'object') {\n      const numberObj = this.phoneNumber;\n      this.phoneNumber = numberObj.number;\n      countryCode = numberObj.countryCode;\n    }\n\n    this.value = this.phoneNumber;\n    countryCode = countryCode || this.selectedCountry.iso2; // @ts-ignore\n\n    const number = this.getParsedNumber(this.phoneNumber, countryCode); // auto select country based on the extension (and areaCode if needed) (e.g select Canada if number starts with +1 416)\n\n    if (this.enableAutoCountrySelect) {\n      countryCode = number && number.getCountryCode() // @ts-ignore\n      ? this.getCountryIsoCode(number.getCountryCode(), number) : this.selectedCountry.iso2;\n\n      if (countryCode && countryCode !== this.selectedCountry.iso2) {\n        const newCountry = this.allCountries.sort((a, b) => {\n          return a.priority - b.priority;\n        }).find(c => c.iso2 === countryCode);\n\n        if (newCountry) {\n          this.selectedCountry = newCountry;\n        }\n      }\n    }\n\n    countryCode = countryCode ? countryCode : this.selectedCountry.iso2;\n    this.checkSeparateDialCodeStyle();\n\n    if (!this.value) {\n      // Reason: avoid https://stackoverflow.com/a/54358133/1617590\n      // tslint:disable-next-line: no-null-keyword\n      // @ts-ignore\n      this.propagateChange(null);\n    } else {\n      const intlNo = number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.INTERNATIONAL) : ''; // parse phoneNumber if separate dial code is needed\n\n      if (this.separateDialCode && intlNo) {\n        this.value = this.removeDialCode(intlNo);\n      }\n\n      this.propagateChange({\n        number: this.value,\n        internationalNumber: intlNo,\n        nationalNumber: number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.NATIONAL) : '',\n        e164Number: number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.E164) : '',\n        countryCode: countryCode.toUpperCase(),\n        dialCode: '+' + this.selectedCountry.dialCode\n      });\n    }\n  }\n\n  onCountrySelect(country, el) {\n    this.setSelectedCountry(country);\n    this.checkSeparateDialCodeStyle();\n\n    if (this.phoneNumber && this.phoneNumber.length > 0) {\n      this.value = this.phoneNumber;\n      const number = this.getParsedNumber(this.phoneNumber, this.selectedCountry.iso2);\n      const intlNo = number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.INTERNATIONAL) : ''; // parse phoneNumber if separate dial code is needed\n\n      if (this.separateDialCode && intlNo) {\n        this.value = this.removeDialCode(intlNo);\n      }\n\n      this.propagateChange({\n        number: this.value,\n        internationalNumber: intlNo,\n        nationalNumber: number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.NATIONAL) : '',\n        e164Number: number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.E164) : '',\n        countryCode: this.selectedCountry.iso2.toUpperCase(),\n        dialCode: '+' + this.selectedCountry.dialCode\n      });\n    } else {\n      // Reason: avoid https://stackoverflow.com/a/54358133/1617590\n      // tslint:disable-next-line: no-null-keyword\n      // @ts-ignore\n      this.propagateChange(null);\n    }\n\n    el.focus();\n  }\n\n  onInputKeyPress(event) {\n    const allowedChars = /[0-9\\+\\-\\(\\)\\ ]/;\n    const allowedCtrlChars = /[axcv]/; // Allows copy-pasting\n\n    const allowedOtherKeys = ['ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown', 'Home', 'End', 'Insert', 'Delete', 'Backspace'];\n\n    if (!allowedChars.test(event.key) && !(event.ctrlKey && allowedCtrlChars.test(event.key)) && !allowedOtherKeys.includes(event.key)) {\n      event.preventDefault();\n    }\n  }\n\n  registerOnChange(fn) {\n    this.propagateChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n\n  writeValue(obj) {\n    if (obj === undefined) {\n      this.init();\n    }\n\n    this.phoneNumber = obj;\n    setTimeout(() => {\n      this.onPhoneNumberChange();\n    }, 1);\n  }\n\n  resolvePlaceholder() {\n    let placeholder = '';\n\n    if (this.customPlaceholder) {\n      placeholder = this.customPlaceholder;\n    } else if (this.selectedCountry.placeHolder) {\n      placeholder = this.selectedCountry.placeHolder;\n\n      if (this.separateDialCode) {\n        placeholder = this.removeDialCode(placeholder);\n      }\n    }\n\n    return placeholder;\n  }\n  /* --------------------------------- Helpers -------------------------------- */\n\n  /**\n   * Returns parse PhoneNumber object.\n   * @param phoneNumber string\n   * @param countryCode string\n   */\n\n\n  getParsedNumber(phoneNumber, countryCode) {\n    let number;\n\n    try {\n      number = this.phoneUtil.parse(phoneNumber, countryCode.toUpperCase());\n    } catch (e) {} // @ts-ignore\n\n\n    return number;\n  }\n  /**\n   * Adjusts input alignment based on the dial code presentation style.\n   */\n\n\n  checkSeparateDialCodeStyle() {\n    if (this.separateDialCode && this.selectedCountry) {\n      const cntryCd = this.selectedCountry.dialCode;\n      this.separateDialCodeClass = 'separate-dial-code iti-sdc-' + (cntryCd.length + 1);\n    } else {\n      this.separateDialCodeClass = '';\n    }\n  }\n  /**\n   * Cleans dialcode from phone number string.\n   * @param phoneNumber string\n   */\n\n\n  removeDialCode(phoneNumber) {\n    const number = this.getParsedNumber(phoneNumber, this.selectedCountry.iso2);\n    phoneNumber = this.phoneUtil.format(number, lpn.PhoneNumberFormat[this.numberFormat]);\n\n    if (phoneNumber.startsWith('+') && this.separateDialCode) {\n      phoneNumber = phoneNumber.substr(phoneNumber.indexOf(' ') + 1);\n    }\n\n    return phoneNumber;\n  }\n  /**\n   * Sifts through all countries and returns iso code of the primary country\n   * based on the number provided.\n   * @param countryCode country code in number format\n   * @param number PhoneNumber object\n   */\n\n\n  getCountryIsoCode(countryCode, number) {\n    // Will use this to match area code from the first numbers\n    // @ts-ignore\n    const rawNumber = number['values_']['2'].toString(); // List of all countries with countryCode (can be more than one. e.x. US, CA, DO, PR all have +1 countryCode)\n\n    const countries = this.allCountries.filter(c => c.dialCode === countryCode.toString()); // Main country is the country, which has no areaCodes specified in country-code.ts file.\n\n    const mainCountry = countries.find(c => c.areaCodes === undefined); // Secondary countries are all countries, which have areaCodes specified in country-code.ts file.\n\n    const secondaryCountries = countries.filter(c => c.areaCodes !== undefined);\n    let matchedCountry = mainCountry ? mainCountry.iso2 : undefined;\n    /*\n        Iterate over each secondary country and check if nationalNumber starts with any of areaCodes available.\n        If no matches found, fallback to the main country.\n    */\n\n    secondaryCountries.forEach(country => {\n      // @ts-ignore\n      country.areaCodes.forEach(areaCode => {\n        if (rawNumber.startsWith(areaCode)) {\n          matchedCountry = country.iso2;\n        }\n      });\n    });\n    return matchedCountry;\n  }\n  /**\n   * Gets formatted example phone number from phoneUtil.\n   * @param countryCode string\n   */\n\n\n  getPhoneNumberPlaceHolder(countryCode) {\n    try {\n      return this.phoneUtil.format(this.phoneUtil.getExampleNumber(countryCode), lpn.PhoneNumberFormat[this.numberFormat]);\n    } catch (e) {\n      // @ts-ignore\n      return e;\n    }\n  }\n  /**\n   * Clearing the list to avoid duplicates (https://github.com/webcat12345/ngx-intl-tel-input/issues/248)\n   */\n\n\n  fetchCountryData() {\n    this.allCountries = [];\n    this.countryCodeData.allCountries.forEach(c => {\n      const country = {\n        name: c[0].toString(),\n        iso2: c[1].toString(),\n        dialCode: c[2].toString(),\n        priority: +c[3] || 0,\n        areaCodes: c[4] || undefined,\n        htmlId: `iti-0__item-${c[1].toString()}`,\n        flagClass: `iti__${c[1].toString().toLocaleLowerCase()}`,\n        placeHolder: ''\n      };\n\n      if (this.enablePlaceholder) {\n        country.placeHolder = this.getPhoneNumberPlaceHolder(country.iso2.toUpperCase());\n      }\n\n      this.allCountries.push(country);\n    });\n  }\n  /**\n   * Populates preferredCountriesInDropDown with prefferred countries.\n   */\n\n\n  updatePreferredCountries() {\n    if (this.preferredCountries.length) {\n      this.preferredCountriesInDropDown = [];\n      this.preferredCountries.forEach(iso2 => {\n        const preferredCountry = this.allCountries.filter(c => {\n          return c.iso2 === iso2;\n        });\n        this.preferredCountriesInDropDown.push(preferredCountry[0]);\n      });\n    }\n  }\n  /**\n   * Updates selectedCountry.\n   */\n\n\n  updateSelectedCountry() {\n    if (this.selectedCountryISO) {\n      // @ts-ignore\n      this.selectedCountry = this.allCountries.find(c => {\n        return c.iso2.toLowerCase() === this.selectedCountryISO.toLowerCase();\n      });\n\n      if (this.selectedCountry) {\n        if (this.phoneNumber) {\n          this.onPhoneNumberChange();\n        } else {\n          // Reason: avoid https://stackoverflow.com/a/54358133/1617590\n          // tslint:disable-next-line: no-null-keyword\n          // @ts-ignore\n          this.propagateChange(null);\n        }\n      }\n    }\n  }\n\n}\n\nNgxIntlTelInputComponent.ɵfac = function NgxIntlTelInputComponent_Factory(t) {\n  return new (t || NgxIntlTelInputComponent)(i0.ɵɵdirectiveInject(CountryCode));\n};\n\nNgxIntlTelInputComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxIntlTelInputComponent,\n  selectors: [[\"ngx-intl-tel-input\"]],\n  viewQuery: function NgxIntlTelInputComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.countryList = _t.first);\n    }\n  },\n  inputs: {\n    value: \"value\",\n    preferredCountries: \"preferredCountries\",\n    enablePlaceholder: \"enablePlaceholder\",\n    customPlaceholder: \"customPlaceholder\",\n    numberFormat: \"numberFormat\",\n    cssClass: \"cssClass\",\n    onlyCountries: \"onlyCountries\",\n    enableAutoCountrySelect: \"enableAutoCountrySelect\",\n    searchCountryFlag: \"searchCountryFlag\",\n    searchCountryField: \"searchCountryField\",\n    searchCountryPlaceholder: \"searchCountryPlaceholder\",\n    maxLength: \"maxLength\",\n    selectFirstCountry: \"selectFirstCountry\",\n    selectedCountryISO: \"selectedCountryISO\",\n    phoneValidation: \"phoneValidation\",\n    inputId: \"inputId\",\n    separateDialCode: \"separateDialCode\"\n  },\n  outputs: {\n    countryChange: \"countryChange\"\n  },\n  features: [i0.ɵɵProvidersFeature([CountryCode, {\n    provide: NG_VALUE_ACCESSOR,\n    // tslint:disable-next-line:no-forward-ref\n    useExisting: forwardRef(() => NgxIntlTelInputComponent),\n    multi: true\n  }, {\n    provide: NG_VALIDATORS,\n    useValue: phoneNumberValidator,\n    multi: true\n  }]), i0.ɵɵNgOnChangesFeature],\n  decls: 9,\n  vars: 14,\n  consts: [[1, \"iti\", \"iti--allow-dropdown\", 3, \"ngClass\"], [\"dropdown\", \"\", 1, \"iti__flag-container\", 3, \"ngClass\", \"isDisabled\"], [\"dropdownToggle\", \"\", 1, \"iti__selected-flag\", \"dropdown-toggle\"], [1, \"iti__flag\", 3, \"ngClass\"], [\"class\", \"selected-dial-code\", 4, \"ngIf\"], [1, \"iti__arrow\"], [\"class\", \"dropdown-menu country-dropdown\", 4, \"dropdownMenu\"], [\"type\", \"tel\", \"autocomplete\", \"off\", 3, \"id\", \"ngClass\", \"ngModel\", \"disabled\", \"placeholder\", \"blur\", \"keypress\", \"ngModelChange\"], [\"focusable\", \"\"], [1, \"selected-dial-code\"], [1, \"dropdown-menu\", \"country-dropdown\"], [\"class\", \"search-container\", 4, \"ngIf\"], [1, \"iti__country-list\"], [\"countryList\", \"\"], [\"class\", \"iti__country iti__preferred\", 3, \"id\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"iti__divider\", 4, \"ngIf\"], [\"class\", \"iti__country iti__standard\", 3, \"id\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"search-container\"], [\"id\", \"country-search-box\", \"autofocus\", \"\", 3, \"ngModel\", \"placeholder\", \"ngModelChange\", \"keyup\", \"click\"], [1, \"iti__country\", \"iti__preferred\", 3, \"id\", \"click\"], [1, \"iti__flag-box\"], [1, \"iti__country-name\"], [1, \"iti__dial-code\"], [1, \"iti__divider\"], [1, \"iti__country\", \"iti__standard\", 3, \"id\", \"click\"]],\n  template: function NgxIntlTelInputComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵelement(3, \"div\", 3);\n      i0.ɵɵtemplate(4, NgxIntlTelInputComponent_div_4_Template, 2, 1, \"div\", 4);\n      i0.ɵɵelement(5, \"div\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, NgxIntlTelInputComponent_div_6_Template, 7, 4, \"div\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"input\", 7, 8);\n      i0.ɵɵlistener(\"blur\", function NgxIntlTelInputComponent_Template_input_blur_7_listener() {\n        return ctx.onTouched();\n      })(\"keypress\", function NgxIntlTelInputComponent_Template_input_keypress_7_listener($event) {\n        return ctx.onInputKeyPress($event);\n      })(\"ngModelChange\", function NgxIntlTelInputComponent_Template_input_ngModelChange_7_listener($event) {\n        return ctx.phoneNumber = $event;\n      })(\"ngModelChange\", function NgxIntlTelInputComponent_Template_input_ngModelChange_7_listener() {\n        return ctx.onPhoneNumberChange();\n      });\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngClass\", ctx.separateDialCodeClass);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(12, _c1, ctx.disabled))(\"isDisabled\", ctx.disabled);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", (ctx.selectedCountry == null ? null : ctx.selectedCountry.flagClass) || \"\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.separateDialCode);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"id\", ctx.inputId)(\"ngClass\", ctx.cssClass)(\"ngModel\", ctx.phoneNumber)(\"disabled\", ctx.disabled)(\"placeholder\", ctx.resolvePlaceholder());\n      i0.ɵɵattribute(\"maxLength\", ctx.maxLength)(\"validation\", ctx.phoneValidation);\n    }\n  },\n  dependencies: [i2.NgClass, i3.BsDropdownDirective, i3.BsDropdownToggleDirective, i2.NgIf, i3.BsDropdownMenuDirective, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, NativeElementInjectorDirective, i2.NgForOf],\n  styles: [\".dropup[_ngcontent-%COMP%], .dropright[_ngcontent-%COMP%], .dropdown[_ngcontent-%COMP%], .dropleft[_ngcontent-%COMP%]{position:relative}.dropdown-toggle[_ngcontent-%COMP%]{white-space:nowrap}.dropdown-toggle[_ngcontent-%COMP%]:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";border-top:.3em solid;border-right:.3em solid transparent;border-bottom:0;border-left:.3em solid transparent}.dropdown-toggle[_ngcontent-%COMP%]:empty:after{margin-left:0}.dropdown-menu[_ngcontent-%COMP%]{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:10rem;padding:.5rem 0;margin:.125rem 0 0;font-size:1rem;color:#212529;text-align:left;list-style:none;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.15);border-radius:.25rem}.dropdown-menu-left[_ngcontent-%COMP%]{right:auto;left:0}.dropdown-menu-right[_ngcontent-%COMP%]{right:0;left:auto}@media (min-width: 576px){.dropdown-menu-sm-left[_ngcontent-%COMP%]{right:auto;left:0}.dropdown-menu-sm-right[_ngcontent-%COMP%]{right:0;left:auto}}@media (min-width: 768px){.dropdown-menu-md-left[_ngcontent-%COMP%]{right:auto;left:0}.dropdown-menu-md-right[_ngcontent-%COMP%]{right:0;left:auto}}@media (min-width: 992px){.dropdown-menu-lg-left[_ngcontent-%COMP%]{right:auto;left:0}.dropdown-menu-lg-right[_ngcontent-%COMP%]{right:0;left:auto}}@media (min-width: 1200px){.dropdown-menu-xl-left[_ngcontent-%COMP%]{right:auto;left:0}.dropdown-menu-xl-right[_ngcontent-%COMP%]{right:0;left:auto}}.dropup[_ngcontent-%COMP%]   .dropdown-menu[_ngcontent-%COMP%]{top:auto;bottom:100%;margin-top:0;margin-bottom:.125rem}.dropup[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";border-top:0;border-right:.3em solid transparent;border-bottom:.3em solid;border-left:.3em solid transparent}.dropup[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:empty:after{margin-left:0}.dropright[_ngcontent-%COMP%]   .dropdown-menu[_ngcontent-%COMP%]{top:0;right:auto;left:100%;margin-top:0;margin-left:.125rem}.dropright[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";border-top:.3em solid transparent;border-right:0;border-bottom:.3em solid transparent;border-left:.3em solid}.dropright[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:empty:after{margin-left:0}.dropright[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:after{vertical-align:0}.dropleft[_ngcontent-%COMP%]   .dropdown-menu[_ngcontent-%COMP%]{top:0;right:100%;left:auto;margin-top:0;margin-right:.125rem}.dropleft[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\"}.dropleft[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:after{display:none}.dropleft[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:before{display:inline-block;margin-right:.255em;vertical-align:.255em;content:\\\"\\\";border-top:.3em solid transparent;border-right:.3em solid;border-bottom:.3em solid transparent}.dropleft[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:empty:after{margin-left:0}.dropleft[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:before{vertical-align:0}.dropdown-menu[x-placement^=top][_ngcontent-%COMP%], .dropdown-menu[x-placement^=right][_ngcontent-%COMP%], .dropdown-menu[x-placement^=bottom][_ngcontent-%COMP%], .dropdown-menu[x-placement^=left][_ngcontent-%COMP%]{right:auto;bottom:auto}.dropdown-divider[_ngcontent-%COMP%]{height:0;margin:.5rem 0;overflow:hidden;border-top:1px solid #e9ecef}.dropdown-item[_ngcontent-%COMP%]{display:block;width:100%;padding:.25rem 1.5rem;clear:both;font-weight:400;color:#212529;text-align:inherit;white-space:nowrap;background-color:transparent;border:0}.dropdown-item[_ngcontent-%COMP%]:hover, .dropdown-item[_ngcontent-%COMP%]:focus{color:#16181b;text-decoration:none;background-color:#f8f9fa}.dropdown-item.active[_ngcontent-%COMP%], .dropdown-item[_ngcontent-%COMP%]:active{color:#fff;text-decoration:none;background-color:#007bff}.dropdown-item.disabled[_ngcontent-%COMP%], .dropdown-item[_ngcontent-%COMP%]:disabled{color:#6c757d;pointer-events:none;background-color:transparent}.dropdown-menu.show[_ngcontent-%COMP%]{display:block}.dropdown-header[_ngcontent-%COMP%]{display:block;padding:.5rem 1.5rem;margin-bottom:0;font-size:.875rem;color:#6c757d;white-space:nowrap}.dropdown-item-text[_ngcontent-%COMP%]{display:block;padding:.25rem 1.5rem;color:#212529}\", \"li.iti__country[_ngcontent-%COMP%]:hover{background-color:#0000000d}.iti__selected-flag.dropdown-toggle[_ngcontent-%COMP%]:after{content:none}.iti__flag-container.disabled[_ngcontent-%COMP%]{cursor:default!important}.iti.iti--allow-dropdown[_ngcontent-%COMP%]   .flag-container.disabled[_ngcontent-%COMP%]:hover   .iti__selected-flag[_ngcontent-%COMP%]{background:none}.country-dropdown[_ngcontent-%COMP%]{border:1px solid #ccc;width:-moz-fit-content;width:fit-content;padding:1px;border-collapse:collapse}.search-container[_ngcontent-%COMP%]{position:relative}.search-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:100%;border:none;border-bottom:1px solid #ccc;padding-left:10px}.search-icon[_ngcontent-%COMP%]{position:absolute;z-index:2;width:25px;margin:1px 10px}.iti__country-list[_ngcontent-%COMP%]{position:relative;border:none}.iti[_ngcontent-%COMP%]   input#country-search-box[_ngcontent-%COMP%]{padding-left:6px}.iti[_ngcontent-%COMP%]   .selected-dial-code[_ngcontent-%COMP%]{margin-left:6px}.iti.separate-dial-code[_ngcontent-%COMP%]   .iti__selected-flag[_ngcontent-%COMP%], .iti.separate-dial-code.iti--allow-dropdown.iti-sdc-2[_ngcontent-%COMP%]   .iti__selected-flag[_ngcontent-%COMP%], .iti.separate-dial-code.iti--allow-dropdown.iti-sdc-3[_ngcontent-%COMP%]   .iti__selected-flag[_ngcontent-%COMP%], .iti.separate-dial-code.iti--allow-dropdown.iti-sdc-4[_ngcontent-%COMP%]   .iti__selected-flag[_ngcontent-%COMP%]{width:93px}.iti.separate-dial-code[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .iti.separate-dial-code.iti--allow-dropdown.iti-sdc-2[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .iti.separate-dial-code.iti--allow-dropdown.iti-sdc-3[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .iti.separate-dial-code.iti--allow-dropdown.iti-sdc-4[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{padding-left:98px}\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxIntlTelInputComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-intl-tel-input',\n      providers: [CountryCode, {\n        provide: NG_VALUE_ACCESSOR,\n        // tslint:disable-next-line:no-forward-ref\n        useExisting: forwardRef(() => NgxIntlTelInputComponent),\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useValue: phoneNumberValidator,\n        multi: true\n      }],\n      template: \"<div class=\\\"iti iti--allow-dropdown\\\"\\n\\t[ngClass]=\\\"separateDialCodeClass\\\">\\n\\t<div class=\\\"iti__flag-container\\\"\\n\\t\\tdropdown\\n\\t\\t[ngClass]=\\\"{'disabled': disabled}\\\"\\n\\t\\t[isDisabled]=\\\"disabled\\\">\\n\\t\\t<div class=\\\"iti__selected-flag dropdown-toggle\\\"\\n\\t\\t\\tdropdownToggle>\\n\\t\\t\\t<div class=\\\"iti__flag\\\"\\n\\t\\t\\t\\t[ngClass]=\\\"selectedCountry?.flagClass || ''\\\"></div>\\n\\t\\t\\t<div *ngIf=\\\"separateDialCode\\\"\\n\\t\\t\\t\\tclass=\\\"selected-dial-code\\\">+{{selectedCountry.dialCode}}</div>\\n\\t\\t\\t<div class=\\\"iti__arrow\\\"></div>\\n\\t\\t</div>\\n\\t\\t<div *dropdownMenu\\n\\t\\t\\tclass=\\\"dropdown-menu country-dropdown\\\">\\n\\t\\t\\t<div class=\\\"search-container\\\"\\n\\t\\t\\t\\t*ngIf=\\\"searchCountryFlag && searchCountryField\\\">\\n\\t\\t\\t\\t<input id=\\\"country-search-box\\\"\\n\\t\\t\\t\\t\\t[(ngModel)]=\\\"countrySearchText\\\"\\n\\t\\t\\t\\t\\t(keyup)=\\\"searchCountry()\\\"\\n\\t\\t\\t\\t\\t(click)=\\\"$event.stopPropagation()\\\"\\n\\t\\t\\t\\t\\t[placeholder]=\\\"searchCountryPlaceholder\\\"\\n\\t\\t\\t\\t\\tautofocus>\\n\\t\\t\\t</div>\\n\\t\\t\\t<ul class=\\\"iti__country-list\\\"\\n\\t\\t\\t\\t#countryList>\\n\\t\\t\\t\\t<li class=\\\"iti__country iti__preferred\\\"\\n\\t\\t\\t\\t\\t*ngFor=\\\"let country of preferredCountriesInDropDown\\\"\\n\\t\\t\\t\\t\\t(click)=\\\"onCountrySelect(country, focusable)\\\"\\n\\t\\t\\t\\t\\t[id]=\\\"country.htmlId+'-preferred'\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"iti__flag-box\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"iti__flag\\\"\\n\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"country.flagClass\\\"></div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<span class=\\\"iti__country-name\\\">{{country.name}}</span>\\n\\t\\t\\t\\t\\t<span class=\\\"iti__dial-code\\\">+{{country.dialCode}}</span>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t<li class=\\\"iti__divider\\\"\\n\\t\\t\\t\\t\\t*ngIf=\\\"preferredCountriesInDropDown?.length\\\"></li>\\n\\t\\t\\t\\t<li class=\\\"iti__country iti__standard\\\"\\n\\t\\t\\t\\t\\t*ngFor=\\\"let country of allCountries\\\"\\n\\t\\t\\t\\t\\t(click)=\\\"onCountrySelect(country, focusable)\\\"\\n\\t\\t\\t\\t\\t[id]=\\\"country.htmlId\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"iti__flag-box\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"iti__flag\\\"\\n\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"country.flagClass\\\"></div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<span class=\\\"iti__country-name\\\">{{country.name}}</span>\\n\\t\\t\\t\\t\\t<span class=\\\"iti__dial-code\\\">+{{country.dialCode}}</span>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t</ul>\\n\\t\\t</div>\\n\\t</div>\\n\\t<input type=\\\"tel\\\"\\n\\t\\t[id]=\\\"inputId\\\"\\n\\t\\tautocomplete=\\\"off\\\"\\n\\t\\t[ngClass]=\\\"cssClass\\\"\\n\\t\\t(blur)=\\\"onTouched()\\\"\\n\\t\\t(keypress)=\\\"onInputKeyPress($event)\\\"\\n\\t\\t[(ngModel)]=\\\"phoneNumber\\\"\\n\\t\\t(ngModelChange)=\\\"onPhoneNumberChange()\\\"\\n\\t\\t[disabled]=\\\"disabled\\\"\\n\\t\\t[placeholder]=\\\"resolvePlaceholder()\\\"\\n\\t\\t[attr.maxLength]=\\\"maxLength\\\"\\n\\t\\t[attr.validation]=\\\"phoneValidation\\\"\\n\\t\\t#focusable>\\n</div>\\n\",\n      styles: [\".dropup,.dropright,.dropdown,.dropleft{position:relative}.dropdown-toggle{white-space:nowrap}.dropdown-toggle:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";border-top:.3em solid;border-right:.3em solid transparent;border-bottom:0;border-left:.3em solid transparent}.dropdown-toggle:empty:after{margin-left:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:10rem;padding:.5rem 0;margin:.125rem 0 0;font-size:1rem;color:#212529;text-align:left;list-style:none;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.15);border-radius:.25rem}.dropdown-menu-left{right:auto;left:0}.dropdown-menu-right{right:0;left:auto}@media (min-width: 576px){.dropdown-menu-sm-left{right:auto;left:0}.dropdown-menu-sm-right{right:0;left:auto}}@media (min-width: 768px){.dropdown-menu-md-left{right:auto;left:0}.dropdown-menu-md-right{right:0;left:auto}}@media (min-width: 992px){.dropdown-menu-lg-left{right:auto;left:0}.dropdown-menu-lg-right{right:0;left:auto}}@media (min-width: 1200px){.dropdown-menu-xl-left{right:auto;left:0}.dropdown-menu-xl-right{right:0;left:auto}}.dropup .dropdown-menu{top:auto;bottom:100%;margin-top:0;margin-bottom:.125rem}.dropup .dropdown-toggle:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";border-top:0;border-right:.3em solid transparent;border-bottom:.3em solid;border-left:.3em solid transparent}.dropup .dropdown-toggle:empty:after{margin-left:0}.dropright .dropdown-menu{top:0;right:auto;left:100%;margin-top:0;margin-left:.125rem}.dropright .dropdown-toggle:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";border-top:.3em solid transparent;border-right:0;border-bottom:.3em solid transparent;border-left:.3em solid}.dropright .dropdown-toggle:empty:after{margin-left:0}.dropright .dropdown-toggle:after{vertical-align:0}.dropleft .dropdown-menu{top:0;right:100%;left:auto;margin-top:0;margin-right:.125rem}.dropleft .dropdown-toggle:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\"}.dropleft .dropdown-toggle:after{display:none}.dropleft .dropdown-toggle:before{display:inline-block;margin-right:.255em;vertical-align:.255em;content:\\\"\\\";border-top:.3em solid transparent;border-right:.3em solid;border-bottom:.3em solid transparent}.dropleft .dropdown-toggle:empty:after{margin-left:0}.dropleft .dropdown-toggle:before{vertical-align:0}.dropdown-menu[x-placement^=top],.dropdown-menu[x-placement^=right],.dropdown-menu[x-placement^=bottom],.dropdown-menu[x-placement^=left]{right:auto;bottom:auto}.dropdown-divider{height:0;margin:.5rem 0;overflow:hidden;border-top:1px solid #e9ecef}.dropdown-item{display:block;width:100%;padding:.25rem 1.5rem;clear:both;font-weight:400;color:#212529;text-align:inherit;white-space:nowrap;background-color:transparent;border:0}.dropdown-item:hover,.dropdown-item:focus{color:#16181b;text-decoration:none;background-color:#f8f9fa}.dropdown-item.active,.dropdown-item:active{color:#fff;text-decoration:none;background-color:#007bff}.dropdown-item.disabled,.dropdown-item:disabled{color:#6c757d;pointer-events:none;background-color:transparent}.dropdown-menu.show{display:block}.dropdown-header{display:block;padding:.5rem 1.5rem;margin-bottom:0;font-size:.875rem;color:#6c757d;white-space:nowrap}.dropdown-item-text{display:block;padding:.25rem 1.5rem;color:#212529}\\n\", \"li.iti__country:hover{background-color:#0000000d}.iti__selected-flag.dropdown-toggle:after{content:none}.iti__flag-container.disabled{cursor:default!important}.iti.iti--allow-dropdown .flag-container.disabled:hover .iti__selected-flag{background:none}.country-dropdown{border:1px solid #ccc;width:-moz-fit-content;width:fit-content;padding:1px;border-collapse:collapse}.search-container{position:relative}.search-container input{width:100%;border:none;border-bottom:1px solid #ccc;padding-left:10px}.search-icon{position:absolute;z-index:2;width:25px;margin:1px 10px}.iti__country-list{position:relative;border:none}.iti input#country-search-box{padding-left:6px}.iti .selected-dial-code{margin-left:6px}.iti.separate-dial-code .iti__selected-flag,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-2 .iti__selected-flag,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-3 .iti__selected-flag,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-4 .iti__selected-flag{width:93px}.iti.separate-dial-code input,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-2 input,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-3 input,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-4 input{padding-left:98px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: CountryCode\n    }];\n  }, {\n    value: [{\n      type: Input\n    }],\n    preferredCountries: [{\n      type: Input\n    }],\n    enablePlaceholder: [{\n      type: Input\n    }],\n    customPlaceholder: [{\n      type: Input\n    }],\n    numberFormat: [{\n      type: Input\n    }],\n    cssClass: [{\n      type: Input\n    }],\n    onlyCountries: [{\n      type: Input\n    }],\n    enableAutoCountrySelect: [{\n      type: Input\n    }],\n    searchCountryFlag: [{\n      type: Input\n    }],\n    searchCountryField: [{\n      type: Input\n    }],\n    searchCountryPlaceholder: [{\n      type: Input\n    }],\n    maxLength: [{\n      type: Input\n    }],\n    selectFirstCountry: [{\n      type: Input\n    }],\n    selectedCountryISO: [{\n      type: Input\n    }],\n    phoneValidation: [{\n      type: Input\n    }],\n    inputId: [{\n      type: Input\n    }],\n    separateDialCode: [{\n      type: Input\n    }],\n    countryChange: [{\n      type: Output\n    }],\n    countryList: [{\n      type: ViewChild,\n      args: ['countryList']\n    }]\n  });\n})();\n\nconst dropdownModuleForRoot = BsDropdownModule.forRoot();\n\nclass NgxIntlTelInputModule {}\n\nNgxIntlTelInputModule.ɵfac = function NgxIntlTelInputModule_Factory(t) {\n  return new (t || NgxIntlTelInputModule)();\n};\n\nNgxIntlTelInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxIntlTelInputModule\n});\nNgxIntlTelInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, FormsModule, ReactiveFormsModule, dropdownModuleForRoot]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxIntlTelInputModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxIntlTelInputComponent, NativeElementInjectorDirective],\n      imports: [CommonModule, FormsModule, ReactiveFormsModule, dropdownModuleForRoot],\n      exports: [NgxIntlTelInputComponent, NativeElementInjectorDirective]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ngx-intl-tel-input\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CountryISO, NativeElementInjectorDirective, NgxIntlTelInputComponent, NgxIntlTelInputModule, PhoneNumberFormat, SearchCountryField, dropdownModuleForRoot };","map":{"version":3,"names":["lpn","i0","Injectable","Directive","EventEmitter","forwardRef","Component","Input","Output","ViewChild","NgModule","i4","NG_VALUE_ACCESSOR","NG_VALIDATORS","FormsModule","ReactiveFormsModule","setTheme","i2","CommonModule","i3","BsDropdownModule","CountryISO","CountryCode","constructor","allCountries","Afghanistan","Albania","Algeria","Andorra","Angola","Argentina","Armenia","Aruba","Australia","Austria","Azerbaijan","Bahrain","Bangladesh","Belarus","Belgium","Belize","Benin","Bhutan","Bolivia","BosniaAndHerzegovina","Botswana","Brazil","BritishIndianOceanTerritory","Brunei","Bulgaria","BurkinaFaso","Burundi","Cambodia","Cameroon","Canada","CapeVerde","CaribbeanNetherlands","CentralAfricanRepublic","Chad","Chile","China","ChristmasIsland","Cocos","Colombia","Comoros","CongoDRCJamhuriYaKidemokrasiaYaKongo","CongoRepublicCongoBrazzaville","CookIslands","CostaRica","CôteDIvoire","Croatia","Cuba","Curaçao","Cyprus","CzechRepublic","Denmark","Djibouti","Dominica","DominicanRepublic","Ecuador","Egypt","ElSalvador","EquatorialGuinea","Eritrea","Estonia","Ethiopia","FalklandIslands","FaroeIslands","Fiji","Finland","France","FrenchGuiana","FrenchPolynesia","Gabon","Gambia","Georgia","Germany","Ghana","Gibraltar","Greece","Greenland","Grenada","Guadeloupe","Guatemala","Guernsey","Guinea","GuineaBissau","Guyana","Haiti","Honduras","HongKong","Hungary","Iceland","India","Indonesia","Iran","Iraq","Ireland","IsleOfMan","Israel","Italy","Japan","Jersey","Jordan","Kazakhstan","Kenya","Kiribati","Kosovo","Kuwait","Kyrgyzstan","Laos","Latvia","Lebanon","Lesotho","Liberia","Libya","Liechtenstein","Lithuania","Luxembourg","Macau","Macedonia","Madagascar","Malawi","Malaysia","Maldives","Mali","Malta","MarshallIslands","Martinique","Mauritania","Mauritius","Mayotte","Mexico","Micronesia","Moldova","Monaco","Mongolia","Montenegro","Morocco","Mozambique","Myanmar","Namibia","Nauru","Nepal","Netherlands","NewCaledonia","NewZealand","Nicaragua","Niger","Nigeria","Niue","NorfolkIsland","NorthKorea","NorthernMarianaIslands","Norway","Oman","Pakistan","Palau","Palestine","Panama","PapuaNewGuinea","Paraguay","Peru","Philippines","Poland","Portugal","PuertoRico","Qatar","Réunion","Romania","Russia","Rwanda","SaintBarthélemy","SaintHelena","SaintKittsAndNevis","SaintMartin","SaintPierreAndMiquelon","Samoa","SanMarino","SãoToméAndPríncipe","SaudiArabia","Senegal","Serbia","Seychelles","SierraLeone","Singapore","Slovakia","Slovenia","SolomonIslands","Somalia","SouthAfrica","SouthKorea","SouthSudan","Spain","SriLanka","Sudan","Suriname","SvalbardAndJanMayen","Swaziland","Sweden","Switzerland","Syria","Taiwan","Tajikistan","Tanzania","Thailand","TimorLeste","Togo","Tokelau","Tonga","Tunisia","Turkey","Turkmenistan","TurksAndCaicosIslands","Tuvalu","Uganda","Ukraine","UnitedArabEmirates","UnitedKingdom","UnitedStates","Uruguay","Uzbekistan","Vanuatu","VaticanCity","Venezuela","Vietnam","WallisAndFutuna","WesternSahara","Yemen","Zambia","Zimbabwe","ÅlandIslands","ɵfac","ɵprov","type","SearchCountryField","phoneNumberValidator","control","value","el","nativeElement","inputBox","querySelector","undefined","id","isCheckValidation","getAttribute","isRequired","errors","required","error","validatePhoneNumber","valid","setCustomValidity","number","PhoneNumberUtil","getInstance","parse","countryCode","e","isValidNumberForRegion","clearValidators","PhoneNumberFormat","NativeElementInjectorDirective","controlDir","host","ngOnInit","NgControl","ElementRef","ɵdir","args","selector","NgxIntlTelInputComponent","countryCodeData","preferredCountries","enablePlaceholder","numberFormat","International","cssClass","onlyCountries","enableAutoCountrySelect","searchCountryFlag","searchCountryField","All","searchCountryPlaceholder","selectFirstCountry","phoneValidation","inputId","separateDialCode","countryChange","selectedCountry","areaCodes","dialCode","htmlId","flagClass","iso2","name","placeHolder","priority","phoneNumber","preferredCountriesInDropDown","phoneUtil","disabled","countrySearchText","onTouched","propagateChange","_","init","ngOnChanges","changes","selectedISO","currentValue","previousValue","updateSelectedCountry","updatePreferredCountries","checkSeparateDialCodeStyle","fetchCountryData","length","filter","c","includes","setSelectedCountry","country","emit","searchCountry","countryList","scrollIntoView","behavior","block","inline","countrySearchTextLower","toLowerCase","indexOf","startsWith","Iso2","Name","DialCode","onPhoneNumberChange","numberObj","getParsedNumber","getCountryCode","getCountryIsoCode","newCountry","sort","a","b","find","intlNo","format","INTERNATIONAL","removeDialCode","internationalNumber","nationalNumber","NATIONAL","e164Number","E164","toUpperCase","onCountrySelect","focus","onInputKeyPress","event","allowedChars","allowedCtrlChars","allowedOtherKeys","test","key","ctrlKey","preventDefault","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","writeValue","obj","setTimeout","resolvePlaceholder","placeholder","customPlaceholder","cntryCd","separateDialCodeClass","substr","rawNumber","toString","countries","mainCountry","secondaryCountries","matchedCountry","forEach","areaCode","getPhoneNumberPlaceHolder","getExampleNumber","toLocaleLowerCase","push","preferredCountry","selectedCountryISO","ɵcmp","provide","useExisting","multi","useValue","NgClass","BsDropdownDirective","BsDropdownToggleDirective","NgIf","BsDropdownMenuDirective","DefaultValueAccessor","NgControlStatus","NgModel","NgForOf","providers","template","styles","maxLength","dropdownModuleForRoot","forRoot","NgxIntlTelInputModule","ɵmod","ɵinj","declarations","imports","exports"],"sources":["/Users/mac/Documents/2PAI_MIGRATION_PROJECT/ogrand_marche_admin/node_modules/ngx-intl-tel-input/fesm2015/ngx-intl-tel-input.mjs"],"sourcesContent":["import * as lpn from 'google-libphonenumber';\nimport * as i0 from '@angular/core';\nimport { Injectable, Directive, EventEmitter, forwardRef, Component, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport * as i4 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { setTheme } from 'ngx-bootstrap/utils';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from 'ngx-bootstrap/dropdown';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\n\nvar CountryISO;\n(function (CountryISO) {\n    CountryISO[\"Afghanistan\"] = \"af\";\n    CountryISO[\"Albania\"] = \"al\";\n    CountryISO[\"Algeria\"] = \"dz\";\n    CountryISO[\"AmericanSamoa\"] = \"as\";\n    CountryISO[\"Andorra\"] = \"ad\";\n    CountryISO[\"Angola\"] = \"ao\";\n    CountryISO[\"Anguilla\"] = \"ai\";\n    CountryISO[\"AntiguaAndBarbuda\"] = \"ag\";\n    CountryISO[\"Argentina\"] = \"ar\";\n    CountryISO[\"Armenia\"] = \"am\";\n    CountryISO[\"Aruba\"] = \"aw\";\n    CountryISO[\"Australia\"] = \"au\";\n    CountryISO[\"Austria\"] = \"at\";\n    CountryISO[\"Azerbaijan\"] = \"az\";\n    CountryISO[\"Bahamas\"] = \"bs\";\n    CountryISO[\"Bahrain\"] = \"bh\";\n    CountryISO[\"Bangladesh\"] = \"bd\";\n    CountryISO[\"Barbados\"] = \"bb\";\n    CountryISO[\"Belarus\"] = \"by\";\n    CountryISO[\"Belgium\"] = \"be\";\n    CountryISO[\"Belize\"] = \"bz\";\n    CountryISO[\"Benin\"] = \"bj\";\n    CountryISO[\"Bermuda\"] = \"bm\";\n    CountryISO[\"Bhutan\"] = \"bt\";\n    CountryISO[\"Bolivia\"] = \"bo\";\n    CountryISO[\"BosniaAndHerzegovina\"] = \"ba\";\n    CountryISO[\"Botswana\"] = \"bw\";\n    CountryISO[\"Brazil\"] = \"br\";\n    CountryISO[\"BritishIndianOceanTerritory\"] = \"io\";\n    CountryISO[\"BritishVirginIslands\"] = \"vg\";\n    CountryISO[\"Brunei\"] = \"bn\";\n    CountryISO[\"Bulgaria\"] = \"bg\";\n    CountryISO[\"BurkinaFaso\"] = \"bf\";\n    CountryISO[\"Burundi\"] = \"bi\";\n    CountryISO[\"Cambodia\"] = \"kh\";\n    CountryISO[\"Cameroon\"] = \"cm\";\n    CountryISO[\"Canada\"] = \"ca\";\n    CountryISO[\"CapeVerde\"] = \"cv\";\n    CountryISO[\"CaribbeanNetherlands\"] = \"bq\";\n    CountryISO[\"CaymanIslands\"] = \"ky\";\n    CountryISO[\"CentralAfricanRepublic\"] = \"cf\";\n    CountryISO[\"Chad\"] = \"td\";\n    CountryISO[\"Chile\"] = \"cl\";\n    CountryISO[\"China\"] = \"cn\";\n    CountryISO[\"ChristmasIsland\"] = \"cx\";\n    CountryISO[\"Cocos\"] = \"cc\";\n    CountryISO[\"Colombia\"] = \"co\";\n    CountryISO[\"Comoros\"] = \"km\";\n    CountryISO[\"CongoDRCJamhuriYaKidemokrasiaYaKongo\"] = \"cd\";\n    CountryISO[\"CongoRepublicCongoBrazzaville\"] = \"cg\";\n    CountryISO[\"CookIslands\"] = \"ck\";\n    CountryISO[\"CostaRica\"] = \"cr\";\n    CountryISO[\"C\\u00F4teDIvoire\"] = \"ci\";\n    CountryISO[\"Croatia\"] = \"hr\";\n    CountryISO[\"Cuba\"] = \"cu\";\n    CountryISO[\"Cura\\u00E7ao\"] = \"cw\";\n    CountryISO[\"Cyprus\"] = \"cy\";\n    CountryISO[\"CzechRepublic\"] = \"cz\";\n    CountryISO[\"Denmark\"] = \"dk\";\n    CountryISO[\"Djibouti\"] = \"dj\";\n    CountryISO[\"Dominica\"] = \"dm\";\n    CountryISO[\"DominicanRepublic\"] = \"do\";\n    CountryISO[\"Ecuador\"] = \"ec\";\n    CountryISO[\"Egypt\"] = \"eg\";\n    CountryISO[\"ElSalvador\"] = \"sv\";\n    CountryISO[\"EquatorialGuinea\"] = \"gq\";\n    CountryISO[\"Eritrea\"] = \"er\";\n    CountryISO[\"Estonia\"] = \"ee\";\n    CountryISO[\"Ethiopia\"] = \"et\";\n    CountryISO[\"FalklandIslands\"] = \"fk\";\n    CountryISO[\"FaroeIslands\"] = \"fo\";\n    CountryISO[\"Fiji\"] = \"fj\";\n    CountryISO[\"Finland\"] = \"fi\";\n    CountryISO[\"France\"] = \"fr\";\n    CountryISO[\"FrenchGuiana\"] = \"gf\";\n    CountryISO[\"FrenchPolynesia\"] = \"pf\";\n    CountryISO[\"Gabon\"] = \"ga\";\n    CountryISO[\"Gambia\"] = \"gm\";\n    CountryISO[\"Georgia\"] = \"ge\";\n    CountryISO[\"Germany\"] = \"de\";\n    CountryISO[\"Ghana\"] = \"gh\";\n    CountryISO[\"Gibraltar\"] = \"gi\";\n    CountryISO[\"Greece\"] = \"gr\";\n    CountryISO[\"Greenland\"] = \"gl\";\n    CountryISO[\"Grenada\"] = \"gd\";\n    CountryISO[\"Guadeloupe\"] = \"gp\";\n    CountryISO[\"Guam\"] = \"gu\";\n    CountryISO[\"Guatemala\"] = \"gt\";\n    CountryISO[\"Guernsey\"] = \"gg\";\n    CountryISO[\"Guinea\"] = \"gn\";\n    CountryISO[\"GuineaBissau\"] = \"gw\";\n    CountryISO[\"Guyana\"] = \"gy\";\n    CountryISO[\"Haiti\"] = \"ht\";\n    CountryISO[\"Honduras\"] = \"hn\";\n    CountryISO[\"HongKong\"] = \"hk\";\n    CountryISO[\"Hungary\"] = \"hu\";\n    CountryISO[\"Iceland\"] = \"is\";\n    CountryISO[\"India\"] = \"in\";\n    CountryISO[\"Indonesia\"] = \"id\";\n    CountryISO[\"Iran\"] = \"ir\";\n    CountryISO[\"Iraq\"] = \"iq\";\n    CountryISO[\"Ireland\"] = \"ie\";\n    CountryISO[\"IsleOfMan\"] = \"im\";\n    CountryISO[\"Israel\"] = \"il\";\n    CountryISO[\"Italy\"] = \"it\";\n    CountryISO[\"Jamaica\"] = \"jm\";\n    CountryISO[\"Japan\"] = \"jp\";\n    CountryISO[\"Jersey\"] = \"je\";\n    CountryISO[\"Jordan\"] = \"jo\";\n    CountryISO[\"Kazakhstan\"] = \"kz\";\n    CountryISO[\"Kenya\"] = \"ke\";\n    CountryISO[\"Kiribati\"] = \"ki\";\n    CountryISO[\"Kosovo\"] = \"xk\";\n    CountryISO[\"Kuwait\"] = \"kw\";\n    CountryISO[\"Kyrgyzstan\"] = \"kg\";\n    CountryISO[\"Laos\"] = \"la\";\n    CountryISO[\"Latvia\"] = \"lv\";\n    CountryISO[\"Lebanon\"] = \"lb\";\n    CountryISO[\"Lesotho\"] = \"ls\";\n    CountryISO[\"Liberia\"] = \"lr\";\n    CountryISO[\"Libya\"] = \"ly\";\n    CountryISO[\"Liechtenstein\"] = \"li\";\n    CountryISO[\"Lithuania\"] = \"lt\";\n    CountryISO[\"Luxembourg\"] = \"lu\";\n    CountryISO[\"Macau\"] = \"mo\";\n    CountryISO[\"Macedonia\"] = \"mk\";\n    CountryISO[\"Madagascar\"] = \"mg\";\n    CountryISO[\"Malawi\"] = \"mw\";\n    CountryISO[\"Malaysia\"] = \"my\";\n    CountryISO[\"Maldives\"] = \"mv\";\n    CountryISO[\"Mali\"] = \"ml\";\n    CountryISO[\"Malta\"] = \"mt\";\n    CountryISO[\"MarshallIslands\"] = \"mh\";\n    CountryISO[\"Martinique\"] = \"mq\";\n    CountryISO[\"Mauritania\"] = \"mr\";\n    CountryISO[\"Mauritius\"] = \"mu\";\n    CountryISO[\"Mayotte\"] = \"yt\";\n    CountryISO[\"Mexico\"] = \"mx\";\n    CountryISO[\"Micronesia\"] = \"fm\";\n    CountryISO[\"Moldova\"] = \"md\";\n    CountryISO[\"Monaco\"] = \"mc\";\n    CountryISO[\"Mongolia\"] = \"mn\";\n    CountryISO[\"Montenegro\"] = \"me\";\n    CountryISO[\"Montserrat\"] = \"ms\";\n    CountryISO[\"Morocco\"] = \"ma\";\n    CountryISO[\"Mozambique\"] = \"mz\";\n    CountryISO[\"Myanmar\"] = \"mm\";\n    CountryISO[\"Namibia\"] = \"na\";\n    CountryISO[\"Nauru\"] = \"nr\";\n    CountryISO[\"Nepal\"] = \"np\";\n    CountryISO[\"Netherlands\"] = \"nl\";\n    CountryISO[\"NewCaledonia\"] = \"nc\";\n    CountryISO[\"NewZealand\"] = \"nz\";\n    CountryISO[\"Nicaragua\"] = \"ni\";\n    CountryISO[\"Niger\"] = \"ne\";\n    CountryISO[\"Nigeria\"] = \"ng\";\n    CountryISO[\"Niue\"] = \"nu\";\n    CountryISO[\"NorfolkIsland\"] = \"nf\";\n    CountryISO[\"NorthKorea\"] = \"kp\";\n    CountryISO[\"NorthernMarianaIslands\"] = \"mp\";\n    CountryISO[\"Norway\"] = \"no\";\n    CountryISO[\"Oman\"] = \"om\";\n    CountryISO[\"Pakistan\"] = \"pk\";\n    CountryISO[\"Palau\"] = \"pw\";\n    CountryISO[\"Palestine\"] = \"ps\";\n    CountryISO[\"Panama\"] = \"pa\";\n    CountryISO[\"PapuaNewGuinea\"] = \"pg\";\n    CountryISO[\"Paraguay\"] = \"py\";\n    CountryISO[\"Peru\"] = \"pe\";\n    CountryISO[\"Philippines\"] = \"ph\";\n    CountryISO[\"Poland\"] = \"pl\";\n    CountryISO[\"Portugal\"] = \"pt\";\n    CountryISO[\"PuertoRico\"] = \"pr\";\n    CountryISO[\"Qatar\"] = \"qa\";\n    CountryISO[\"R\\u00E9union\"] = \"re\";\n    CountryISO[\"Romania\"] = \"ro\";\n    CountryISO[\"Russia\"] = \"ru\";\n    CountryISO[\"Rwanda\"] = \"rw\";\n    CountryISO[\"SaintBarth\\u00E9lemy\"] = \"bl\";\n    CountryISO[\"SaintHelena\"] = \"sh\";\n    CountryISO[\"SaintKittsAndNevis\"] = \"kn\";\n    CountryISO[\"SaintLucia\"] = \"lc\";\n    CountryISO[\"SaintMartin\"] = \"mf\";\n    CountryISO[\"SaintPierreAndMiquelon\"] = \"pm\";\n    CountryISO[\"SaintVincentAndTheGrenadines\"] = \"vc\";\n    CountryISO[\"Samoa\"] = \"ws\";\n    CountryISO[\"SanMarino\"] = \"sm\";\n    CountryISO[\"S\\u00E3oTom\\u00E9AndPr\\u00EDncipe\"] = \"st\";\n    CountryISO[\"SaudiArabia\"] = \"sa\";\n    CountryISO[\"Senegal\"] = \"sn\";\n    CountryISO[\"Serbia\"] = \"rs\";\n    CountryISO[\"Seychelles\"] = \"sc\";\n    CountryISO[\"SierraLeone\"] = \"sl\";\n    CountryISO[\"Singapore\"] = \"sg\";\n    CountryISO[\"SintMaarten\"] = \"sx\";\n    CountryISO[\"Slovakia\"] = \"sk\";\n    CountryISO[\"Slovenia\"] = \"si\";\n    CountryISO[\"SolomonIslands\"] = \"sb\";\n    CountryISO[\"Somalia\"] = \"so\";\n    CountryISO[\"SouthAfrica\"] = \"za\";\n    CountryISO[\"SouthKorea\"] = \"kr\";\n    CountryISO[\"SouthSudan\"] = \"ss\";\n    CountryISO[\"Spain\"] = \"es\";\n    CountryISO[\"SriLanka\"] = \"lk\";\n    CountryISO[\"Sudan\"] = \"sd\";\n    CountryISO[\"Suriname\"] = \"sr\";\n    CountryISO[\"SvalbardAndJanMayen\"] = \"sj\";\n    CountryISO[\"Swaziland\"] = \"sz\";\n    CountryISO[\"Sweden\"] = \"se\";\n    CountryISO[\"Switzerland\"] = \"ch\";\n    CountryISO[\"Syria\"] = \"sy\";\n    CountryISO[\"Taiwan\"] = \"tw\";\n    CountryISO[\"Tajikistan\"] = \"tj\";\n    CountryISO[\"Tanzania\"] = \"tz\";\n    CountryISO[\"Thailand\"] = \"th\";\n    CountryISO[\"TimorLeste\"] = \"tl\";\n    CountryISO[\"Togo\"] = \"tg\";\n    CountryISO[\"Tokelau\"] = \"tk\";\n    CountryISO[\"Tonga\"] = \"to\";\n    CountryISO[\"TrinidadAndTobago\"] = \"tt\";\n    CountryISO[\"Tunisia\"] = \"tn\";\n    CountryISO[\"Turkey\"] = \"tr\";\n    CountryISO[\"Turkmenistan\"] = \"tm\";\n    CountryISO[\"TurksAndCaicosIslands\"] = \"tc\";\n    CountryISO[\"Tuvalu\"] = \"tv\";\n    CountryISO[\"USVirginIslands\"] = \"vi\";\n    CountryISO[\"Uganda\"] = \"ug\";\n    CountryISO[\"Ukraine\"] = \"ua\";\n    CountryISO[\"UnitedArabEmirates\"] = \"ae\";\n    CountryISO[\"UnitedKingdom\"] = \"gb\";\n    CountryISO[\"UnitedStates\"] = \"us\";\n    CountryISO[\"Uruguay\"] = \"uy\";\n    CountryISO[\"Uzbekistan\"] = \"uz\";\n    CountryISO[\"Vanuatu\"] = \"vu\";\n    CountryISO[\"VaticanCity\"] = \"va\";\n    CountryISO[\"Venezuela\"] = \"ve\";\n    CountryISO[\"Vietnam\"] = \"vn\";\n    CountryISO[\"WallisAndFutuna\"] = \"wf\";\n    CountryISO[\"WesternSahara\"] = \"eh\";\n    CountryISO[\"Yemen\"] = \"ye\";\n    CountryISO[\"Zambia\"] = \"zm\";\n    CountryISO[\"Zimbabwe\"] = \"zw\";\n    CountryISO[\"\\u00C5landIslands\"] = \"ax\";\n})(CountryISO || (CountryISO = {}));\n\nclass CountryCode {\n    constructor() {\n        this.allCountries = [\n            [\n                'Afghanistan (‫افغانستان‬‎)',\n                CountryISO.Afghanistan,\n                '93'\n            ],\n            [\n                'Albania (Shqipëri)',\n                CountryISO.Albania,\n                '355'\n            ],\n            [\n                'Algeria (‫الجزائر‬‎)',\n                CountryISO.Algeria,\n                '213'\n            ],\n            [\n                'American Samoa',\n                'as',\n                '1',\n                1,\n                [\n                    '684',\n                ]\n            ],\n            [\n                'Andorra',\n                CountryISO.Andorra,\n                '376'\n            ],\n            [\n                'Angola',\n                CountryISO.Angola,\n                '244'\n            ],\n            [\n                'Anguilla',\n                'ai',\n                '1',\n                1,\n                [\n                    '264',\n                ]\n            ],\n            [\n                'Antigua and Barbuda',\n                'ag',\n                '1',\n                1,\n                [\n                    '268',\n                ]\n            ],\n            [\n                'Argentina',\n                CountryISO.Argentina,\n                '54'\n            ],\n            [\n                'Armenia (Հայաստան)',\n                CountryISO.Armenia,\n                '374'\n            ],\n            [\n                'Aruba',\n                CountryISO.Aruba,\n                '297'\n            ],\n            [\n                'Australia',\n                CountryISO.Australia,\n                '61',\n                0\n            ],\n            [\n                'Austria (Österreich)',\n                CountryISO.Austria,\n                '43'\n            ],\n            [\n                'Azerbaijan (Azərbaycan)',\n                CountryISO.Azerbaijan,\n                '994'\n            ],\n            [\n                'Bahamas',\n                'bs',\n                '1',\n                1,\n                [\n                    '242',\n                ]\n            ],\n            [\n                'Bahrain (‫البحرين‬‎)',\n                CountryISO.Bahrain,\n                '973'\n            ],\n            [\n                'Bangladesh (বাংলাদেশ)',\n                CountryISO.Bangladesh,\n                '880'\n            ],\n            [\n                'Barbados',\n                'bb',\n                '1',\n                1,\n                [\n                    '246',\n                ]\n            ],\n            [\n                'Belarus (Беларусь)',\n                CountryISO.Belarus,\n                '375'\n            ],\n            [\n                'Belgium (België)',\n                CountryISO.Belgium,\n                '32'\n            ],\n            [\n                'Belize',\n                CountryISO.Belize,\n                '501'\n            ],\n            [\n                'Benin (Bénin)',\n                CountryISO.Benin,\n                '229'\n            ],\n            [\n                'Bermuda',\n                'bm',\n                '1',\n                1,\n                [\n                    '441',\n                ]\n            ],\n            [\n                'Bhutan (འབྲུག)',\n                CountryISO.Bhutan,\n                '975'\n            ],\n            [\n                'Bolivia',\n                CountryISO.Bolivia,\n                '591'\n            ],\n            [\n                'Bosnia and Herzegovina (Босна и Херцеговина)',\n                CountryISO.BosniaAndHerzegovina,\n                '387'\n            ],\n            [\n                'Botswana',\n                CountryISO.Botswana,\n                '267'\n            ],\n            [\n                'Brazil (Brasil)',\n                CountryISO.Brazil,\n                '55'\n            ],\n            [\n                'British Indian Ocean Territory',\n                CountryISO.BritishIndianOceanTerritory,\n                '246'\n            ],\n            [\n                'British Virgin Islands',\n                'vg',\n                '1',\n                1,\n                [\n                    '284',\n                ]\n            ],\n            [\n                'Brunei',\n                CountryISO.Brunei,\n                '673'\n            ],\n            [\n                'Bulgaria (България)',\n                CountryISO.Bulgaria,\n                '359'\n            ],\n            [\n                'Burkina Faso',\n                CountryISO.BurkinaFaso,\n                '226'\n            ],\n            [\n                'Burundi (Uburundi)',\n                CountryISO.Burundi,\n                '257'\n            ],\n            [\n                'Cambodia (កម្ពុជា)',\n                CountryISO.Cambodia,\n                '855'\n            ],\n            [\n                'Cameroon (Cameroun)',\n                CountryISO.Cameroon,\n                '237'\n            ],\n            [\n                'Canada',\n                CountryISO.Canada,\n                '1',\n                1,\n                [\n                    '204', '226', '236', '249', '250', '289', '306', '343', '365', '387', '403', '416',\n                    '418', '431', '437', '438', '450', '506', '514', '519', '548', '579', '581', '587',\n                    '604', '613', '639', '647', '672', '705', '709', '742', '778', '780', '782', '807',\n                    '819', '825', '867', '873', '902', '905'\n                ]\n            ],\n            [\n                'Cape Verde (Kabu Verdi)',\n                CountryISO.CapeVerde,\n                '238'\n            ],\n            [\n                'Caribbean Netherlands',\n                CountryISO.CaribbeanNetherlands,\n                '599',\n                1\n            ],\n            [\n                'Cayman Islands',\n                'ky',\n                '1',\n                1,\n                [\n                    '345',\n                ]\n            ],\n            [\n                'Central African Republic (République centrafricaine)',\n                CountryISO.CentralAfricanRepublic,\n                '236'\n            ],\n            [\n                'Chad (Tchad)',\n                CountryISO.Chad,\n                '235'\n            ],\n            [\n                'Chile',\n                CountryISO.Chile,\n                '56'\n            ],\n            [\n                'China (中国)',\n                CountryISO.China,\n                '86'\n            ],\n            [\n                'Christmas Island',\n                CountryISO.ChristmasIsland,\n                '61',\n                2\n            ],\n            [\n                'Cocos (Keeling) Islands',\n                CountryISO.Cocos,\n                '61',\n                1\n            ],\n            [\n                'Colombia',\n                CountryISO.Colombia,\n                '57'\n            ],\n            [\n                'Comoros (‫جزر القمر‬‎)',\n                CountryISO.Comoros,\n                '269'\n            ],\n            [\n                'Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)',\n                CountryISO.CongoDRCJamhuriYaKidemokrasiaYaKongo,\n                '243'\n            ],\n            [\n                'Congo (Republic) (Congo-Brazzaville)',\n                CountryISO.CongoRepublicCongoBrazzaville,\n                '242'\n            ],\n            [\n                'Cook Islands',\n                CountryISO.CookIslands,\n                '682'\n            ],\n            [\n                'Costa Rica',\n                CountryISO.CostaRica,\n                '506'\n            ],\n            [\n                'Côte d’Ivoire',\n                CountryISO.CôteDIvoire,\n                '225'\n            ],\n            [\n                'Croatia (Hrvatska)',\n                CountryISO.Croatia,\n                '385'\n            ],\n            [\n                'Cuba',\n                CountryISO.Cuba,\n                '53'\n            ],\n            [\n                'Curaçao',\n                CountryISO.Curaçao,\n                '599',\n                0\n            ],\n            [\n                'Cyprus (Κύπρος)',\n                CountryISO.Cyprus,\n                '357'\n            ],\n            [\n                'Czech Republic (Česká republika)',\n                CountryISO.CzechRepublic,\n                '420'\n            ],\n            [\n                'Denmark (Danmark)',\n                CountryISO.Denmark,\n                '45'\n            ],\n            [\n                'Djibouti',\n                CountryISO.Djibouti,\n                '253'\n            ],\n            [\n                'Dominica',\n                CountryISO.Dominica,\n                '1767'\n            ],\n            [\n                'Dominican Republic (República Dominicana)',\n                CountryISO.DominicanRepublic,\n                '1',\n                2,\n                ['809', '829', '849']\n            ],\n            [\n                'Ecuador',\n                CountryISO.Ecuador,\n                '593'\n            ],\n            [\n                'Egypt (‫مصر‬‎)',\n                CountryISO.Egypt,\n                '20'\n            ],\n            [\n                'El Salvador',\n                CountryISO.ElSalvador,\n                '503'\n            ],\n            [\n                'Equatorial Guinea (Guinea Ecuatorial)',\n                CountryISO.EquatorialGuinea,\n                '240'\n            ],\n            [\n                'Eritrea',\n                CountryISO.Eritrea,\n                '291'\n            ],\n            [\n                'Estonia (Eesti)',\n                CountryISO.Estonia,\n                '372'\n            ],\n            [\n                'Ethiopia',\n                CountryISO.Ethiopia,\n                '251'\n            ],\n            [\n                'Falkland Islands (Islas Malvinas)',\n                CountryISO.FalklandIslands,\n                '500'\n            ],\n            [\n                'Faroe Islands (Føroyar)',\n                CountryISO.FaroeIslands,\n                '298'\n            ],\n            [\n                'Fiji',\n                CountryISO.Fiji,\n                '679'\n            ],\n            [\n                'Finland (Suomi)',\n                CountryISO.Finland,\n                '358',\n                0\n            ],\n            [\n                'France',\n                CountryISO.France,\n                '33'\n            ],\n            [\n                'French Guiana (Guyane française)',\n                CountryISO.FrenchGuiana,\n                '594'\n            ],\n            [\n                'French Polynesia (Polynésie française)',\n                CountryISO.FrenchPolynesia,\n                '689'\n            ],\n            [\n                'Gabon',\n                CountryISO.Gabon,\n                '241'\n            ],\n            [\n                'Gambia',\n                CountryISO.Gambia,\n                '220'\n            ],\n            [\n                'Georgia (საქართველო)',\n                CountryISO.Georgia,\n                '995'\n            ],\n            [\n                'Germany (Deutschland)',\n                CountryISO.Germany,\n                '49'\n            ],\n            [\n                'Ghana (Gaana)',\n                CountryISO.Ghana,\n                '233'\n            ],\n            [\n                'Gibraltar',\n                CountryISO.Gibraltar,\n                '350'\n            ],\n            [\n                'Greece (Ελλάδα)',\n                CountryISO.Greece,\n                '30'\n            ],\n            [\n                'Greenland (Kalaallit Nunaat)',\n                CountryISO.Greenland,\n                '299'\n            ],\n            [\n                'Grenada',\n                CountryISO.Grenada,\n                '1473'\n            ],\n            [\n                'Guadeloupe',\n                CountryISO.Guadeloupe,\n                '590',\n                0\n            ],\n            [\n                'Guam',\n                'gu',\n                '1',\n                1,\n                [\n                    '671',\n                ]\n            ],\n            [\n                'Guatemala',\n                CountryISO.Guatemala,\n                '502'\n            ],\n            [\n                'Guernsey',\n                CountryISO.Guernsey,\n                '44',\n                1,\n                [1481]\n            ],\n            [\n                'Guinea (Guinée)',\n                CountryISO.Guinea,\n                '224'\n            ],\n            [\n                'Guinea-Bissau (Guiné Bissau)',\n                CountryISO.GuineaBissau,\n                '245'\n            ],\n            [\n                'Guyana',\n                CountryISO.Guyana,\n                '592'\n            ],\n            [\n                'Haiti',\n                CountryISO.Haiti,\n                '509'\n            ],\n            [\n                'Honduras',\n                CountryISO.Honduras,\n                '504'\n            ],\n            [\n                'Hong Kong (香港)',\n                CountryISO.HongKong,\n                '852'\n            ],\n            [\n                'Hungary (Magyarország)',\n                CountryISO.Hungary,\n                '36'\n            ],\n            [\n                'Iceland (Ísland)',\n                CountryISO.Iceland,\n                '354'\n            ],\n            [\n                'India (भारत)',\n                CountryISO.India,\n                '91'\n            ],\n            [\n                'Indonesia',\n                CountryISO.Indonesia,\n                '62'\n            ],\n            [\n                'Iran (‫ایران‬‎)',\n                CountryISO.Iran,\n                '98'\n            ],\n            [\n                'Iraq (‫العراق‬‎)',\n                CountryISO.Iraq,\n                '964'\n            ],\n            [\n                'Ireland',\n                CountryISO.Ireland,\n                '353'\n            ],\n            [\n                'Isle of Man',\n                CountryISO.IsleOfMan,\n                '44',\n                2,\n                [1624]\n            ],\n            [\n                'Israel (‫ישראל‬‎)',\n                CountryISO.Israel,\n                '972'\n            ],\n            [\n                'Italy (Italia)',\n                CountryISO.Italy,\n                '39',\n                0\n            ],\n            [\n                'Jamaica',\n                'jm',\n                '1',\n                1,\n                [\n                    '876',\n                ]\n            ],\n            [\n                'Japan (日本)',\n                CountryISO.Japan,\n                '81'\n            ],\n            [\n                'Jersey',\n                CountryISO.Jersey,\n                '44',\n                3,\n                [1534]\n            ],\n            [\n                'Jordan (‫الأردن‬‎)',\n                CountryISO.Jordan,\n                '962'\n            ],\n            [\n                'Kazakhstan (Казахстан)',\n                CountryISO.Kazakhstan,\n                '7',\n                1\n            ],\n            [\n                'Kenya',\n                CountryISO.Kenya,\n                '254'\n            ],\n            [\n                'Kiribati',\n                CountryISO.Kiribati,\n                '686'\n            ],\n            [\n                'Kosovo',\n                CountryISO.Kosovo,\n                '383'\n            ],\n            [\n                'Kuwait (‫الكويت‬‎)',\n                CountryISO.Kuwait,\n                '965'\n            ],\n            [\n                'Kyrgyzstan (Кыргызстан)',\n                CountryISO.Kyrgyzstan,\n                '996'\n            ],\n            [\n                'Laos (ລາວ)',\n                CountryISO.Laos,\n                '856'\n            ],\n            [\n                'Latvia (Latvija)',\n                CountryISO.Latvia,\n                '371'\n            ],\n            [\n                'Lebanon (‫لبنان‬‎)',\n                CountryISO.Lebanon,\n                '961'\n            ],\n            [\n                'Lesotho',\n                CountryISO.Lesotho,\n                '266'\n            ],\n            [\n                'Liberia',\n                CountryISO.Liberia,\n                '231'\n            ],\n            [\n                'Libya (‫ليبيا‬‎)',\n                CountryISO.Libya,\n                '218'\n            ],\n            [\n                'Liechtenstein',\n                CountryISO.Liechtenstein,\n                '423'\n            ],\n            [\n                'Lithuania (Lietuva)',\n                CountryISO.Lithuania,\n                '370'\n            ],\n            [\n                'Luxembourg',\n                CountryISO.Luxembourg,\n                '352'\n            ],\n            [\n                'Macau (澳門)',\n                CountryISO.Macau,\n                '853'\n            ],\n            [\n                'Macedonia (FYROM) (Македонија)',\n                CountryISO.Macedonia,\n                '389'\n            ],\n            [\n                'Madagascar (Madagasikara)',\n                CountryISO.Madagascar,\n                '261'\n            ],\n            [\n                'Malawi',\n                CountryISO.Malawi,\n                '265'\n            ],\n            [\n                'Malaysia',\n                CountryISO.Malaysia,\n                '60'\n            ],\n            [\n                'Maldives',\n                CountryISO.Maldives,\n                '960'\n            ],\n            [\n                'Mali',\n                CountryISO.Mali,\n                '223'\n            ],\n            [\n                'Malta',\n                CountryISO.Malta,\n                '356'\n            ],\n            [\n                'Marshall Islands',\n                CountryISO.MarshallIslands,\n                '692'\n            ],\n            [\n                'Martinique',\n                CountryISO.Martinique,\n                '596'\n            ],\n            [\n                'Mauritania (‫موريتانيا‬‎)',\n                CountryISO.Mauritania,\n                '222'\n            ],\n            [\n                'Mauritius (Moris)',\n                CountryISO.Mauritius,\n                '230'\n            ],\n            [\n                'Mayotte',\n                CountryISO.Mayotte,\n                '262',\n                1\n            ],\n            [\n                'Mexico (México)',\n                CountryISO.Mexico,\n                '52'\n            ],\n            [\n                'Micronesia',\n                CountryISO.Micronesia,\n                '691'\n            ],\n            [\n                'Moldova (Republica Moldova)',\n                CountryISO.Moldova,\n                '373'\n            ],\n            [\n                'Monaco',\n                CountryISO.Monaco,\n                '377'\n            ],\n            [\n                'Mongolia (Монгол)',\n                CountryISO.Mongolia,\n                '976'\n            ],\n            [\n                'Montenegro (Crna Gora)',\n                CountryISO.Montenegro,\n                '382'\n            ],\n            [\n                'Montserrat',\n                'ms',\n                '1',\n                1,\n                [\n                    '664',\n                ]\n            ],\n            [\n                'Morocco (‫المغرب‬‎)',\n                CountryISO.Morocco,\n                '212',\n                0\n            ],\n            [\n                'Mozambique (Moçambique)',\n                CountryISO.Mozambique,\n                '258'\n            ],\n            [\n                'Myanmar (Burma) (မြန်မာ)',\n                CountryISO.Myanmar,\n                '95'\n            ],\n            [\n                'Namibia (Namibië)',\n                CountryISO.Namibia,\n                '264'\n            ],\n            [\n                'Nauru',\n                CountryISO.Nauru,\n                '674'\n            ],\n            [\n                'Nepal (नेपाल)',\n                CountryISO.Nepal,\n                '977'\n            ],\n            [\n                'Netherlands (Nederland)',\n                CountryISO.Netherlands,\n                '31'\n            ],\n            [\n                'New Caledonia (Nouvelle-Calédonie)',\n                CountryISO.NewCaledonia,\n                '687'\n            ],\n            [\n                'New Zealand',\n                CountryISO.NewZealand,\n                '64'\n            ],\n            [\n                'Nicaragua',\n                CountryISO.Nicaragua,\n                '505'\n            ],\n            [\n                'Niger (Nijar)',\n                CountryISO.Niger,\n                '227'\n            ],\n            [\n                'Nigeria',\n                CountryISO.Nigeria,\n                '234'\n            ],\n            [\n                'Niue',\n                CountryISO.Niue,\n                '683'\n            ],\n            [\n                'Norfolk Island',\n                CountryISO.NorfolkIsland,\n                '672'\n            ],\n            [\n                'North Korea (조선 민주주의 인민 공화국)',\n                CountryISO.NorthKorea,\n                '850'\n            ],\n            [\n                'Northern Mariana Islands',\n                CountryISO.NorthernMarianaIslands,\n                '1670'\n            ],\n            [\n                'Norway (Norge)',\n                CountryISO.Norway,\n                '47',\n                0\n            ],\n            [\n                'Oman (‫عُمان‬‎)',\n                CountryISO.Oman,\n                '968'\n            ],\n            [\n                'Pakistan (‫پاکستان‬‎)',\n                CountryISO.Pakistan,\n                '92'\n            ],\n            [\n                'Palau',\n                CountryISO.Palau,\n                '680'\n            ],\n            [\n                'Palestine (‫فلسطين‬‎)',\n                CountryISO.Palestine,\n                '970'\n            ],\n            [\n                'Panama (Panamá)',\n                CountryISO.Panama,\n                '507'\n            ],\n            [\n                'Papua New Guinea',\n                CountryISO.PapuaNewGuinea,\n                '675'\n            ],\n            [\n                'Paraguay',\n                CountryISO.Paraguay,\n                '595'\n            ],\n            [\n                'Peru (Perú)',\n                CountryISO.Peru,\n                '51'\n            ],\n            [\n                'Philippines',\n                CountryISO.Philippines,\n                '63'\n            ],\n            [\n                'Poland (Polska)',\n                CountryISO.Poland,\n                '48'\n            ],\n            [\n                'Portugal',\n                CountryISO.Portugal,\n                '351'\n            ],\n            [\n                'Puerto Rico',\n                CountryISO.PuertoRico,\n                '1',\n                3,\n                ['787', '939']\n            ],\n            [\n                'Qatar (‫قطر‬‎)',\n                CountryISO.Qatar,\n                '974'\n            ],\n            [\n                'Réunion (La Réunion)',\n                CountryISO.Réunion,\n                '262',\n                0\n            ],\n            [\n                'Romania (România)',\n                CountryISO.Romania,\n                '40'\n            ],\n            [\n                'Russia (Россия)',\n                CountryISO.Russia,\n                '7',\n                0\n            ],\n            [\n                'Rwanda',\n                CountryISO.Rwanda,\n                '250'\n            ],\n            [\n                'Saint Barthélemy (Saint-Barthélemy)',\n                CountryISO.SaintBarthélemy,\n                '590',\n                1\n            ],\n            [\n                'Saint Helena',\n                CountryISO.SaintHelena,\n                '290'\n            ],\n            [\n                'Saint Kitts and Nevis',\n                CountryISO.SaintKittsAndNevis,\n                '1869'\n            ],\n            [\n                'Saint Lucia',\n                'lc',\n                '1',\n                1,\n                [\n                    '758',\n                ]\n            ],\n            [\n                'Saint Martin (Saint-Martin (partie française))',\n                CountryISO.SaintMartin,\n                '590',\n                2\n            ],\n            [\n                'Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)',\n                CountryISO.SaintPierreAndMiquelon,\n                '508'\n            ],\n            [\n                'Saint Vincent and the Grenadines',\n                'vc',\n                '1',\n                1,\n                [\n                    '784',\n                ]\n            ],\n            [\n                'Samoa',\n                CountryISO.Samoa,\n                '685'\n            ],\n            [\n                'San Marino',\n                CountryISO.SanMarino,\n                '378'\n            ],\n            [\n                'São Tomé and Príncipe (São Tomé e Príncipe)',\n                CountryISO.SãoToméAndPríncipe,\n                '239'\n            ],\n            [\n                'Saudi Arabia (‫المملكة العربية السعودية‬‎)',\n                CountryISO.SaudiArabia,\n                '966'\n            ],\n            [\n                'Senegal (Sénégal)',\n                CountryISO.Senegal,\n                '221'\n            ],\n            [\n                'Serbia (Србија)',\n                CountryISO.Serbia,\n                '381'\n            ],\n            [\n                'Seychelles',\n                CountryISO.Seychelles,\n                '248'\n            ],\n            [\n                'Sierra Leone',\n                CountryISO.SierraLeone,\n                '232'\n            ],\n            [\n                'Singapore',\n                CountryISO.Singapore,\n                '65'\n            ],\n            [\n                'Sint Maarten',\n                'sx',\n                '1',\n                1,\n                [\n                    '721',\n                ]\n            ],\n            [\n                'Slovakia (Slovensko)',\n                CountryISO.Slovakia,\n                '421'\n            ],\n            [\n                'Slovenia (Slovenija)',\n                CountryISO.Slovenia,\n                '386'\n            ],\n            [\n                'Solomon Islands',\n                CountryISO.SolomonIslands,\n                '677'\n            ],\n            [\n                'Somalia (Soomaaliya)',\n                CountryISO.Somalia,\n                '252'\n            ],\n            [\n                'South Africa',\n                CountryISO.SouthAfrica,\n                '27'\n            ],\n            [\n                'South Korea (대한민국)',\n                CountryISO.SouthKorea,\n                '82'\n            ],\n            [\n                'South Sudan (‫جنوب السودان‬‎)',\n                CountryISO.SouthSudan,\n                '211'\n            ],\n            [\n                'Spain (España)',\n                CountryISO.Spain,\n                '34'\n            ],\n            [\n                'Sri Lanka (ශ්‍රී ලංකාව)',\n                CountryISO.SriLanka,\n                '94'\n            ],\n            [\n                'Sudan (‫السودان‬‎)',\n                CountryISO.Sudan,\n                '249'\n            ],\n            [\n                'Suriname',\n                CountryISO.Suriname,\n                '597'\n            ],\n            [\n                'Svalbard and Jan Mayen',\n                CountryISO.SvalbardAndJanMayen,\n                '47',\n                1\n            ],\n            [\n                'Swaziland',\n                CountryISO.Swaziland,\n                '268'\n            ],\n            [\n                'Sweden (Sverige)',\n                CountryISO.Sweden,\n                '46'\n            ],\n            [\n                'Switzerland (Schweiz)',\n                CountryISO.Switzerland,\n                '41'\n            ],\n            [\n                'Syria (‫سوريا‬‎)',\n                CountryISO.Syria,\n                '963'\n            ],\n            [\n                'Taiwan (台灣)',\n                CountryISO.Taiwan,\n                '886'\n            ],\n            [\n                'Tajikistan',\n                CountryISO.Tajikistan,\n                '992'\n            ],\n            [\n                'Tanzania',\n                CountryISO.Tanzania,\n                '255'\n            ],\n            [\n                'Thailand (ไทย)',\n                CountryISO.Thailand,\n                '66'\n            ],\n            [\n                'Timor-Leste',\n                CountryISO.TimorLeste,\n                '670'\n            ],\n            [\n                'Togo',\n                CountryISO.Togo,\n                '228'\n            ],\n            [\n                'Tokelau',\n                CountryISO.Tokelau,\n                '690'\n            ],\n            [\n                'Tonga',\n                CountryISO.Tonga,\n                '676'\n            ],\n            [\n                'Trinidad and Tobago',\n                'tt',\n                '1',\n                1,\n                [\n                    '868',\n                ]\n            ],\n            [\n                'Tunisia (‫تونس‬‎)',\n                CountryISO.Tunisia,\n                '216'\n            ],\n            [\n                'Turkey (Türkiye)',\n                CountryISO.Turkey,\n                '90'\n            ],\n            [\n                'Turkmenistan',\n                CountryISO.Turkmenistan,\n                '993'\n            ],\n            [\n                'Turks and Caicos Islands',\n                CountryISO.TurksAndCaicosIslands,\n                '1649'\n            ],\n            [\n                'Tuvalu',\n                CountryISO.Tuvalu,\n                '688'\n            ],\n            [\n                'U.S. Virgin Islands',\n                'vi',\n                '1',\n                1,\n                [\n                    '340',\n                ]\n            ],\n            [\n                'Uganda',\n                CountryISO.Uganda,\n                '256'\n            ],\n            [\n                'Ukraine (Україна)',\n                CountryISO.Ukraine,\n                '380'\n            ],\n            [\n                'United Arab Emirates (‫الإمارات العربية المتحدة‬‎)',\n                CountryISO.UnitedArabEmirates,\n                '971'\n            ],\n            [\n                'United Kingdom',\n                CountryISO.UnitedKingdom,\n                '44',\n                0\n            ],\n            [\n                'United States',\n                CountryISO.UnitedStates,\n                '1',\n                0\n            ],\n            [\n                'Uruguay',\n                CountryISO.Uruguay,\n                '598'\n            ],\n            [\n                'Uzbekistan (Oʻzbekiston)',\n                CountryISO.Uzbekistan,\n                '998'\n            ],\n            [\n                'Vanuatu',\n                CountryISO.Vanuatu,\n                '678'\n            ],\n            [\n                'Vatican City (Città del Vaticano)',\n                CountryISO.VaticanCity,\n                '39',\n                1\n            ],\n            [\n                'Venezuela',\n                CountryISO.Venezuela,\n                '58'\n            ],\n            [\n                'Vietnam (Việt Nam)',\n                CountryISO.Vietnam,\n                '84'\n            ],\n            [\n                'Wallis and Futuna',\n                CountryISO.WallisAndFutuna,\n                '681'\n            ],\n            [\n                'Western Sahara (‫الصحراء الغربية‬‎)',\n                CountryISO.WesternSahara,\n                '212',\n                1\n            ],\n            [\n                'Yemen (‫اليمن‬‎)',\n                CountryISO.Yemen,\n                '967'\n            ],\n            [\n                'Zambia',\n                CountryISO.Zambia,\n                '260'\n            ],\n            [\n                'Zimbabwe',\n                CountryISO.Zimbabwe,\n                '263'\n            ],\n            [\n                'Åland Islands',\n                CountryISO.ÅlandIslands,\n                '358',\n                1\n            ]\n        ];\n    }\n}\nCountryCode.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: CountryCode, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nCountryCode.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: CountryCode });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: CountryCode, decorators: [{\n            type: Injectable\n        }] });\n\nvar SearchCountryField;\n(function (SearchCountryField) {\n    SearchCountryField[\"DialCode\"] = \"dialCode\";\n    SearchCountryField[\"Iso2\"] = \"iso2\";\n    SearchCountryField[\"Name\"] = \"name\";\n    SearchCountryField[\"All\"] = \"all\";\n})(SearchCountryField || (SearchCountryField = {}));\n\n/*\nWe use \"control: any\" instead of \"control: FormControl\" to silence:\n\"Property 'nativeElement' does not exist on type 'FormControl'\".\nThis happens because I've expanded control with nativeElement via\n'NativeElementInjectorDirective' to get an access to the element.\nMore about this approach and reasons for this:\nhttps://github.com/angular/angular/issues/18025\nhttps://stackoverflow.com/a/54075119/1617590\n*/\nconst phoneNumberValidator = (control) => {\n    if (!control.value) {\n        return;\n    }\n    // Find <input> inside injected nativeElement and get its \"id\".\n    const el = control.nativeElement;\n    const inputBox = el\n        ? el.querySelector('input[type=\"tel\"]')\n        : undefined;\n    if (inputBox) {\n        const id = inputBox.id;\n        const isCheckValidation = inputBox.getAttribute('validation');\n        if (isCheckValidation === 'true') {\n            const isRequired = control.errors && control.errors.required === true;\n            const error = { validatePhoneNumber: { valid: false } };\n            inputBox.setCustomValidity('Invalid field.');\n            let number;\n            try {\n                number = lpn.PhoneNumberUtil.getInstance().parse(control.value.number, control.value.countryCode);\n            }\n            catch (e) {\n                if (isRequired) {\n                    return error;\n                }\n                else {\n                    inputBox.setCustomValidity('');\n                }\n            }\n            if (control.value) {\n                // @ts-ignore\n                if (!number) {\n                    return error;\n                }\n                else {\n                    if (!lpn.PhoneNumberUtil.getInstance().isValidNumberForRegion(number, control.value.countryCode)) {\n                        return error;\n                    }\n                    else {\n                        inputBox.setCustomValidity('');\n                    }\n                }\n            }\n        }\n        else if (isCheckValidation === 'false') {\n            inputBox.setCustomValidity('');\n            control.clearValidators();\n        }\n    }\n    return;\n};\n\nvar PhoneNumberFormat;\n(function (PhoneNumberFormat) {\n    PhoneNumberFormat[\"International\"] = \"INTERNATIONAL\";\n    PhoneNumberFormat[\"National\"] = \"NATIONAL\";\n})(PhoneNumberFormat || (PhoneNumberFormat = {}));\n\n/*\n\"Property 'nativeElement' does not exist on type 'FormControl'\".\n'NativeElementInjectorDirective' injects nativeElement to each control,\nso we can access it from inside validator for example.\nMore about this approach and reasons for this:\nhttps://github.com/angular/angular/issues/18025\nhttps://stackoverflow.com/a/54075119/1617590\n*/\nclass NativeElementInjectorDirective {\n    constructor(controlDir, host) {\n        this.controlDir = controlDir;\n        this.host = host;\n    }\n    ngOnInit() {\n        if (this.controlDir.control) {\n            // @ts-ignore\n            this.controlDir.control['nativeElement'] = this.host.nativeElement;\n        }\n    }\n}\nNativeElementInjectorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: NativeElementInjectorDirective, deps: [{ token: i4.NgControl }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nNativeElementInjectorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.1\", type: NativeElementInjectorDirective, selector: \"[ngModel], [formControl], [formControlName]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: NativeElementInjectorDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // tslint:disable-next-line: directive-selector\n                    selector: '[ngModel], [formControl], [formControlName]',\n                }]\n        }], ctorParameters: function () { return [{ type: i4.NgControl }, { type: i0.ElementRef }]; } });\n\nclass NgxIntlTelInputComponent {\n    constructor(countryCodeData) {\n        this.countryCodeData = countryCodeData;\n        this.value = '';\n        this.preferredCountries = [];\n        this.enablePlaceholder = true;\n        this.numberFormat = PhoneNumberFormat.International;\n        this.cssClass = 'form-control';\n        this.onlyCountries = [];\n        this.enableAutoCountrySelect = true;\n        this.searchCountryFlag = false;\n        this.searchCountryField = [SearchCountryField.All];\n        this.searchCountryPlaceholder = 'Search Country';\n        this.selectFirstCountry = true;\n        this.phoneValidation = true;\n        this.inputId = 'phone';\n        this.separateDialCode = false;\n        this.countryChange = new EventEmitter();\n        this.selectedCountry = {\n            areaCodes: undefined,\n            dialCode: '',\n            htmlId: '',\n            flagClass: '',\n            iso2: '',\n            name: '',\n            placeHolder: '',\n            priority: 0,\n        };\n        this.phoneNumber = '';\n        this.allCountries = [];\n        this.preferredCountriesInDropDown = [];\n        // Has to be 'any' to prevent a need to install @types/google-libphonenumber by the package user...\n        this.phoneUtil = lpn.PhoneNumberUtil.getInstance();\n        this.disabled = false;\n        this.errors = ['Phone number is required.'];\n        this.countrySearchText = '';\n        this.onTouched = () => { };\n        this.propagateChange = (_) => { };\n        // If this is not set, ngx-bootstrap will try to use the bs3 CSS (which is not what we've embedded) and will\n        // Add the wrong classes and such\n        setTheme('bs4');\n    }\n    ngOnInit() {\n        this.init();\n    }\n    ngOnChanges(changes) {\n        const selectedISO = changes['selectedCountryISO'];\n        if (this.allCountries &&\n            selectedISO &&\n            selectedISO.currentValue !== selectedISO.previousValue) {\n            this.updateSelectedCountry();\n        }\n        if (changes['preferredCountries']) {\n            this.updatePreferredCountries();\n        }\n        this.checkSeparateDialCodeStyle();\n    }\n    /*\n        This is a wrapper method to avoid calling this.ngOnInit() in writeValue().\n        Ref: http://codelyzer.com/rules/no-life-cycle-call/\n    */\n    init() {\n        this.fetchCountryData();\n        if (this.preferredCountries.length) {\n            this.updatePreferredCountries();\n        }\n        if (this.onlyCountries.length) {\n            this.allCountries = this.allCountries.filter((c) => this.onlyCountries.includes(c.iso2));\n        }\n        if (this.selectFirstCountry) {\n            if (this.preferredCountriesInDropDown.length) {\n                this.setSelectedCountry(this.preferredCountriesInDropDown[0]);\n            }\n            else {\n                this.setSelectedCountry(this.allCountries[0]);\n            }\n        }\n        this.updateSelectedCountry();\n        this.checkSeparateDialCodeStyle();\n    }\n    setSelectedCountry(country) {\n        this.selectedCountry = country;\n        this.countryChange.emit(country);\n    }\n    /**\n     * Search country based on country name, iso2, dialCode or all of them.\n     */\n    searchCountry() {\n        if (!this.countrySearchText) {\n            this.countryList.nativeElement\n                .querySelector('.iti__country-list li')\n                .scrollIntoView({\n                behavior: 'smooth',\n                block: 'nearest',\n                inline: 'nearest',\n            });\n            return;\n        }\n        const countrySearchTextLower = this.countrySearchText.toLowerCase();\n        // @ts-ignore\n        const country = this.allCountries.filter((c) => {\n            if (this.searchCountryField.indexOf(SearchCountryField.All) > -1) {\n                // Search in all fields\n                if (c.iso2.toLowerCase().startsWith(countrySearchTextLower)) {\n                    return c;\n                }\n                if (c.name.toLowerCase().startsWith(countrySearchTextLower)) {\n                    return c;\n                }\n                if (c.dialCode.startsWith(this.countrySearchText)) {\n                    return c;\n                }\n            }\n            else {\n                // Or search by specific SearchCountryField(s)\n                if (this.searchCountryField.indexOf(SearchCountryField.Iso2) > -1) {\n                    if (c.iso2.toLowerCase().startsWith(countrySearchTextLower)) {\n                        return c;\n                    }\n                }\n                if (this.searchCountryField.indexOf(SearchCountryField.Name) > -1) {\n                    if (c.name.toLowerCase().startsWith(countrySearchTextLower)) {\n                        return c;\n                    }\n                }\n                if (this.searchCountryField.indexOf(SearchCountryField.DialCode) > -1) {\n                    if (c.dialCode.startsWith(this.countrySearchText)) {\n                        return c;\n                    }\n                }\n            }\n        });\n        if (country.length > 0) {\n            const el = this.countryList.nativeElement.querySelector('#' + country[0].htmlId);\n            if (el) {\n                el.scrollIntoView({\n                    behavior: 'smooth',\n                    block: 'nearest',\n                    inline: 'nearest',\n                });\n            }\n        }\n        this.checkSeparateDialCodeStyle();\n    }\n    onPhoneNumberChange() {\n        let countryCode;\n        // Handle the case where the user sets the value programatically based on a persisted ChangeData obj.\n        if (this.phoneNumber && typeof this.phoneNumber === 'object') {\n            const numberObj = this.phoneNumber;\n            this.phoneNumber = numberObj.number;\n            countryCode = numberObj.countryCode;\n        }\n        this.value = this.phoneNumber;\n        countryCode = countryCode || this.selectedCountry.iso2;\n        // @ts-ignore\n        const number = this.getParsedNumber(this.phoneNumber, countryCode);\n        // auto select country based on the extension (and areaCode if needed) (e.g select Canada if number starts with +1 416)\n        if (this.enableAutoCountrySelect) {\n            countryCode =\n                number && number.getCountryCode()\n                    // @ts-ignore\n                    ? this.getCountryIsoCode(number.getCountryCode(), number)\n                    : this.selectedCountry.iso2;\n            if (countryCode && countryCode !== this.selectedCountry.iso2) {\n                const newCountry = this.allCountries\n                    .sort((a, b) => {\n                    return a.priority - b.priority;\n                })\n                    .find((c) => c.iso2 === countryCode);\n                if (newCountry) {\n                    this.selectedCountry = newCountry;\n                }\n            }\n        }\n        countryCode = countryCode ? countryCode : this.selectedCountry.iso2;\n        this.checkSeparateDialCodeStyle();\n        if (!this.value) {\n            // Reason: avoid https://stackoverflow.com/a/54358133/1617590\n            // tslint:disable-next-line: no-null-keyword\n            // @ts-ignore\n            this.propagateChange(null);\n        }\n        else {\n            const intlNo = number\n                ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.INTERNATIONAL)\n                : '';\n            // parse phoneNumber if separate dial code is needed\n            if (this.separateDialCode && intlNo) {\n                this.value = this.removeDialCode(intlNo);\n            }\n            this.propagateChange({\n                number: this.value,\n                internationalNumber: intlNo,\n                nationalNumber: number\n                    ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.NATIONAL)\n                    : '',\n                e164Number: number\n                    ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.E164)\n                    : '',\n                countryCode: countryCode.toUpperCase(),\n                dialCode: '+' + this.selectedCountry.dialCode,\n            });\n        }\n    }\n    onCountrySelect(country, el) {\n        this.setSelectedCountry(country);\n        this.checkSeparateDialCodeStyle();\n        if (this.phoneNumber && this.phoneNumber.length > 0) {\n            this.value = this.phoneNumber;\n            const number = this.getParsedNumber(this.phoneNumber, this.selectedCountry.iso2);\n            const intlNo = number\n                ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.INTERNATIONAL)\n                : '';\n            // parse phoneNumber if separate dial code is needed\n            if (this.separateDialCode && intlNo) {\n                this.value = this.removeDialCode(intlNo);\n            }\n            this.propagateChange({\n                number: this.value,\n                internationalNumber: intlNo,\n                nationalNumber: number\n                    ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.NATIONAL)\n                    : '',\n                e164Number: number\n                    ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.E164)\n                    : '',\n                countryCode: this.selectedCountry.iso2.toUpperCase(),\n                dialCode: '+' + this.selectedCountry.dialCode,\n            });\n        }\n        else {\n            // Reason: avoid https://stackoverflow.com/a/54358133/1617590\n            // tslint:disable-next-line: no-null-keyword\n            // @ts-ignore\n            this.propagateChange(null);\n        }\n        el.focus();\n    }\n    onInputKeyPress(event) {\n        const allowedChars = /[0-9\\+\\-\\(\\)\\ ]/;\n        const allowedCtrlChars = /[axcv]/; // Allows copy-pasting\n        const allowedOtherKeys = [\n            'ArrowLeft',\n            'ArrowUp',\n            'ArrowRight',\n            'ArrowDown',\n            'Home',\n            'End',\n            'Insert',\n            'Delete',\n            'Backspace',\n        ];\n        if (!allowedChars.test(event.key) &&\n            !(event.ctrlKey && allowedCtrlChars.test(event.key)) &&\n            !allowedOtherKeys.includes(event.key)) {\n            event.preventDefault();\n        }\n    }\n    registerOnChange(fn) {\n        this.propagateChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    writeValue(obj) {\n        if (obj === undefined) {\n            this.init();\n        }\n        this.phoneNumber = obj;\n        setTimeout(() => {\n            this.onPhoneNumberChange();\n        }, 1);\n    }\n    resolvePlaceholder() {\n        let placeholder = '';\n        if (this.customPlaceholder) {\n            placeholder = this.customPlaceholder;\n        }\n        else if (this.selectedCountry.placeHolder) {\n            placeholder = this.selectedCountry.placeHolder;\n            if (this.separateDialCode) {\n                placeholder = this.removeDialCode(placeholder);\n            }\n        }\n        return placeholder;\n    }\n    /* --------------------------------- Helpers -------------------------------- */\n    /**\n     * Returns parse PhoneNumber object.\n     * @param phoneNumber string\n     * @param countryCode string\n     */\n    getParsedNumber(phoneNumber, countryCode) {\n        let number;\n        try {\n            number = this.phoneUtil.parse(phoneNumber, countryCode.toUpperCase());\n        }\n        catch (e) { }\n        // @ts-ignore\n        return number;\n    }\n    /**\n     * Adjusts input alignment based on the dial code presentation style.\n     */\n    checkSeparateDialCodeStyle() {\n        if (this.separateDialCode && this.selectedCountry) {\n            const cntryCd = this.selectedCountry.dialCode;\n            this.separateDialCodeClass =\n                'separate-dial-code iti-sdc-' + (cntryCd.length + 1);\n        }\n        else {\n            this.separateDialCodeClass = '';\n        }\n    }\n    /**\n     * Cleans dialcode from phone number string.\n     * @param phoneNumber string\n     */\n    removeDialCode(phoneNumber) {\n        const number = this.getParsedNumber(phoneNumber, this.selectedCountry.iso2);\n        phoneNumber = this.phoneUtil.format(number, lpn.PhoneNumberFormat[this.numberFormat]);\n        if (phoneNumber.startsWith('+') && this.separateDialCode) {\n            phoneNumber = phoneNumber.substr(phoneNumber.indexOf(' ') + 1);\n        }\n        return phoneNumber;\n    }\n    /**\n     * Sifts through all countries and returns iso code of the primary country\n     * based on the number provided.\n     * @param countryCode country code in number format\n     * @param number PhoneNumber object\n     */\n    getCountryIsoCode(countryCode, number) {\n        // Will use this to match area code from the first numbers\n        // @ts-ignore\n        const rawNumber = number['values_']['2'].toString();\n        // List of all countries with countryCode (can be more than one. e.x. US, CA, DO, PR all have +1 countryCode)\n        const countries = this.allCountries.filter((c) => c.dialCode === countryCode.toString());\n        // Main country is the country, which has no areaCodes specified in country-code.ts file.\n        const mainCountry = countries.find((c) => c.areaCodes === undefined);\n        // Secondary countries are all countries, which have areaCodes specified in country-code.ts file.\n        const secondaryCountries = countries.filter((c) => c.areaCodes !== undefined);\n        let matchedCountry = mainCountry ? mainCountry.iso2 : undefined;\n        /*\n            Iterate over each secondary country and check if nationalNumber starts with any of areaCodes available.\n            If no matches found, fallback to the main country.\n        */\n        secondaryCountries.forEach((country) => {\n            // @ts-ignore\n            country.areaCodes.forEach((areaCode) => {\n                if (rawNumber.startsWith(areaCode)) {\n                    matchedCountry = country.iso2;\n                }\n            });\n        });\n        return matchedCountry;\n    }\n    /**\n     * Gets formatted example phone number from phoneUtil.\n     * @param countryCode string\n     */\n    getPhoneNumberPlaceHolder(countryCode) {\n        try {\n            return this.phoneUtil.format(this.phoneUtil.getExampleNumber(countryCode), lpn.PhoneNumberFormat[this.numberFormat]);\n        }\n        catch (e) {\n            // @ts-ignore\n            return e;\n        }\n    }\n    /**\n     * Clearing the list to avoid duplicates (https://github.com/webcat12345/ngx-intl-tel-input/issues/248)\n     */\n    fetchCountryData() {\n        this.allCountries = [];\n        this.countryCodeData.allCountries.forEach((c) => {\n            const country = {\n                name: c[0].toString(),\n                iso2: c[1].toString(),\n                dialCode: c[2].toString(),\n                priority: +c[3] || 0,\n                areaCodes: c[4] || undefined,\n                htmlId: `iti-0__item-${c[1].toString()}`,\n                flagClass: `iti__${c[1].toString().toLocaleLowerCase()}`,\n                placeHolder: '',\n            };\n            if (this.enablePlaceholder) {\n                country.placeHolder = this.getPhoneNumberPlaceHolder(country.iso2.toUpperCase());\n            }\n            this.allCountries.push(country);\n        });\n    }\n    /**\n     * Populates preferredCountriesInDropDown with prefferred countries.\n     */\n    updatePreferredCountries() {\n        if (this.preferredCountries.length) {\n            this.preferredCountriesInDropDown = [];\n            this.preferredCountries.forEach((iso2) => {\n                const preferredCountry = this.allCountries.filter((c) => {\n                    return c.iso2 === iso2;\n                });\n                this.preferredCountriesInDropDown.push(preferredCountry[0]);\n            });\n        }\n    }\n    /**\n     * Updates selectedCountry.\n     */\n    updateSelectedCountry() {\n        if (this.selectedCountryISO) {\n            // @ts-ignore\n            this.selectedCountry = this.allCountries.find((c) => {\n                return c.iso2.toLowerCase() === this.selectedCountryISO.toLowerCase();\n            });\n            if (this.selectedCountry) {\n                if (this.phoneNumber) {\n                    this.onPhoneNumberChange();\n                }\n                else {\n                    // Reason: avoid https://stackoverflow.com/a/54358133/1617590\n                    // tslint:disable-next-line: no-null-keyword\n                    // @ts-ignore\n                    this.propagateChange(null);\n                }\n            }\n        }\n    }\n}\nNgxIntlTelInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: NgxIntlTelInputComponent, deps: [{ token: CountryCode }], target: i0.ɵɵFactoryTarget.Component });\nNgxIntlTelInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.1\", type: NgxIntlTelInputComponent, selector: \"ngx-intl-tel-input\", inputs: { value: \"value\", preferredCountries: \"preferredCountries\", enablePlaceholder: \"enablePlaceholder\", customPlaceholder: \"customPlaceholder\", numberFormat: \"numberFormat\", cssClass: \"cssClass\", onlyCountries: \"onlyCountries\", enableAutoCountrySelect: \"enableAutoCountrySelect\", searchCountryFlag: \"searchCountryFlag\", searchCountryField: \"searchCountryField\", searchCountryPlaceholder: \"searchCountryPlaceholder\", maxLength: \"maxLength\", selectFirstCountry: \"selectFirstCountry\", selectedCountryISO: \"selectedCountryISO\", phoneValidation: \"phoneValidation\", inputId: \"inputId\", separateDialCode: \"separateDialCode\" }, outputs: { countryChange: \"countryChange\" }, providers: [\n        CountryCode,\n        {\n            provide: NG_VALUE_ACCESSOR,\n            // tslint:disable-next-line:no-forward-ref\n            useExisting: forwardRef(() => NgxIntlTelInputComponent),\n            multi: true,\n        },\n        {\n            provide: NG_VALIDATORS,\n            useValue: phoneNumberValidator,\n            multi: true,\n        },\n    ], viewQueries: [{ propertyName: \"countryList\", first: true, predicate: [\"countryList\"], descendants: true }], usesOnChanges: true, ngImport: i0, template: \"<div class=\\\"iti iti--allow-dropdown\\\"\\n\\t[ngClass]=\\\"separateDialCodeClass\\\">\\n\\t<div class=\\\"iti__flag-container\\\"\\n\\t\\tdropdown\\n\\t\\t[ngClass]=\\\"{'disabled': disabled}\\\"\\n\\t\\t[isDisabled]=\\\"disabled\\\">\\n\\t\\t<div class=\\\"iti__selected-flag dropdown-toggle\\\"\\n\\t\\t\\tdropdownToggle>\\n\\t\\t\\t<div class=\\\"iti__flag\\\"\\n\\t\\t\\t\\t[ngClass]=\\\"selectedCountry?.flagClass || ''\\\"></div>\\n\\t\\t\\t<div *ngIf=\\\"separateDialCode\\\"\\n\\t\\t\\t\\tclass=\\\"selected-dial-code\\\">+{{selectedCountry.dialCode}}</div>\\n\\t\\t\\t<div class=\\\"iti__arrow\\\"></div>\\n\\t\\t</div>\\n\\t\\t<div *dropdownMenu\\n\\t\\t\\tclass=\\\"dropdown-menu country-dropdown\\\">\\n\\t\\t\\t<div class=\\\"search-container\\\"\\n\\t\\t\\t\\t*ngIf=\\\"searchCountryFlag && searchCountryField\\\">\\n\\t\\t\\t\\t<input id=\\\"country-search-box\\\"\\n\\t\\t\\t\\t\\t[(ngModel)]=\\\"countrySearchText\\\"\\n\\t\\t\\t\\t\\t(keyup)=\\\"searchCountry()\\\"\\n\\t\\t\\t\\t\\t(click)=\\\"$event.stopPropagation()\\\"\\n\\t\\t\\t\\t\\t[placeholder]=\\\"searchCountryPlaceholder\\\"\\n\\t\\t\\t\\t\\tautofocus>\\n\\t\\t\\t</div>\\n\\t\\t\\t<ul class=\\\"iti__country-list\\\"\\n\\t\\t\\t\\t#countryList>\\n\\t\\t\\t\\t<li class=\\\"iti__country iti__preferred\\\"\\n\\t\\t\\t\\t\\t*ngFor=\\\"let country of preferredCountriesInDropDown\\\"\\n\\t\\t\\t\\t\\t(click)=\\\"onCountrySelect(country, focusable)\\\"\\n\\t\\t\\t\\t\\t[id]=\\\"country.htmlId+'-preferred'\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"iti__flag-box\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"iti__flag\\\"\\n\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"country.flagClass\\\"></div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<span class=\\\"iti__country-name\\\">{{country.name}}</span>\\n\\t\\t\\t\\t\\t<span class=\\\"iti__dial-code\\\">+{{country.dialCode}}</span>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t<li class=\\\"iti__divider\\\"\\n\\t\\t\\t\\t\\t*ngIf=\\\"preferredCountriesInDropDown?.length\\\"></li>\\n\\t\\t\\t\\t<li class=\\\"iti__country iti__standard\\\"\\n\\t\\t\\t\\t\\t*ngFor=\\\"let country of allCountries\\\"\\n\\t\\t\\t\\t\\t(click)=\\\"onCountrySelect(country, focusable)\\\"\\n\\t\\t\\t\\t\\t[id]=\\\"country.htmlId\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"iti__flag-box\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"iti__flag\\\"\\n\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"country.flagClass\\\"></div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<span class=\\\"iti__country-name\\\">{{country.name}}</span>\\n\\t\\t\\t\\t\\t<span class=\\\"iti__dial-code\\\">+{{country.dialCode}}</span>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t</ul>\\n\\t\\t</div>\\n\\t</div>\\n\\t<input type=\\\"tel\\\"\\n\\t\\t[id]=\\\"inputId\\\"\\n\\t\\tautocomplete=\\\"off\\\"\\n\\t\\t[ngClass]=\\\"cssClass\\\"\\n\\t\\t(blur)=\\\"onTouched()\\\"\\n\\t\\t(keypress)=\\\"onInputKeyPress($event)\\\"\\n\\t\\t[(ngModel)]=\\\"phoneNumber\\\"\\n\\t\\t(ngModelChange)=\\\"onPhoneNumberChange()\\\"\\n\\t\\t[disabled]=\\\"disabled\\\"\\n\\t\\t[placeholder]=\\\"resolvePlaceholder()\\\"\\n\\t\\t[attr.maxLength]=\\\"maxLength\\\"\\n\\t\\t[attr.validation]=\\\"phoneValidation\\\"\\n\\t\\t#focusable>\\n</div>\\n\", styles: [\".dropup,.dropright,.dropdown,.dropleft{position:relative}.dropdown-toggle{white-space:nowrap}.dropdown-toggle:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";border-top:.3em solid;border-right:.3em solid transparent;border-bottom:0;border-left:.3em solid transparent}.dropdown-toggle:empty:after{margin-left:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:10rem;padding:.5rem 0;margin:.125rem 0 0;font-size:1rem;color:#212529;text-align:left;list-style:none;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.15);border-radius:.25rem}.dropdown-menu-left{right:auto;left:0}.dropdown-menu-right{right:0;left:auto}@media (min-width: 576px){.dropdown-menu-sm-left{right:auto;left:0}.dropdown-menu-sm-right{right:0;left:auto}}@media (min-width: 768px){.dropdown-menu-md-left{right:auto;left:0}.dropdown-menu-md-right{right:0;left:auto}}@media (min-width: 992px){.dropdown-menu-lg-left{right:auto;left:0}.dropdown-menu-lg-right{right:0;left:auto}}@media (min-width: 1200px){.dropdown-menu-xl-left{right:auto;left:0}.dropdown-menu-xl-right{right:0;left:auto}}.dropup .dropdown-menu{top:auto;bottom:100%;margin-top:0;margin-bottom:.125rem}.dropup .dropdown-toggle:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";border-top:0;border-right:.3em solid transparent;border-bottom:.3em solid;border-left:.3em solid transparent}.dropup .dropdown-toggle:empty:after{margin-left:0}.dropright .dropdown-menu{top:0;right:auto;left:100%;margin-top:0;margin-left:.125rem}.dropright .dropdown-toggle:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";border-top:.3em solid transparent;border-right:0;border-bottom:.3em solid transparent;border-left:.3em solid}.dropright .dropdown-toggle:empty:after{margin-left:0}.dropright .dropdown-toggle:after{vertical-align:0}.dropleft .dropdown-menu{top:0;right:100%;left:auto;margin-top:0;margin-right:.125rem}.dropleft .dropdown-toggle:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\"}.dropleft .dropdown-toggle:after{display:none}.dropleft .dropdown-toggle:before{display:inline-block;margin-right:.255em;vertical-align:.255em;content:\\\"\\\";border-top:.3em solid transparent;border-right:.3em solid;border-bottom:.3em solid transparent}.dropleft .dropdown-toggle:empty:after{margin-left:0}.dropleft .dropdown-toggle:before{vertical-align:0}.dropdown-menu[x-placement^=top],.dropdown-menu[x-placement^=right],.dropdown-menu[x-placement^=bottom],.dropdown-menu[x-placement^=left]{right:auto;bottom:auto}.dropdown-divider{height:0;margin:.5rem 0;overflow:hidden;border-top:1px solid #e9ecef}.dropdown-item{display:block;width:100%;padding:.25rem 1.5rem;clear:both;font-weight:400;color:#212529;text-align:inherit;white-space:nowrap;background-color:transparent;border:0}.dropdown-item:hover,.dropdown-item:focus{color:#16181b;text-decoration:none;background-color:#f8f9fa}.dropdown-item.active,.dropdown-item:active{color:#fff;text-decoration:none;background-color:#007bff}.dropdown-item.disabled,.dropdown-item:disabled{color:#6c757d;pointer-events:none;background-color:transparent}.dropdown-menu.show{display:block}.dropdown-header{display:block;padding:.5rem 1.5rem;margin-bottom:0;font-size:.875rem;color:#6c757d;white-space:nowrap}.dropdown-item-text{display:block;padding:.25rem 1.5rem;color:#212529}\\n\", \"li.iti__country:hover{background-color:#0000000d}.iti__selected-flag.dropdown-toggle:after{content:none}.iti__flag-container.disabled{cursor:default!important}.iti.iti--allow-dropdown .flag-container.disabled:hover .iti__selected-flag{background:none}.country-dropdown{border:1px solid #ccc;width:-moz-fit-content;width:fit-content;padding:1px;border-collapse:collapse}.search-container{position:relative}.search-container input{width:100%;border:none;border-bottom:1px solid #ccc;padding-left:10px}.search-icon{position:absolute;z-index:2;width:25px;margin:1px 10px}.iti__country-list{position:relative;border:none}.iti input#country-search-box{padding-left:6px}.iti .selected-dial-code{margin-left:6px}.iti.separate-dial-code .iti__selected-flag,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-2 .iti__selected-flag,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-3 .iti__selected-flag,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-4 .iti__selected-flag{width:93px}.iti.separate-dial-code input,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-2 input,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-3 input,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-4 input{padding-left:98px}\\n\"], directives: [{ type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i3.BsDropdownDirective, selector: \"[bsDropdown],[dropdown]\", inputs: [\"autoClose\", \"isAnimated\", \"insideClick\", \"isDisabled\", \"isOpen\", \"placement\", \"triggers\", \"container\", \"dropup\"], outputs: [\"onShown\", \"onHidden\", \"isOpenChange\"], exportAs: [\"bs-dropdown\"] }, { type: i3.BsDropdownToggleDirective, selector: \"[bsDropdownToggle],[dropdownToggle]\", exportAs: [\"bs-dropdown-toggle\"] }, { type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.BsDropdownMenuDirective, selector: \"[bsDropdownMenu],[dropdownMenu]\", exportAs: [\"bs-dropdown-menu\"] }, { type: i4.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { type: i4.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { type: i4.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }, { type: NativeElementInjectorDirective, selector: \"[ngModel], [formControl], [formControlName]\" }, { type: i2.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: NgxIntlTelInputComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-intl-tel-input', providers: [\n                        CountryCode,\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            // tslint:disable-next-line:no-forward-ref\n                            useExisting: forwardRef(() => NgxIntlTelInputComponent),\n                            multi: true,\n                        },\n                        {\n                            provide: NG_VALIDATORS,\n                            useValue: phoneNumberValidator,\n                            multi: true,\n                        },\n                    ], template: \"<div class=\\\"iti iti--allow-dropdown\\\"\\n\\t[ngClass]=\\\"separateDialCodeClass\\\">\\n\\t<div class=\\\"iti__flag-container\\\"\\n\\t\\tdropdown\\n\\t\\t[ngClass]=\\\"{'disabled': disabled}\\\"\\n\\t\\t[isDisabled]=\\\"disabled\\\">\\n\\t\\t<div class=\\\"iti__selected-flag dropdown-toggle\\\"\\n\\t\\t\\tdropdownToggle>\\n\\t\\t\\t<div class=\\\"iti__flag\\\"\\n\\t\\t\\t\\t[ngClass]=\\\"selectedCountry?.flagClass || ''\\\"></div>\\n\\t\\t\\t<div *ngIf=\\\"separateDialCode\\\"\\n\\t\\t\\t\\tclass=\\\"selected-dial-code\\\">+{{selectedCountry.dialCode}}</div>\\n\\t\\t\\t<div class=\\\"iti__arrow\\\"></div>\\n\\t\\t</div>\\n\\t\\t<div *dropdownMenu\\n\\t\\t\\tclass=\\\"dropdown-menu country-dropdown\\\">\\n\\t\\t\\t<div class=\\\"search-container\\\"\\n\\t\\t\\t\\t*ngIf=\\\"searchCountryFlag && searchCountryField\\\">\\n\\t\\t\\t\\t<input id=\\\"country-search-box\\\"\\n\\t\\t\\t\\t\\t[(ngModel)]=\\\"countrySearchText\\\"\\n\\t\\t\\t\\t\\t(keyup)=\\\"searchCountry()\\\"\\n\\t\\t\\t\\t\\t(click)=\\\"$event.stopPropagation()\\\"\\n\\t\\t\\t\\t\\t[placeholder]=\\\"searchCountryPlaceholder\\\"\\n\\t\\t\\t\\t\\tautofocus>\\n\\t\\t\\t</div>\\n\\t\\t\\t<ul class=\\\"iti__country-list\\\"\\n\\t\\t\\t\\t#countryList>\\n\\t\\t\\t\\t<li class=\\\"iti__country iti__preferred\\\"\\n\\t\\t\\t\\t\\t*ngFor=\\\"let country of preferredCountriesInDropDown\\\"\\n\\t\\t\\t\\t\\t(click)=\\\"onCountrySelect(country, focusable)\\\"\\n\\t\\t\\t\\t\\t[id]=\\\"country.htmlId+'-preferred'\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"iti__flag-box\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"iti__flag\\\"\\n\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"country.flagClass\\\"></div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<span class=\\\"iti__country-name\\\">{{country.name}}</span>\\n\\t\\t\\t\\t\\t<span class=\\\"iti__dial-code\\\">+{{country.dialCode}}</span>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t\\t<li class=\\\"iti__divider\\\"\\n\\t\\t\\t\\t\\t*ngIf=\\\"preferredCountriesInDropDown?.length\\\"></li>\\n\\t\\t\\t\\t<li class=\\\"iti__country iti__standard\\\"\\n\\t\\t\\t\\t\\t*ngFor=\\\"let country of allCountries\\\"\\n\\t\\t\\t\\t\\t(click)=\\\"onCountrySelect(country, focusable)\\\"\\n\\t\\t\\t\\t\\t[id]=\\\"country.htmlId\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"iti__flag-box\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"iti__flag\\\"\\n\\t\\t\\t\\t\\t\\t\\t[ngClass]=\\\"country.flagClass\\\"></div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t<span class=\\\"iti__country-name\\\">{{country.name}}</span>\\n\\t\\t\\t\\t\\t<span class=\\\"iti__dial-code\\\">+{{country.dialCode}}</span>\\n\\t\\t\\t\\t</li>\\n\\t\\t\\t</ul>\\n\\t\\t</div>\\n\\t</div>\\n\\t<input type=\\\"tel\\\"\\n\\t\\t[id]=\\\"inputId\\\"\\n\\t\\tautocomplete=\\\"off\\\"\\n\\t\\t[ngClass]=\\\"cssClass\\\"\\n\\t\\t(blur)=\\\"onTouched()\\\"\\n\\t\\t(keypress)=\\\"onInputKeyPress($event)\\\"\\n\\t\\t[(ngModel)]=\\\"phoneNumber\\\"\\n\\t\\t(ngModelChange)=\\\"onPhoneNumberChange()\\\"\\n\\t\\t[disabled]=\\\"disabled\\\"\\n\\t\\t[placeholder]=\\\"resolvePlaceholder()\\\"\\n\\t\\t[attr.maxLength]=\\\"maxLength\\\"\\n\\t\\t[attr.validation]=\\\"phoneValidation\\\"\\n\\t\\t#focusable>\\n</div>\\n\", styles: [\".dropup,.dropright,.dropdown,.dropleft{position:relative}.dropdown-toggle{white-space:nowrap}.dropdown-toggle:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";border-top:.3em solid;border-right:.3em solid transparent;border-bottom:0;border-left:.3em solid transparent}.dropdown-toggle:empty:after{margin-left:0}.dropdown-menu{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:10rem;padding:.5rem 0;margin:.125rem 0 0;font-size:1rem;color:#212529;text-align:left;list-style:none;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.15);border-radius:.25rem}.dropdown-menu-left{right:auto;left:0}.dropdown-menu-right{right:0;left:auto}@media (min-width: 576px){.dropdown-menu-sm-left{right:auto;left:0}.dropdown-menu-sm-right{right:0;left:auto}}@media (min-width: 768px){.dropdown-menu-md-left{right:auto;left:0}.dropdown-menu-md-right{right:0;left:auto}}@media (min-width: 992px){.dropdown-menu-lg-left{right:auto;left:0}.dropdown-menu-lg-right{right:0;left:auto}}@media (min-width: 1200px){.dropdown-menu-xl-left{right:auto;left:0}.dropdown-menu-xl-right{right:0;left:auto}}.dropup .dropdown-menu{top:auto;bottom:100%;margin-top:0;margin-bottom:.125rem}.dropup .dropdown-toggle:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";border-top:0;border-right:.3em solid transparent;border-bottom:.3em solid;border-left:.3em solid transparent}.dropup .dropdown-toggle:empty:after{margin-left:0}.dropright .dropdown-menu{top:0;right:auto;left:100%;margin-top:0;margin-left:.125rem}.dropright .dropdown-toggle:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";border-top:.3em solid transparent;border-right:0;border-bottom:.3em solid transparent;border-left:.3em solid}.dropright .dropdown-toggle:empty:after{margin-left:0}.dropright .dropdown-toggle:after{vertical-align:0}.dropleft .dropdown-menu{top:0;right:100%;left:auto;margin-top:0;margin-right:.125rem}.dropleft .dropdown-toggle:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\"}.dropleft .dropdown-toggle:after{display:none}.dropleft .dropdown-toggle:before{display:inline-block;margin-right:.255em;vertical-align:.255em;content:\\\"\\\";border-top:.3em solid transparent;border-right:.3em solid;border-bottom:.3em solid transparent}.dropleft .dropdown-toggle:empty:after{margin-left:0}.dropleft .dropdown-toggle:before{vertical-align:0}.dropdown-menu[x-placement^=top],.dropdown-menu[x-placement^=right],.dropdown-menu[x-placement^=bottom],.dropdown-menu[x-placement^=left]{right:auto;bottom:auto}.dropdown-divider{height:0;margin:.5rem 0;overflow:hidden;border-top:1px solid #e9ecef}.dropdown-item{display:block;width:100%;padding:.25rem 1.5rem;clear:both;font-weight:400;color:#212529;text-align:inherit;white-space:nowrap;background-color:transparent;border:0}.dropdown-item:hover,.dropdown-item:focus{color:#16181b;text-decoration:none;background-color:#f8f9fa}.dropdown-item.active,.dropdown-item:active{color:#fff;text-decoration:none;background-color:#007bff}.dropdown-item.disabled,.dropdown-item:disabled{color:#6c757d;pointer-events:none;background-color:transparent}.dropdown-menu.show{display:block}.dropdown-header{display:block;padding:.5rem 1.5rem;margin-bottom:0;font-size:.875rem;color:#6c757d;white-space:nowrap}.dropdown-item-text{display:block;padding:.25rem 1.5rem;color:#212529}\\n\", \"li.iti__country:hover{background-color:#0000000d}.iti__selected-flag.dropdown-toggle:after{content:none}.iti__flag-container.disabled{cursor:default!important}.iti.iti--allow-dropdown .flag-container.disabled:hover .iti__selected-flag{background:none}.country-dropdown{border:1px solid #ccc;width:-moz-fit-content;width:fit-content;padding:1px;border-collapse:collapse}.search-container{position:relative}.search-container input{width:100%;border:none;border-bottom:1px solid #ccc;padding-left:10px}.search-icon{position:absolute;z-index:2;width:25px;margin:1px 10px}.iti__country-list{position:relative;border:none}.iti input#country-search-box{padding-left:6px}.iti .selected-dial-code{margin-left:6px}.iti.separate-dial-code .iti__selected-flag,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-2 .iti__selected-flag,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-3 .iti__selected-flag,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-4 .iti__selected-flag{width:93px}.iti.separate-dial-code input,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-2 input,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-3 input,.iti.separate-dial-code.iti--allow-dropdown.iti-sdc-4 input{padding-left:98px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: CountryCode }]; }, propDecorators: { value: [{\n                type: Input\n            }], preferredCountries: [{\n                type: Input\n            }], enablePlaceholder: [{\n                type: Input\n            }], customPlaceholder: [{\n                type: Input\n            }], numberFormat: [{\n                type: Input\n            }], cssClass: [{\n                type: Input\n            }], onlyCountries: [{\n                type: Input\n            }], enableAutoCountrySelect: [{\n                type: Input\n            }], searchCountryFlag: [{\n                type: Input\n            }], searchCountryField: [{\n                type: Input\n            }], searchCountryPlaceholder: [{\n                type: Input\n            }], maxLength: [{\n                type: Input\n            }], selectFirstCountry: [{\n                type: Input\n            }], selectedCountryISO: [{\n                type: Input\n            }], phoneValidation: [{\n                type: Input\n            }], inputId: [{\n                type: Input\n            }], separateDialCode: [{\n                type: Input\n            }], countryChange: [{\n                type: Output\n            }], countryList: [{\n                type: ViewChild,\n                args: ['countryList']\n            }] } });\n\nconst dropdownModuleForRoot = BsDropdownModule.forRoot();\nclass NgxIntlTelInputModule {\n}\nNgxIntlTelInputModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: NgxIntlTelInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxIntlTelInputModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: NgxIntlTelInputModule, declarations: [NgxIntlTelInputComponent, NativeElementInjectorDirective], imports: [CommonModule,\n        FormsModule,\n        ReactiveFormsModule, i3.BsDropdownModule], exports: [NgxIntlTelInputComponent, NativeElementInjectorDirective] });\nNgxIntlTelInputModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: NgxIntlTelInputModule, imports: [[\n            CommonModule,\n            FormsModule,\n            ReactiveFormsModule,\n            dropdownModuleForRoot,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.1\", ngImport: i0, type: NgxIntlTelInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [NgxIntlTelInputComponent, NativeElementInjectorDirective],\n                    imports: [\n                        CommonModule,\n                        FormsModule,\n                        ReactiveFormsModule,\n                        dropdownModuleForRoot,\n                    ],\n                    exports: [NgxIntlTelInputComponent, NativeElementInjectorDirective],\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-intl-tel-input\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CountryISO, NativeElementInjectorDirective, NgxIntlTelInputComponent, NgxIntlTelInputModule, PhoneNumberFormat, SearchCountryField, dropdownModuleForRoot };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}