{"ast":null,"code":"function getObjectPropertyValueByKey(obj, key) {\n  const map = new Map(Object.entries(obj));\n\n  if (obj.hasOwnProperty(key) && map) {\n    return map.get(key);\n  }\n}\n/**\n * Generates unique ID for give prefix.\n * @param {string} prefix Prefix for generated ID\n * @returns {boolean}\n */\n\n\nfunction getUniqueIdWithPrefix(prefix) {\n  const result = Math.floor(Math.random() * new Date().getTime()).toString();\n\n  if (!prefix) {\n    return result;\n  }\n\n  return `${prefix}${result}`;\n}\n/* eslint-disable no-useless-escape */\n\n\nfunction stringSnakeToCamel(str) {\n  return str.replace(/(\\-\\w)/g, function (m) {\n    return m[1].toUpperCase();\n  });\n}\n\nfunction toJSON(value) {\n  if (typeof value !== 'string') {\n    return value;\n  }\n\n  if (!value) {\n    return undefined;\n  } // (\"'\" => \"\\\"\");\n\n\n  const result = value.toString().split('').map(el => el !== \"'\" ? el : '\"').join('');\n  var jsonStr = result.replace(/(\\w+:)|(\\w+ :)/g, function (matched) {\n    return '\"' + matched.substring(0, matched.length - 1) + '\":';\n  });\n\n  try {\n    return JSON.parse(jsonStr);\n  } catch (_a) {\n    return undefined;\n  }\n}\n\nexport { getObjectPropertyValueByKey, getUniqueIdWithPrefix, stringSnakeToCamel, toJSON };","map":null,"metadata":{},"sourceType":"module"}