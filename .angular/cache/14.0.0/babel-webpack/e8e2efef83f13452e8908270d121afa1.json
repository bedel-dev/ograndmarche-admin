{"ast":null,"code":"import * as lpn from 'google-libphonenumber';\nimport * as i0 from '@angular/core';\nimport { Injectable, Directive, EventEmitter, forwardRef, Component, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport * as i4 from '@angular/forms';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { setTheme } from 'ngx-bootstrap/utils';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i3 from 'ngx-bootstrap/dropdown';\nimport { BsDropdownModule } from 'ngx-bootstrap/dropdown';\nconst _c0 = [\"countryList\"];\n\nfunction NgxIntlTelInputComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"+\", ctx_r0.selectedCountry.dialCode, \"\");\n  }\n}\n\nfunction NgxIntlTelInputComponent_div_6_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 17)(1, \"input\", 18);\n    i0.ɵɵlistener(\"ngModelChange\", function NgxIntlTelInputComponent_div_6_div_1_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r8.countrySearchText = $event);\n    })(\"keyup\", function NgxIntlTelInputComponent_div_6_div_1_Template_input_keyup_1_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r10 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r10.searchCountry());\n    })(\"click\", function NgxIntlTelInputComponent_div_6_div_1_Template_input_click_1_listener($event) {\n      return $event.stopPropagation();\n    });\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r3.countrySearchText)(\"placeholder\", ctx_r3.searchCountryPlaceholder);\n  }\n}\n\nfunction NgxIntlTelInputComponent_div_6_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 19);\n    i0.ɵɵlistener(\"click\", function NgxIntlTelInputComponent_div_6_li_4_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r14);\n      const country_r12 = restoredCtx.$implicit;\n      const ctx_r13 = i0.ɵɵnextContext(2);\n\n      const _r2 = i0.ɵɵreference(8);\n\n      return i0.ɵɵresetView(ctx_r13.onCountrySelect(country_r12, _r2));\n    });\n    i0.ɵɵelementStart(1, \"div\", 20);\n    i0.ɵɵelement(2, \"div\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 21);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 22);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const country_r12 = ctx.$implicit;\n    i0.ɵɵproperty(\"id\", country_r12.htmlId + \"-preferred\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", country_r12.flagClass);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(country_r12.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"+\", country_r12.dialCode, \"\");\n  }\n}\n\nfunction NgxIntlTelInputComponent_div_6_li_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"li\", 23);\n  }\n}\n\nfunction NgxIntlTelInputComponent_div_6_li_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"li\", 24);\n    i0.ɵɵlistener(\"click\", function NgxIntlTelInputComponent_div_6_li_6_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r17);\n      const country_r15 = restoredCtx.$implicit;\n      const ctx_r16 = i0.ɵɵnextContext(2);\n\n      const _r2 = i0.ɵɵreference(8);\n\n      return i0.ɵɵresetView(ctx_r16.onCountrySelect(country_r15, _r2));\n    });\n    i0.ɵɵelementStart(1, \"div\", 20);\n    i0.ɵɵelement(2, \"div\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 21);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"span\", 22);\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const country_r15 = ctx.$implicit;\n    i0.ɵɵproperty(\"id\", country_r15.htmlId);\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngClass\", country_r15.flagClass);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(country_r15.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"+\", country_r15.dialCode, \"\");\n  }\n}\n\nfunction NgxIntlTelInputComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtemplate(1, NgxIntlTelInputComponent_div_6_div_1_Template, 2, 2, \"div\", 11);\n    i0.ɵɵelementStart(2, \"ul\", 12, 13);\n    i0.ɵɵtemplate(4, NgxIntlTelInputComponent_div_6_li_4_Template, 7, 4, \"li\", 14);\n    i0.ɵɵtemplate(5, NgxIntlTelInputComponent_div_6_li_5_Template, 1, 0, \"li\", 15);\n    i0.ɵɵtemplate(6, NgxIntlTelInputComponent_div_6_li_6_Template, 7, 4, \"li\", 16);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.searchCountryFlag && ctx_r1.searchCountryField);\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.preferredCountriesInDropDown);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.preferredCountriesInDropDown == null ? null : ctx_r1.preferredCountriesInDropDown.length);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.allCountries);\n  }\n}\n\nconst _c1 = function (a0) {\n  return {\n    \"disabled\": a0\n  };\n};\n\nvar CountryISO = /*#__PURE__*/(() => {\n  (function (CountryISO) {\n    CountryISO[\"Afghanistan\"] = \"af\";\n    CountryISO[\"Albania\"] = \"al\";\n    CountryISO[\"Algeria\"] = \"dz\";\n    CountryISO[\"AmericanSamoa\"] = \"as\";\n    CountryISO[\"Andorra\"] = \"ad\";\n    CountryISO[\"Angola\"] = \"ao\";\n    CountryISO[\"Anguilla\"] = \"ai\";\n    CountryISO[\"AntiguaAndBarbuda\"] = \"ag\";\n    CountryISO[\"Argentina\"] = \"ar\";\n    CountryISO[\"Armenia\"] = \"am\";\n    CountryISO[\"Aruba\"] = \"aw\";\n    CountryISO[\"Australia\"] = \"au\";\n    CountryISO[\"Austria\"] = \"at\";\n    CountryISO[\"Azerbaijan\"] = \"az\";\n    CountryISO[\"Bahamas\"] = \"bs\";\n    CountryISO[\"Bahrain\"] = \"bh\";\n    CountryISO[\"Bangladesh\"] = \"bd\";\n    CountryISO[\"Barbados\"] = \"bb\";\n    CountryISO[\"Belarus\"] = \"by\";\n    CountryISO[\"Belgium\"] = \"be\";\n    CountryISO[\"Belize\"] = \"bz\";\n    CountryISO[\"Benin\"] = \"bj\";\n    CountryISO[\"Bermuda\"] = \"bm\";\n    CountryISO[\"Bhutan\"] = \"bt\";\n    CountryISO[\"Bolivia\"] = \"bo\";\n    CountryISO[\"BosniaAndHerzegovina\"] = \"ba\";\n    CountryISO[\"Botswana\"] = \"bw\";\n    CountryISO[\"Brazil\"] = \"br\";\n    CountryISO[\"BritishIndianOceanTerritory\"] = \"io\";\n    CountryISO[\"BritishVirginIslands\"] = \"vg\";\n    CountryISO[\"Brunei\"] = \"bn\";\n    CountryISO[\"Bulgaria\"] = \"bg\";\n    CountryISO[\"BurkinaFaso\"] = \"bf\";\n    CountryISO[\"Burundi\"] = \"bi\";\n    CountryISO[\"Cambodia\"] = \"kh\";\n    CountryISO[\"Cameroon\"] = \"cm\";\n    CountryISO[\"Canada\"] = \"ca\";\n    CountryISO[\"CapeVerde\"] = \"cv\";\n    CountryISO[\"CaribbeanNetherlands\"] = \"bq\";\n    CountryISO[\"CaymanIslands\"] = \"ky\";\n    CountryISO[\"CentralAfricanRepublic\"] = \"cf\";\n    CountryISO[\"Chad\"] = \"td\";\n    CountryISO[\"Chile\"] = \"cl\";\n    CountryISO[\"China\"] = \"cn\";\n    CountryISO[\"ChristmasIsland\"] = \"cx\";\n    CountryISO[\"Cocos\"] = \"cc\";\n    CountryISO[\"Colombia\"] = \"co\";\n    CountryISO[\"Comoros\"] = \"km\";\n    CountryISO[\"CongoDRCJamhuriYaKidemokrasiaYaKongo\"] = \"cd\";\n    CountryISO[\"CongoRepublicCongoBrazzaville\"] = \"cg\";\n    CountryISO[\"CookIslands\"] = \"ck\";\n    CountryISO[\"CostaRica\"] = \"cr\";\n    CountryISO[\"C\\u00F4teDIvoire\"] = \"ci\";\n    CountryISO[\"Croatia\"] = \"hr\";\n    CountryISO[\"Cuba\"] = \"cu\";\n    CountryISO[\"Cura\\u00E7ao\"] = \"cw\";\n    CountryISO[\"Cyprus\"] = \"cy\";\n    CountryISO[\"CzechRepublic\"] = \"cz\";\n    CountryISO[\"Denmark\"] = \"dk\";\n    CountryISO[\"Djibouti\"] = \"dj\";\n    CountryISO[\"Dominica\"] = \"dm\";\n    CountryISO[\"DominicanRepublic\"] = \"do\";\n    CountryISO[\"Ecuador\"] = \"ec\";\n    CountryISO[\"Egypt\"] = \"eg\";\n    CountryISO[\"ElSalvador\"] = \"sv\";\n    CountryISO[\"EquatorialGuinea\"] = \"gq\";\n    CountryISO[\"Eritrea\"] = \"er\";\n    CountryISO[\"Estonia\"] = \"ee\";\n    CountryISO[\"Ethiopia\"] = \"et\";\n    CountryISO[\"FalklandIslands\"] = \"fk\";\n    CountryISO[\"FaroeIslands\"] = \"fo\";\n    CountryISO[\"Fiji\"] = \"fj\";\n    CountryISO[\"Finland\"] = \"fi\";\n    CountryISO[\"France\"] = \"fr\";\n    CountryISO[\"FrenchGuiana\"] = \"gf\";\n    CountryISO[\"FrenchPolynesia\"] = \"pf\";\n    CountryISO[\"Gabon\"] = \"ga\";\n    CountryISO[\"Gambia\"] = \"gm\";\n    CountryISO[\"Georgia\"] = \"ge\";\n    CountryISO[\"Germany\"] = \"de\";\n    CountryISO[\"Ghana\"] = \"gh\";\n    CountryISO[\"Gibraltar\"] = \"gi\";\n    CountryISO[\"Greece\"] = \"gr\";\n    CountryISO[\"Greenland\"] = \"gl\";\n    CountryISO[\"Grenada\"] = \"gd\";\n    CountryISO[\"Guadeloupe\"] = \"gp\";\n    CountryISO[\"Guam\"] = \"gu\";\n    CountryISO[\"Guatemala\"] = \"gt\";\n    CountryISO[\"Guernsey\"] = \"gg\";\n    CountryISO[\"Guinea\"] = \"gn\";\n    CountryISO[\"GuineaBissau\"] = \"gw\";\n    CountryISO[\"Guyana\"] = \"gy\";\n    CountryISO[\"Haiti\"] = \"ht\";\n    CountryISO[\"Honduras\"] = \"hn\";\n    CountryISO[\"HongKong\"] = \"hk\";\n    CountryISO[\"Hungary\"] = \"hu\";\n    CountryISO[\"Iceland\"] = \"is\";\n    CountryISO[\"India\"] = \"in\";\n    CountryISO[\"Indonesia\"] = \"id\";\n    CountryISO[\"Iran\"] = \"ir\";\n    CountryISO[\"Iraq\"] = \"iq\";\n    CountryISO[\"Ireland\"] = \"ie\";\n    CountryISO[\"IsleOfMan\"] = \"im\";\n    CountryISO[\"Israel\"] = \"il\";\n    CountryISO[\"Italy\"] = \"it\";\n    CountryISO[\"Jamaica\"] = \"jm\";\n    CountryISO[\"Japan\"] = \"jp\";\n    CountryISO[\"Jersey\"] = \"je\";\n    CountryISO[\"Jordan\"] = \"jo\";\n    CountryISO[\"Kazakhstan\"] = \"kz\";\n    CountryISO[\"Kenya\"] = \"ke\";\n    CountryISO[\"Kiribati\"] = \"ki\";\n    CountryISO[\"Kosovo\"] = \"xk\";\n    CountryISO[\"Kuwait\"] = \"kw\";\n    CountryISO[\"Kyrgyzstan\"] = \"kg\";\n    CountryISO[\"Laos\"] = \"la\";\n    CountryISO[\"Latvia\"] = \"lv\";\n    CountryISO[\"Lebanon\"] = \"lb\";\n    CountryISO[\"Lesotho\"] = \"ls\";\n    CountryISO[\"Liberia\"] = \"lr\";\n    CountryISO[\"Libya\"] = \"ly\";\n    CountryISO[\"Liechtenstein\"] = \"li\";\n    CountryISO[\"Lithuania\"] = \"lt\";\n    CountryISO[\"Luxembourg\"] = \"lu\";\n    CountryISO[\"Macau\"] = \"mo\";\n    CountryISO[\"Macedonia\"] = \"mk\";\n    CountryISO[\"Madagascar\"] = \"mg\";\n    CountryISO[\"Malawi\"] = \"mw\";\n    CountryISO[\"Malaysia\"] = \"my\";\n    CountryISO[\"Maldives\"] = \"mv\";\n    CountryISO[\"Mali\"] = \"ml\";\n    CountryISO[\"Malta\"] = \"mt\";\n    CountryISO[\"MarshallIslands\"] = \"mh\";\n    CountryISO[\"Martinique\"] = \"mq\";\n    CountryISO[\"Mauritania\"] = \"mr\";\n    CountryISO[\"Mauritius\"] = \"mu\";\n    CountryISO[\"Mayotte\"] = \"yt\";\n    CountryISO[\"Mexico\"] = \"mx\";\n    CountryISO[\"Micronesia\"] = \"fm\";\n    CountryISO[\"Moldova\"] = \"md\";\n    CountryISO[\"Monaco\"] = \"mc\";\n    CountryISO[\"Mongolia\"] = \"mn\";\n    CountryISO[\"Montenegro\"] = \"me\";\n    CountryISO[\"Montserrat\"] = \"ms\";\n    CountryISO[\"Morocco\"] = \"ma\";\n    CountryISO[\"Mozambique\"] = \"mz\";\n    CountryISO[\"Myanmar\"] = \"mm\";\n    CountryISO[\"Namibia\"] = \"na\";\n    CountryISO[\"Nauru\"] = \"nr\";\n    CountryISO[\"Nepal\"] = \"np\";\n    CountryISO[\"Netherlands\"] = \"nl\";\n    CountryISO[\"NewCaledonia\"] = \"nc\";\n    CountryISO[\"NewZealand\"] = \"nz\";\n    CountryISO[\"Nicaragua\"] = \"ni\";\n    CountryISO[\"Niger\"] = \"ne\";\n    CountryISO[\"Nigeria\"] = \"ng\";\n    CountryISO[\"Niue\"] = \"nu\";\n    CountryISO[\"NorfolkIsland\"] = \"nf\";\n    CountryISO[\"NorthKorea\"] = \"kp\";\n    CountryISO[\"NorthernMarianaIslands\"] = \"mp\";\n    CountryISO[\"Norway\"] = \"no\";\n    CountryISO[\"Oman\"] = \"om\";\n    CountryISO[\"Pakistan\"] = \"pk\";\n    CountryISO[\"Palau\"] = \"pw\";\n    CountryISO[\"Palestine\"] = \"ps\";\n    CountryISO[\"Panama\"] = \"pa\";\n    CountryISO[\"PapuaNewGuinea\"] = \"pg\";\n    CountryISO[\"Paraguay\"] = \"py\";\n    CountryISO[\"Peru\"] = \"pe\";\n    CountryISO[\"Philippines\"] = \"ph\";\n    CountryISO[\"Poland\"] = \"pl\";\n    CountryISO[\"Portugal\"] = \"pt\";\n    CountryISO[\"PuertoRico\"] = \"pr\";\n    CountryISO[\"Qatar\"] = \"qa\";\n    CountryISO[\"R\\u00E9union\"] = \"re\";\n    CountryISO[\"Romania\"] = \"ro\";\n    CountryISO[\"Russia\"] = \"ru\";\n    CountryISO[\"Rwanda\"] = \"rw\";\n    CountryISO[\"SaintBarth\\u00E9lemy\"] = \"bl\";\n    CountryISO[\"SaintHelena\"] = \"sh\";\n    CountryISO[\"SaintKittsAndNevis\"] = \"kn\";\n    CountryISO[\"SaintLucia\"] = \"lc\";\n    CountryISO[\"SaintMartin\"] = \"mf\";\n    CountryISO[\"SaintPierreAndMiquelon\"] = \"pm\";\n    CountryISO[\"SaintVincentAndTheGrenadines\"] = \"vc\";\n    CountryISO[\"Samoa\"] = \"ws\";\n    CountryISO[\"SanMarino\"] = \"sm\";\n    CountryISO[\"S\\u00E3oTom\\u00E9AndPr\\u00EDncipe\"] = \"st\";\n    CountryISO[\"SaudiArabia\"] = \"sa\";\n    CountryISO[\"Senegal\"] = \"sn\";\n    CountryISO[\"Serbia\"] = \"rs\";\n    CountryISO[\"Seychelles\"] = \"sc\";\n    CountryISO[\"SierraLeone\"] = \"sl\";\n    CountryISO[\"Singapore\"] = \"sg\";\n    CountryISO[\"SintMaarten\"] = \"sx\";\n    CountryISO[\"Slovakia\"] = \"sk\";\n    CountryISO[\"Slovenia\"] = \"si\";\n    CountryISO[\"SolomonIslands\"] = \"sb\";\n    CountryISO[\"Somalia\"] = \"so\";\n    CountryISO[\"SouthAfrica\"] = \"za\";\n    CountryISO[\"SouthKorea\"] = \"kr\";\n    CountryISO[\"SouthSudan\"] = \"ss\";\n    CountryISO[\"Spain\"] = \"es\";\n    CountryISO[\"SriLanka\"] = \"lk\";\n    CountryISO[\"Sudan\"] = \"sd\";\n    CountryISO[\"Suriname\"] = \"sr\";\n    CountryISO[\"SvalbardAndJanMayen\"] = \"sj\";\n    CountryISO[\"Swaziland\"] = \"sz\";\n    CountryISO[\"Sweden\"] = \"se\";\n    CountryISO[\"Switzerland\"] = \"ch\";\n    CountryISO[\"Syria\"] = \"sy\";\n    CountryISO[\"Taiwan\"] = \"tw\";\n    CountryISO[\"Tajikistan\"] = \"tj\";\n    CountryISO[\"Tanzania\"] = \"tz\";\n    CountryISO[\"Thailand\"] = \"th\";\n    CountryISO[\"TimorLeste\"] = \"tl\";\n    CountryISO[\"Togo\"] = \"tg\";\n    CountryISO[\"Tokelau\"] = \"tk\";\n    CountryISO[\"Tonga\"] = \"to\";\n    CountryISO[\"TrinidadAndTobago\"] = \"tt\";\n    CountryISO[\"Tunisia\"] = \"tn\";\n    CountryISO[\"Turkey\"] = \"tr\";\n    CountryISO[\"Turkmenistan\"] = \"tm\";\n    CountryISO[\"TurksAndCaicosIslands\"] = \"tc\";\n    CountryISO[\"Tuvalu\"] = \"tv\";\n    CountryISO[\"USVirginIslands\"] = \"vi\";\n    CountryISO[\"Uganda\"] = \"ug\";\n    CountryISO[\"Ukraine\"] = \"ua\";\n    CountryISO[\"UnitedArabEmirates\"] = \"ae\";\n    CountryISO[\"UnitedKingdom\"] = \"gb\";\n    CountryISO[\"UnitedStates\"] = \"us\";\n    CountryISO[\"Uruguay\"] = \"uy\";\n    CountryISO[\"Uzbekistan\"] = \"uz\";\n    CountryISO[\"Vanuatu\"] = \"vu\";\n    CountryISO[\"VaticanCity\"] = \"va\";\n    CountryISO[\"Venezuela\"] = \"ve\";\n    CountryISO[\"Vietnam\"] = \"vn\";\n    CountryISO[\"WallisAndFutuna\"] = \"wf\";\n    CountryISO[\"WesternSahara\"] = \"eh\";\n    CountryISO[\"Yemen\"] = \"ye\";\n    CountryISO[\"Zambia\"] = \"zm\";\n    CountryISO[\"Zimbabwe\"] = \"zw\";\n    CountryISO[\"\\u00C5landIslands\"] = \"ax\";\n  })(CountryISO || (CountryISO = {}));\n\n  return CountryISO;\n})();\nlet CountryCode = /*#__PURE__*/(() => {\n  class CountryCode {\n    constructor() {\n      this.allCountries = [['Afghanistan (‫افغانستان‬‎)', CountryISO.Afghanistan, '93'], ['Albania (Shqipëri)', CountryISO.Albania, '355'], ['Algeria (‫الجزائر‬‎)', CountryISO.Algeria, '213'], ['American Samoa', 'as', '1', 1, ['684']], ['Andorra', CountryISO.Andorra, '376'], ['Angola', CountryISO.Angola, '244'], ['Anguilla', 'ai', '1', 1, ['264']], ['Antigua and Barbuda', 'ag', '1', 1, ['268']], ['Argentina', CountryISO.Argentina, '54'], ['Armenia (Հայաստան)', CountryISO.Armenia, '374'], ['Aruba', CountryISO.Aruba, '297'], ['Australia', CountryISO.Australia, '61', 0], ['Austria (Österreich)', CountryISO.Austria, '43'], ['Azerbaijan (Azərbaycan)', CountryISO.Azerbaijan, '994'], ['Bahamas', 'bs', '1', 1, ['242']], ['Bahrain (‫البحرين‬‎)', CountryISO.Bahrain, '973'], ['Bangladesh (বাংলাদেশ)', CountryISO.Bangladesh, '880'], ['Barbados', 'bb', '1', 1, ['246']], ['Belarus (Беларусь)', CountryISO.Belarus, '375'], ['Belgium (België)', CountryISO.Belgium, '32'], ['Belize', CountryISO.Belize, '501'], ['Benin (Bénin)', CountryISO.Benin, '229'], ['Bermuda', 'bm', '1', 1, ['441']], ['Bhutan (འབྲུག)', CountryISO.Bhutan, '975'], ['Bolivia', CountryISO.Bolivia, '591'], ['Bosnia and Herzegovina (Босна и Херцеговина)', CountryISO.BosniaAndHerzegovina, '387'], ['Botswana', CountryISO.Botswana, '267'], ['Brazil (Brasil)', CountryISO.Brazil, '55'], ['British Indian Ocean Territory', CountryISO.BritishIndianOceanTerritory, '246'], ['British Virgin Islands', 'vg', '1', 1, ['284']], ['Brunei', CountryISO.Brunei, '673'], ['Bulgaria (България)', CountryISO.Bulgaria, '359'], ['Burkina Faso', CountryISO.BurkinaFaso, '226'], ['Burundi (Uburundi)', CountryISO.Burundi, '257'], ['Cambodia (កម្ពុជា)', CountryISO.Cambodia, '855'], ['Cameroon (Cameroun)', CountryISO.Cameroon, '237'], ['Canada', CountryISO.Canada, '1', 1, ['204', '226', '236', '249', '250', '289', '306', '343', '365', '387', '403', '416', '418', '431', '437', '438', '450', '506', '514', '519', '548', '579', '581', '587', '604', '613', '639', '647', '672', '705', '709', '742', '778', '780', '782', '807', '819', '825', '867', '873', '902', '905']], ['Cape Verde (Kabu Verdi)', CountryISO.CapeVerde, '238'], ['Caribbean Netherlands', CountryISO.CaribbeanNetherlands, '599', 1], ['Cayman Islands', 'ky', '1', 1, ['345']], ['Central African Republic (République centrafricaine)', CountryISO.CentralAfricanRepublic, '236'], ['Chad (Tchad)', CountryISO.Chad, '235'], ['Chile', CountryISO.Chile, '56'], ['China (中国)', CountryISO.China, '86'], ['Christmas Island', CountryISO.ChristmasIsland, '61', 2], ['Cocos (Keeling) Islands', CountryISO.Cocos, '61', 1], ['Colombia', CountryISO.Colombia, '57'], ['Comoros (‫جزر القمر‬‎)', CountryISO.Comoros, '269'], ['Congo (DRC) (Jamhuri ya Kidemokrasia ya Kongo)', CountryISO.CongoDRCJamhuriYaKidemokrasiaYaKongo, '243'], ['Congo (Republic) (Congo-Brazzaville)', CountryISO.CongoRepublicCongoBrazzaville, '242'], ['Cook Islands', CountryISO.CookIslands, '682'], ['Costa Rica', CountryISO.CostaRica, '506'], ['Côte d’Ivoire', CountryISO.CôteDIvoire, '225'], ['Croatia (Hrvatska)', CountryISO.Croatia, '385'], ['Cuba', CountryISO.Cuba, '53'], ['Curaçao', CountryISO.Curaçao, '599', 0], ['Cyprus (Κύπρος)', CountryISO.Cyprus, '357'], ['Czech Republic (Česká republika)', CountryISO.CzechRepublic, '420'], ['Denmark (Danmark)', CountryISO.Denmark, '45'], ['Djibouti', CountryISO.Djibouti, '253'], ['Dominica', CountryISO.Dominica, '1767'], ['Dominican Republic (República Dominicana)', CountryISO.DominicanRepublic, '1', 2, ['809', '829', '849']], ['Ecuador', CountryISO.Ecuador, '593'], ['Egypt (‫مصر‬‎)', CountryISO.Egypt, '20'], ['El Salvador', CountryISO.ElSalvador, '503'], ['Equatorial Guinea (Guinea Ecuatorial)', CountryISO.EquatorialGuinea, '240'], ['Eritrea', CountryISO.Eritrea, '291'], ['Estonia (Eesti)', CountryISO.Estonia, '372'], ['Ethiopia', CountryISO.Ethiopia, '251'], ['Falkland Islands (Islas Malvinas)', CountryISO.FalklandIslands, '500'], ['Faroe Islands (Føroyar)', CountryISO.FaroeIslands, '298'], ['Fiji', CountryISO.Fiji, '679'], ['Finland (Suomi)', CountryISO.Finland, '358', 0], ['France', CountryISO.France, '33'], ['French Guiana (Guyane française)', CountryISO.FrenchGuiana, '594'], ['French Polynesia (Polynésie française)', CountryISO.FrenchPolynesia, '689'], ['Gabon', CountryISO.Gabon, '241'], ['Gambia', CountryISO.Gambia, '220'], ['Georgia (საქართველო)', CountryISO.Georgia, '995'], ['Germany (Deutschland)', CountryISO.Germany, '49'], ['Ghana (Gaana)', CountryISO.Ghana, '233'], ['Gibraltar', CountryISO.Gibraltar, '350'], ['Greece (Ελλάδα)', CountryISO.Greece, '30'], ['Greenland (Kalaallit Nunaat)', CountryISO.Greenland, '299'], ['Grenada', CountryISO.Grenada, '1473'], ['Guadeloupe', CountryISO.Guadeloupe, '590', 0], ['Guam', 'gu', '1', 1, ['671']], ['Guatemala', CountryISO.Guatemala, '502'], ['Guernsey', CountryISO.Guernsey, '44', 1, [1481]], ['Guinea (Guinée)', CountryISO.Guinea, '224'], ['Guinea-Bissau (Guiné Bissau)', CountryISO.GuineaBissau, '245'], ['Guyana', CountryISO.Guyana, '592'], ['Haiti', CountryISO.Haiti, '509'], ['Honduras', CountryISO.Honduras, '504'], ['Hong Kong (香港)', CountryISO.HongKong, '852'], ['Hungary (Magyarország)', CountryISO.Hungary, '36'], ['Iceland (Ísland)', CountryISO.Iceland, '354'], ['India (भारत)', CountryISO.India, '91'], ['Indonesia', CountryISO.Indonesia, '62'], ['Iran (‫ایران‬‎)', CountryISO.Iran, '98'], ['Iraq (‫العراق‬‎)', CountryISO.Iraq, '964'], ['Ireland', CountryISO.Ireland, '353'], ['Isle of Man', CountryISO.IsleOfMan, '44', 2, [1624]], ['Israel (‫ישראל‬‎)', CountryISO.Israel, '972'], ['Italy (Italia)', CountryISO.Italy, '39', 0], ['Jamaica', 'jm', '1', 1, ['876']], ['Japan (日本)', CountryISO.Japan, '81'], ['Jersey', CountryISO.Jersey, '44', 3, [1534]], ['Jordan (‫الأردن‬‎)', CountryISO.Jordan, '962'], ['Kazakhstan (Казахстан)', CountryISO.Kazakhstan, '7', 1], ['Kenya', CountryISO.Kenya, '254'], ['Kiribati', CountryISO.Kiribati, '686'], ['Kosovo', CountryISO.Kosovo, '383'], ['Kuwait (‫الكويت‬‎)', CountryISO.Kuwait, '965'], ['Kyrgyzstan (Кыргызстан)', CountryISO.Kyrgyzstan, '996'], ['Laos (ລາວ)', CountryISO.Laos, '856'], ['Latvia (Latvija)', CountryISO.Latvia, '371'], ['Lebanon (‫لبنان‬‎)', CountryISO.Lebanon, '961'], ['Lesotho', CountryISO.Lesotho, '266'], ['Liberia', CountryISO.Liberia, '231'], ['Libya (‫ليبيا‬‎)', CountryISO.Libya, '218'], ['Liechtenstein', CountryISO.Liechtenstein, '423'], ['Lithuania (Lietuva)', CountryISO.Lithuania, '370'], ['Luxembourg', CountryISO.Luxembourg, '352'], ['Macau (澳門)', CountryISO.Macau, '853'], ['Macedonia (FYROM) (Македонија)', CountryISO.Macedonia, '389'], ['Madagascar (Madagasikara)', CountryISO.Madagascar, '261'], ['Malawi', CountryISO.Malawi, '265'], ['Malaysia', CountryISO.Malaysia, '60'], ['Maldives', CountryISO.Maldives, '960'], ['Mali', CountryISO.Mali, '223'], ['Malta', CountryISO.Malta, '356'], ['Marshall Islands', CountryISO.MarshallIslands, '692'], ['Martinique', CountryISO.Martinique, '596'], ['Mauritania (‫موريتانيا‬‎)', CountryISO.Mauritania, '222'], ['Mauritius (Moris)', CountryISO.Mauritius, '230'], ['Mayotte', CountryISO.Mayotte, '262', 1], ['Mexico (México)', CountryISO.Mexico, '52'], ['Micronesia', CountryISO.Micronesia, '691'], ['Moldova (Republica Moldova)', CountryISO.Moldova, '373'], ['Monaco', CountryISO.Monaco, '377'], ['Mongolia (Монгол)', CountryISO.Mongolia, '976'], ['Montenegro (Crna Gora)', CountryISO.Montenegro, '382'], ['Montserrat', 'ms', '1', 1, ['664']], ['Morocco (‫المغرب‬‎)', CountryISO.Morocco, '212', 0], ['Mozambique (Moçambique)', CountryISO.Mozambique, '258'], ['Myanmar (Burma) (မြန်မာ)', CountryISO.Myanmar, '95'], ['Namibia (Namibië)', CountryISO.Namibia, '264'], ['Nauru', CountryISO.Nauru, '674'], ['Nepal (नेपाल)', CountryISO.Nepal, '977'], ['Netherlands (Nederland)', CountryISO.Netherlands, '31'], ['New Caledonia (Nouvelle-Calédonie)', CountryISO.NewCaledonia, '687'], ['New Zealand', CountryISO.NewZealand, '64'], ['Nicaragua', CountryISO.Nicaragua, '505'], ['Niger (Nijar)', CountryISO.Niger, '227'], ['Nigeria', CountryISO.Nigeria, '234'], ['Niue', CountryISO.Niue, '683'], ['Norfolk Island', CountryISO.NorfolkIsland, '672'], ['North Korea (조선 민주주의 인민 공화국)', CountryISO.NorthKorea, '850'], ['Northern Mariana Islands', CountryISO.NorthernMarianaIslands, '1670'], ['Norway (Norge)', CountryISO.Norway, '47', 0], ['Oman (‫عُمان‬‎)', CountryISO.Oman, '968'], ['Pakistan (‫پاکستان‬‎)', CountryISO.Pakistan, '92'], ['Palau', CountryISO.Palau, '680'], ['Palestine (‫فلسطين‬‎)', CountryISO.Palestine, '970'], ['Panama (Panamá)', CountryISO.Panama, '507'], ['Papua New Guinea', CountryISO.PapuaNewGuinea, '675'], ['Paraguay', CountryISO.Paraguay, '595'], ['Peru (Perú)', CountryISO.Peru, '51'], ['Philippines', CountryISO.Philippines, '63'], ['Poland (Polska)', CountryISO.Poland, '48'], ['Portugal', CountryISO.Portugal, '351'], ['Puerto Rico', CountryISO.PuertoRico, '1', 3, ['787', '939']], ['Qatar (‫قطر‬‎)', CountryISO.Qatar, '974'], ['Réunion (La Réunion)', CountryISO.Réunion, '262', 0], ['Romania (România)', CountryISO.Romania, '40'], ['Russia (Россия)', CountryISO.Russia, '7', 0], ['Rwanda', CountryISO.Rwanda, '250'], ['Saint Barthélemy (Saint-Barthélemy)', CountryISO.SaintBarthélemy, '590', 1], ['Saint Helena', CountryISO.SaintHelena, '290'], ['Saint Kitts and Nevis', CountryISO.SaintKittsAndNevis, '1869'], ['Saint Lucia', 'lc', '1', 1, ['758']], ['Saint Martin (Saint-Martin (partie française))', CountryISO.SaintMartin, '590', 2], ['Saint Pierre and Miquelon (Saint-Pierre-et-Miquelon)', CountryISO.SaintPierreAndMiquelon, '508'], ['Saint Vincent and the Grenadines', 'vc', '1', 1, ['784']], ['Samoa', CountryISO.Samoa, '685'], ['San Marino', CountryISO.SanMarino, '378'], ['São Tomé and Príncipe (São Tomé e Príncipe)', CountryISO.SãoToméAndPríncipe, '239'], ['Saudi Arabia (‫المملكة العربية السعودية‬‎)', CountryISO.SaudiArabia, '966'], ['Senegal (Sénégal)', CountryISO.Senegal, '221'], ['Serbia (Србија)', CountryISO.Serbia, '381'], ['Seychelles', CountryISO.Seychelles, '248'], ['Sierra Leone', CountryISO.SierraLeone, '232'], ['Singapore', CountryISO.Singapore, '65'], ['Sint Maarten', 'sx', '1', 1, ['721']], ['Slovakia (Slovensko)', CountryISO.Slovakia, '421'], ['Slovenia (Slovenija)', CountryISO.Slovenia, '386'], ['Solomon Islands', CountryISO.SolomonIslands, '677'], ['Somalia (Soomaaliya)', CountryISO.Somalia, '252'], ['South Africa', CountryISO.SouthAfrica, '27'], ['South Korea (대한민국)', CountryISO.SouthKorea, '82'], ['South Sudan (‫جنوب السودان‬‎)', CountryISO.SouthSudan, '211'], ['Spain (España)', CountryISO.Spain, '34'], ['Sri Lanka (ශ්‍රී ලංකාව)', CountryISO.SriLanka, '94'], ['Sudan (‫السودان‬‎)', CountryISO.Sudan, '249'], ['Suriname', CountryISO.Suriname, '597'], ['Svalbard and Jan Mayen', CountryISO.SvalbardAndJanMayen, '47', 1], ['Swaziland', CountryISO.Swaziland, '268'], ['Sweden (Sverige)', CountryISO.Sweden, '46'], ['Switzerland (Schweiz)', CountryISO.Switzerland, '41'], ['Syria (‫سوريا‬‎)', CountryISO.Syria, '963'], ['Taiwan (台灣)', CountryISO.Taiwan, '886'], ['Tajikistan', CountryISO.Tajikistan, '992'], ['Tanzania', CountryISO.Tanzania, '255'], ['Thailand (ไทย)', CountryISO.Thailand, '66'], ['Timor-Leste', CountryISO.TimorLeste, '670'], ['Togo', CountryISO.Togo, '228'], ['Tokelau', CountryISO.Tokelau, '690'], ['Tonga', CountryISO.Tonga, '676'], ['Trinidad and Tobago', 'tt', '1', 1, ['868']], ['Tunisia (‫تونس‬‎)', CountryISO.Tunisia, '216'], ['Turkey (Türkiye)', CountryISO.Turkey, '90'], ['Turkmenistan', CountryISO.Turkmenistan, '993'], ['Turks and Caicos Islands', CountryISO.TurksAndCaicosIslands, '1649'], ['Tuvalu', CountryISO.Tuvalu, '688'], ['U.S. Virgin Islands', 'vi', '1', 1, ['340']], ['Uganda', CountryISO.Uganda, '256'], ['Ukraine (Україна)', CountryISO.Ukraine, '380'], ['United Arab Emirates (‫الإمارات العربية المتحدة‬‎)', CountryISO.UnitedArabEmirates, '971'], ['United Kingdom', CountryISO.UnitedKingdom, '44', 0], ['United States', CountryISO.UnitedStates, '1', 0], ['Uruguay', CountryISO.Uruguay, '598'], ['Uzbekistan (Oʻzbekiston)', CountryISO.Uzbekistan, '998'], ['Vanuatu', CountryISO.Vanuatu, '678'], ['Vatican City (Città del Vaticano)', CountryISO.VaticanCity, '39', 1], ['Venezuela', CountryISO.Venezuela, '58'], ['Vietnam (Việt Nam)', CountryISO.Vietnam, '84'], ['Wallis and Futuna', CountryISO.WallisAndFutuna, '681'], ['Western Sahara (‫الصحراء الغربية‬‎)', CountryISO.WesternSahara, '212', 1], ['Yemen (‫اليمن‬‎)', CountryISO.Yemen, '967'], ['Zambia', CountryISO.Zambia, '260'], ['Zimbabwe', CountryISO.Zimbabwe, '263'], ['Åland Islands', CountryISO.ÅlandIslands, '358', 1]];\n    }\n\n  }\n\n  CountryCode.ɵfac = function CountryCode_Factory(t) {\n    return new (t || CountryCode)();\n  };\n\n  CountryCode.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: CountryCode,\n    factory: CountryCode.ɵfac\n  });\n  return CountryCode;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar SearchCountryField = /*#__PURE__*/(() => {\n  (function (SearchCountryField) {\n    SearchCountryField[\"DialCode\"] = \"dialCode\";\n    SearchCountryField[\"Iso2\"] = \"iso2\";\n    SearchCountryField[\"Name\"] = \"name\";\n    SearchCountryField[\"All\"] = \"all\";\n  })(SearchCountryField || (SearchCountryField = {}));\n\n  return SearchCountryField;\n})();\n\n/*\nWe use \"control: any\" instead of \"control: FormControl\" to silence:\n\"Property 'nativeElement' does not exist on type 'FormControl'\".\nThis happens because I've expanded control with nativeElement via\n'NativeElementInjectorDirective' to get an access to the element.\nMore about this approach and reasons for this:\nhttps://github.com/angular/angular/issues/18025\nhttps://stackoverflow.com/a/54075119/1617590\n*/\nconst phoneNumberValidator = control => {\n  if (!control.value) {\n    return;\n  } // Find <input> inside injected nativeElement and get its \"id\".\n\n\n  const el = control.nativeElement;\n  const inputBox = el ? el.querySelector('input[type=\"tel\"]') : undefined;\n\n  if (inputBox) {\n    const id = inputBox.id;\n    const isCheckValidation = inputBox.getAttribute('validation');\n\n    if (isCheckValidation === 'true') {\n      const isRequired = control.errors && control.errors.required === true;\n      const error = {\n        validatePhoneNumber: {\n          valid: false\n        }\n      };\n      inputBox.setCustomValidity('Invalid field.');\n      let number;\n\n      try {\n        number = lpn.PhoneNumberUtil.getInstance().parse(control.value.number, control.value.countryCode);\n      } catch (e) {\n        if (isRequired) {\n          return error;\n        } else {\n          inputBox.setCustomValidity('');\n        }\n      }\n\n      if (control.value) {\n        // @ts-ignore\n        if (!number) {\n          return error;\n        } else {\n          if (!lpn.PhoneNumberUtil.getInstance().isValidNumberForRegion(number, control.value.countryCode)) {\n            return error;\n          } else {\n            inputBox.setCustomValidity('');\n          }\n        }\n      }\n    } else if (isCheckValidation === 'false') {\n      inputBox.setCustomValidity('');\n      control.clearValidators();\n    }\n  }\n\n  return;\n};\n\nvar PhoneNumberFormat = /*#__PURE__*/(() => {\n  (function (PhoneNumberFormat) {\n    PhoneNumberFormat[\"International\"] = \"INTERNATIONAL\";\n    PhoneNumberFormat[\"National\"] = \"NATIONAL\";\n  })(PhoneNumberFormat || (PhoneNumberFormat = {}));\n\n  return PhoneNumberFormat;\n})();\n\n/*\n\"Property 'nativeElement' does not exist on type 'FormControl'\".\n'NativeElementInjectorDirective' injects nativeElement to each control,\nso we can access it from inside validator for example.\nMore about this approach and reasons for this:\nhttps://github.com/angular/angular/issues/18025\nhttps://stackoverflow.com/a/54075119/1617590\n*/\nlet NativeElementInjectorDirective = /*#__PURE__*/(() => {\n  class NativeElementInjectorDirective {\n    constructor(controlDir, host) {\n      this.controlDir = controlDir;\n      this.host = host;\n    }\n\n    ngOnInit() {\n      if (this.controlDir.control) {\n        // @ts-ignore\n        this.controlDir.control['nativeElement'] = this.host.nativeElement;\n      }\n    }\n\n  }\n\n  NativeElementInjectorDirective.ɵfac = function NativeElementInjectorDirective_Factory(t) {\n    return new (t || NativeElementInjectorDirective)(i0.ɵɵdirectiveInject(i4.NgControl), i0.ɵɵdirectiveInject(i0.ElementRef));\n  };\n\n  NativeElementInjectorDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: NativeElementInjectorDirective,\n    selectors: [[\"\", \"ngModel\", \"\"], [\"\", \"formControl\", \"\"], [\"\", \"formControlName\", \"\"]]\n  });\n  return NativeElementInjectorDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet NgxIntlTelInputComponent = /*#__PURE__*/(() => {\n  class NgxIntlTelInputComponent {\n    constructor(countryCodeData) {\n      this.countryCodeData = countryCodeData;\n      this.value = '';\n      this.preferredCountries = [];\n      this.enablePlaceholder = true;\n      this.numberFormat = PhoneNumberFormat.International;\n      this.cssClass = 'form-control';\n      this.onlyCountries = [];\n      this.enableAutoCountrySelect = true;\n      this.searchCountryFlag = false;\n      this.searchCountryField = [SearchCountryField.All];\n      this.searchCountryPlaceholder = 'Search Country';\n      this.selectFirstCountry = true;\n      this.phoneValidation = true;\n      this.inputId = 'phone';\n      this.separateDialCode = false;\n      this.countryChange = new EventEmitter();\n      this.selectedCountry = {\n        areaCodes: undefined,\n        dialCode: '',\n        htmlId: '',\n        flagClass: '',\n        iso2: '',\n        name: '',\n        placeHolder: '',\n        priority: 0\n      };\n      this.phoneNumber = '';\n      this.allCountries = [];\n      this.preferredCountriesInDropDown = []; // Has to be 'any' to prevent a need to install @types/google-libphonenumber by the package user...\n\n      this.phoneUtil = lpn.PhoneNumberUtil.getInstance();\n      this.disabled = false;\n      this.errors = ['Phone number is required.'];\n      this.countrySearchText = '';\n\n      this.onTouched = () => {};\n\n      this.propagateChange = _ => {}; // If this is not set, ngx-bootstrap will try to use the bs3 CSS (which is not what we've embedded) and will\n      // Add the wrong classes and such\n\n\n      setTheme('bs4');\n    }\n\n    ngOnInit() {\n      this.init();\n    }\n\n    ngOnChanges(changes) {\n      const selectedISO = changes['selectedCountryISO'];\n\n      if (this.allCountries && selectedISO && selectedISO.currentValue !== selectedISO.previousValue) {\n        this.updateSelectedCountry();\n      }\n\n      if (changes['preferredCountries']) {\n        this.updatePreferredCountries();\n      }\n\n      this.checkSeparateDialCodeStyle();\n    }\n    /*\n        This is a wrapper method to avoid calling this.ngOnInit() in writeValue().\n        Ref: http://codelyzer.com/rules/no-life-cycle-call/\n    */\n\n\n    init() {\n      this.fetchCountryData();\n\n      if (this.preferredCountries.length) {\n        this.updatePreferredCountries();\n      }\n\n      if (this.onlyCountries.length) {\n        this.allCountries = this.allCountries.filter(c => this.onlyCountries.includes(c.iso2));\n      }\n\n      if (this.selectFirstCountry) {\n        if (this.preferredCountriesInDropDown.length) {\n          this.setSelectedCountry(this.preferredCountriesInDropDown[0]);\n        } else {\n          this.setSelectedCountry(this.allCountries[0]);\n        }\n      }\n\n      this.updateSelectedCountry();\n      this.checkSeparateDialCodeStyle();\n    }\n\n    setSelectedCountry(country) {\n      this.selectedCountry = country;\n      this.countryChange.emit(country);\n    }\n    /**\n     * Search country based on country name, iso2, dialCode or all of them.\n     */\n\n\n    searchCountry() {\n      if (!this.countrySearchText) {\n        this.countryList.nativeElement.querySelector('.iti__country-list li').scrollIntoView({\n          behavior: 'smooth',\n          block: 'nearest',\n          inline: 'nearest'\n        });\n        return;\n      }\n\n      const countrySearchTextLower = this.countrySearchText.toLowerCase(); // @ts-ignore\n\n      const country = this.allCountries.filter(c => {\n        if (this.searchCountryField.indexOf(SearchCountryField.All) > -1) {\n          // Search in all fields\n          if (c.iso2.toLowerCase().startsWith(countrySearchTextLower)) {\n            return c;\n          }\n\n          if (c.name.toLowerCase().startsWith(countrySearchTextLower)) {\n            return c;\n          }\n\n          if (c.dialCode.startsWith(this.countrySearchText)) {\n            return c;\n          }\n        } else {\n          // Or search by specific SearchCountryField(s)\n          if (this.searchCountryField.indexOf(SearchCountryField.Iso2) > -1) {\n            if (c.iso2.toLowerCase().startsWith(countrySearchTextLower)) {\n              return c;\n            }\n          }\n\n          if (this.searchCountryField.indexOf(SearchCountryField.Name) > -1) {\n            if (c.name.toLowerCase().startsWith(countrySearchTextLower)) {\n              return c;\n            }\n          }\n\n          if (this.searchCountryField.indexOf(SearchCountryField.DialCode) > -1) {\n            if (c.dialCode.startsWith(this.countrySearchText)) {\n              return c;\n            }\n          }\n        }\n      });\n\n      if (country.length > 0) {\n        const el = this.countryList.nativeElement.querySelector('#' + country[0].htmlId);\n\n        if (el) {\n          el.scrollIntoView({\n            behavior: 'smooth',\n            block: 'nearest',\n            inline: 'nearest'\n          });\n        }\n      }\n\n      this.checkSeparateDialCodeStyle();\n    }\n\n    onPhoneNumberChange() {\n      let countryCode; // Handle the case where the user sets the value programatically based on a persisted ChangeData obj.\n\n      if (this.phoneNumber && typeof this.phoneNumber === 'object') {\n        const numberObj = this.phoneNumber;\n        this.phoneNumber = numberObj.number;\n        countryCode = numberObj.countryCode;\n      }\n\n      this.value = this.phoneNumber;\n      countryCode = countryCode || this.selectedCountry.iso2; // @ts-ignore\n\n      const number = this.getParsedNumber(this.phoneNumber, countryCode); // auto select country based on the extension (and areaCode if needed) (e.g select Canada if number starts with +1 416)\n\n      if (this.enableAutoCountrySelect) {\n        countryCode = number && number.getCountryCode() // @ts-ignore\n        ? this.getCountryIsoCode(number.getCountryCode(), number) : this.selectedCountry.iso2;\n\n        if (countryCode && countryCode !== this.selectedCountry.iso2) {\n          const newCountry = this.allCountries.sort((a, b) => {\n            return a.priority - b.priority;\n          }).find(c => c.iso2 === countryCode);\n\n          if (newCountry) {\n            this.selectedCountry = newCountry;\n          }\n        }\n      }\n\n      countryCode = countryCode ? countryCode : this.selectedCountry.iso2;\n      this.checkSeparateDialCodeStyle();\n\n      if (!this.value) {\n        // Reason: avoid https://stackoverflow.com/a/54358133/1617590\n        // tslint:disable-next-line: no-null-keyword\n        // @ts-ignore\n        this.propagateChange(null);\n      } else {\n        const intlNo = number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.INTERNATIONAL) : ''; // parse phoneNumber if separate dial code is needed\n\n        if (this.separateDialCode && intlNo) {\n          this.value = this.removeDialCode(intlNo);\n        }\n\n        this.propagateChange({\n          number: this.value,\n          internationalNumber: intlNo,\n          nationalNumber: number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.NATIONAL) : '',\n          e164Number: number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.E164) : '',\n          countryCode: countryCode.toUpperCase(),\n          dialCode: '+' + this.selectedCountry.dialCode\n        });\n      }\n    }\n\n    onCountrySelect(country, el) {\n      this.setSelectedCountry(country);\n      this.checkSeparateDialCodeStyle();\n\n      if (this.phoneNumber && this.phoneNumber.length > 0) {\n        this.value = this.phoneNumber;\n        const number = this.getParsedNumber(this.phoneNumber, this.selectedCountry.iso2);\n        const intlNo = number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.INTERNATIONAL) : ''; // parse phoneNumber if separate dial code is needed\n\n        if (this.separateDialCode && intlNo) {\n          this.value = this.removeDialCode(intlNo);\n        }\n\n        this.propagateChange({\n          number: this.value,\n          internationalNumber: intlNo,\n          nationalNumber: number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.NATIONAL) : '',\n          e164Number: number ? this.phoneUtil.format(number, lpn.PhoneNumberFormat.E164) : '',\n          countryCode: this.selectedCountry.iso2.toUpperCase(),\n          dialCode: '+' + this.selectedCountry.dialCode\n        });\n      } else {\n        // Reason: avoid https://stackoverflow.com/a/54358133/1617590\n        // tslint:disable-next-line: no-null-keyword\n        // @ts-ignore\n        this.propagateChange(null);\n      }\n\n      el.focus();\n    }\n\n    onInputKeyPress(event) {\n      const allowedChars = /[0-9\\+\\-\\(\\)\\ ]/;\n      const allowedCtrlChars = /[axcv]/; // Allows copy-pasting\n\n      const allowedOtherKeys = ['ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown', 'Home', 'End', 'Insert', 'Delete', 'Backspace'];\n\n      if (!allowedChars.test(event.key) && !(event.ctrlKey && allowedCtrlChars.test(event.key)) && !allowedOtherKeys.includes(event.key)) {\n        event.preventDefault();\n      }\n    }\n\n    registerOnChange(fn) {\n      this.propagateChange = fn;\n    }\n\n    registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n\n    writeValue(obj) {\n      if (obj === undefined) {\n        this.init();\n      }\n\n      this.phoneNumber = obj;\n      setTimeout(() => {\n        this.onPhoneNumberChange();\n      }, 1);\n    }\n\n    resolvePlaceholder() {\n      let placeholder = '';\n\n      if (this.customPlaceholder) {\n        placeholder = this.customPlaceholder;\n      } else if (this.selectedCountry.placeHolder) {\n        placeholder = this.selectedCountry.placeHolder;\n\n        if (this.separateDialCode) {\n          placeholder = this.removeDialCode(placeholder);\n        }\n      }\n\n      return placeholder;\n    }\n    /* --------------------------------- Helpers -------------------------------- */\n\n    /**\n     * Returns parse PhoneNumber object.\n     * @param phoneNumber string\n     * @param countryCode string\n     */\n\n\n    getParsedNumber(phoneNumber, countryCode) {\n      let number;\n\n      try {\n        number = this.phoneUtil.parse(phoneNumber, countryCode.toUpperCase());\n      } catch (e) {} // @ts-ignore\n\n\n      return number;\n    }\n    /**\n     * Adjusts input alignment based on the dial code presentation style.\n     */\n\n\n    checkSeparateDialCodeStyle() {\n      if (this.separateDialCode && this.selectedCountry) {\n        const cntryCd = this.selectedCountry.dialCode;\n        this.separateDialCodeClass = 'separate-dial-code iti-sdc-' + (cntryCd.length + 1);\n      } else {\n        this.separateDialCodeClass = '';\n      }\n    }\n    /**\n     * Cleans dialcode from phone number string.\n     * @param phoneNumber string\n     */\n\n\n    removeDialCode(phoneNumber) {\n      const number = this.getParsedNumber(phoneNumber, this.selectedCountry.iso2);\n      phoneNumber = this.phoneUtil.format(number, lpn.PhoneNumberFormat[this.numberFormat]);\n\n      if (phoneNumber.startsWith('+') && this.separateDialCode) {\n        phoneNumber = phoneNumber.substr(phoneNumber.indexOf(' ') + 1);\n      }\n\n      return phoneNumber;\n    }\n    /**\n     * Sifts through all countries and returns iso code of the primary country\n     * based on the number provided.\n     * @param countryCode country code in number format\n     * @param number PhoneNumber object\n     */\n\n\n    getCountryIsoCode(countryCode, number) {\n      // Will use this to match area code from the first numbers\n      // @ts-ignore\n      const rawNumber = number['values_']['2'].toString(); // List of all countries with countryCode (can be more than one. e.x. US, CA, DO, PR all have +1 countryCode)\n\n      const countries = this.allCountries.filter(c => c.dialCode === countryCode.toString()); // Main country is the country, which has no areaCodes specified in country-code.ts file.\n\n      const mainCountry = countries.find(c => c.areaCodes === undefined); // Secondary countries are all countries, which have areaCodes specified in country-code.ts file.\n\n      const secondaryCountries = countries.filter(c => c.areaCodes !== undefined);\n      let matchedCountry = mainCountry ? mainCountry.iso2 : undefined;\n      /*\n          Iterate over each secondary country and check if nationalNumber starts with any of areaCodes available.\n          If no matches found, fallback to the main country.\n      */\n\n      secondaryCountries.forEach(country => {\n        // @ts-ignore\n        country.areaCodes.forEach(areaCode => {\n          if (rawNumber.startsWith(areaCode)) {\n            matchedCountry = country.iso2;\n          }\n        });\n      });\n      return matchedCountry;\n    }\n    /**\n     * Gets formatted example phone number from phoneUtil.\n     * @param countryCode string\n     */\n\n\n    getPhoneNumberPlaceHolder(countryCode) {\n      try {\n        return this.phoneUtil.format(this.phoneUtil.getExampleNumber(countryCode), lpn.PhoneNumberFormat[this.numberFormat]);\n      } catch (e) {\n        // @ts-ignore\n        return e;\n      }\n    }\n    /**\n     * Clearing the list to avoid duplicates (https://github.com/webcat12345/ngx-intl-tel-input/issues/248)\n     */\n\n\n    fetchCountryData() {\n      this.allCountries = [];\n      this.countryCodeData.allCountries.forEach(c => {\n        const country = {\n          name: c[0].toString(),\n          iso2: c[1].toString(),\n          dialCode: c[2].toString(),\n          priority: +c[3] || 0,\n          areaCodes: c[4] || undefined,\n          htmlId: `iti-0__item-${c[1].toString()}`,\n          flagClass: `iti__${c[1].toString().toLocaleLowerCase()}`,\n          placeHolder: ''\n        };\n\n        if (this.enablePlaceholder) {\n          country.placeHolder = this.getPhoneNumberPlaceHolder(country.iso2.toUpperCase());\n        }\n\n        this.allCountries.push(country);\n      });\n    }\n    /**\n     * Populates preferredCountriesInDropDown with prefferred countries.\n     */\n\n\n    updatePreferredCountries() {\n      if (this.preferredCountries.length) {\n        this.preferredCountriesInDropDown = [];\n        this.preferredCountries.forEach(iso2 => {\n          const preferredCountry = this.allCountries.filter(c => {\n            return c.iso2 === iso2;\n          });\n          this.preferredCountriesInDropDown.push(preferredCountry[0]);\n        });\n      }\n    }\n    /**\n     * Updates selectedCountry.\n     */\n\n\n    updateSelectedCountry() {\n      if (this.selectedCountryISO) {\n        // @ts-ignore\n        this.selectedCountry = this.allCountries.find(c => {\n          return c.iso2.toLowerCase() === this.selectedCountryISO.toLowerCase();\n        });\n\n        if (this.selectedCountry) {\n          if (this.phoneNumber) {\n            this.onPhoneNumberChange();\n          } else {\n            // Reason: avoid https://stackoverflow.com/a/54358133/1617590\n            // tslint:disable-next-line: no-null-keyword\n            // @ts-ignore\n            this.propagateChange(null);\n          }\n        }\n      }\n    }\n\n  }\n\n  NgxIntlTelInputComponent.ɵfac = function NgxIntlTelInputComponent_Factory(t) {\n    return new (t || NgxIntlTelInputComponent)(i0.ɵɵdirectiveInject(CountryCode));\n  };\n\n  NgxIntlTelInputComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: NgxIntlTelInputComponent,\n    selectors: [[\"ngx-intl-tel-input\"]],\n    viewQuery: function NgxIntlTelInputComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.countryList = _t.first);\n      }\n    },\n    inputs: {\n      value: \"value\",\n      preferredCountries: \"preferredCountries\",\n      enablePlaceholder: \"enablePlaceholder\",\n      customPlaceholder: \"customPlaceholder\",\n      numberFormat: \"numberFormat\",\n      cssClass: \"cssClass\",\n      onlyCountries: \"onlyCountries\",\n      enableAutoCountrySelect: \"enableAutoCountrySelect\",\n      searchCountryFlag: \"searchCountryFlag\",\n      searchCountryField: \"searchCountryField\",\n      searchCountryPlaceholder: \"searchCountryPlaceholder\",\n      maxLength: \"maxLength\",\n      selectFirstCountry: \"selectFirstCountry\",\n      selectedCountryISO: \"selectedCountryISO\",\n      phoneValidation: \"phoneValidation\",\n      inputId: \"inputId\",\n      separateDialCode: \"separateDialCode\"\n    },\n    outputs: {\n      countryChange: \"countryChange\"\n    },\n    features: [i0.ɵɵProvidersFeature([CountryCode, {\n      provide: NG_VALUE_ACCESSOR,\n      // tslint:disable-next-line:no-forward-ref\n      useExisting: forwardRef(() => NgxIntlTelInputComponent),\n      multi: true\n    }, {\n      provide: NG_VALIDATORS,\n      useValue: phoneNumberValidator,\n      multi: true\n    }]), i0.ɵɵNgOnChangesFeature],\n    decls: 9,\n    vars: 14,\n    consts: [[1, \"iti\", \"iti--allow-dropdown\", 3, \"ngClass\"], [\"dropdown\", \"\", 1, \"iti__flag-container\", 3, \"ngClass\", \"isDisabled\"], [\"dropdownToggle\", \"\", 1, \"iti__selected-flag\", \"dropdown-toggle\"], [1, \"iti__flag\", 3, \"ngClass\"], [\"class\", \"selected-dial-code\", 4, \"ngIf\"], [1, \"iti__arrow\"], [\"class\", \"dropdown-menu country-dropdown\", 4, \"dropdownMenu\"], [\"type\", \"tel\", \"autocomplete\", \"off\", 3, \"id\", \"ngClass\", \"ngModel\", \"disabled\", \"placeholder\", \"blur\", \"keypress\", \"ngModelChange\"], [\"focusable\", \"\"], [1, \"selected-dial-code\"], [1, \"dropdown-menu\", \"country-dropdown\"], [\"class\", \"search-container\", 4, \"ngIf\"], [1, \"iti__country-list\"], [\"countryList\", \"\"], [\"class\", \"iti__country iti__preferred\", 3, \"id\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"iti__divider\", 4, \"ngIf\"], [\"class\", \"iti__country iti__standard\", 3, \"id\", \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"search-container\"], [\"id\", \"country-search-box\", \"autofocus\", \"\", 3, \"ngModel\", \"placeholder\", \"ngModelChange\", \"keyup\", \"click\"], [1, \"iti__country\", \"iti__preferred\", 3, \"id\", \"click\"], [1, \"iti__flag-box\"], [1, \"iti__country-name\"], [1, \"iti__dial-code\"], [1, \"iti__divider\"], [1, \"iti__country\", \"iti__standard\", 3, \"id\", \"click\"]],\n    template: function NgxIntlTelInputComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵelement(3, \"div\", 3);\n        i0.ɵɵtemplate(4, NgxIntlTelInputComponent_div_4_Template, 2, 1, \"div\", 4);\n        i0.ɵɵelement(5, \"div\", 5);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(6, NgxIntlTelInputComponent_div_6_Template, 7, 4, \"div\", 6);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"input\", 7, 8);\n        i0.ɵɵlistener(\"blur\", function NgxIntlTelInputComponent_Template_input_blur_7_listener() {\n          return ctx.onTouched();\n        })(\"keypress\", function NgxIntlTelInputComponent_Template_input_keypress_7_listener($event) {\n          return ctx.onInputKeyPress($event);\n        })(\"ngModelChange\", function NgxIntlTelInputComponent_Template_input_ngModelChange_7_listener($event) {\n          return ctx.phoneNumber = $event;\n        })(\"ngModelChange\", function NgxIntlTelInputComponent_Template_input_ngModelChange_7_listener() {\n          return ctx.onPhoneNumberChange();\n        });\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", ctx.separateDialCodeClass);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(12, _c1, ctx.disabled))(\"isDisabled\", ctx.disabled);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngClass\", (ctx.selectedCountry == null ? null : ctx.selectedCountry.flagClass) || \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.separateDialCode);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"id\", ctx.inputId)(\"ngClass\", ctx.cssClass)(\"ngModel\", ctx.phoneNumber)(\"disabled\", ctx.disabled)(\"placeholder\", ctx.resolvePlaceholder());\n        i0.ɵɵattribute(\"maxLength\", ctx.maxLength)(\"validation\", ctx.phoneValidation);\n      }\n    },\n    dependencies: [i2.NgClass, i3.BsDropdownDirective, i3.BsDropdownToggleDirective, i2.NgIf, i3.BsDropdownMenuDirective, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel, NativeElementInjectorDirective, i2.NgForOf],\n    styles: [\".dropup[_ngcontent-%COMP%], .dropright[_ngcontent-%COMP%], .dropdown[_ngcontent-%COMP%], .dropleft[_ngcontent-%COMP%]{position:relative}.dropdown-toggle[_ngcontent-%COMP%]{white-space:nowrap}.dropdown-toggle[_ngcontent-%COMP%]:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";border-top:.3em solid;border-right:.3em solid transparent;border-bottom:0;border-left:.3em solid transparent}.dropdown-toggle[_ngcontent-%COMP%]:empty:after{margin-left:0}.dropdown-menu[_ngcontent-%COMP%]{position:absolute;top:100%;left:0;z-index:1000;display:none;float:left;min-width:10rem;padding:.5rem 0;margin:.125rem 0 0;font-size:1rem;color:#212529;text-align:left;list-style:none;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.15);border-radius:.25rem}.dropdown-menu-left[_ngcontent-%COMP%]{right:auto;left:0}.dropdown-menu-right[_ngcontent-%COMP%]{right:0;left:auto}@media (min-width: 576px){.dropdown-menu-sm-left[_ngcontent-%COMP%]{right:auto;left:0}.dropdown-menu-sm-right[_ngcontent-%COMP%]{right:0;left:auto}}@media (min-width: 768px){.dropdown-menu-md-left[_ngcontent-%COMP%]{right:auto;left:0}.dropdown-menu-md-right[_ngcontent-%COMP%]{right:0;left:auto}}@media (min-width: 992px){.dropdown-menu-lg-left[_ngcontent-%COMP%]{right:auto;left:0}.dropdown-menu-lg-right[_ngcontent-%COMP%]{right:0;left:auto}}@media (min-width: 1200px){.dropdown-menu-xl-left[_ngcontent-%COMP%]{right:auto;left:0}.dropdown-menu-xl-right[_ngcontent-%COMP%]{right:0;left:auto}}.dropup[_ngcontent-%COMP%]   .dropdown-menu[_ngcontent-%COMP%]{top:auto;bottom:100%;margin-top:0;margin-bottom:.125rem}.dropup[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";border-top:0;border-right:.3em solid transparent;border-bottom:.3em solid;border-left:.3em solid transparent}.dropup[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:empty:after{margin-left:0}.dropright[_ngcontent-%COMP%]   .dropdown-menu[_ngcontent-%COMP%]{top:0;right:auto;left:100%;margin-top:0;margin-left:.125rem}.dropright[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\";border-top:.3em solid transparent;border-right:0;border-bottom:.3em solid transparent;border-left:.3em solid}.dropright[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:empty:after{margin-left:0}.dropright[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:after{vertical-align:0}.dropleft[_ngcontent-%COMP%]   .dropdown-menu[_ngcontent-%COMP%]{top:0;right:100%;left:auto;margin-top:0;margin-right:.125rem}.dropleft[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:after{display:inline-block;margin-left:.255em;vertical-align:.255em;content:\\\"\\\"}.dropleft[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:after{display:none}.dropleft[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:before{display:inline-block;margin-right:.255em;vertical-align:.255em;content:\\\"\\\";border-top:.3em solid transparent;border-right:.3em solid;border-bottom:.3em solid transparent}.dropleft[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:empty:after{margin-left:0}.dropleft[_ngcontent-%COMP%]   .dropdown-toggle[_ngcontent-%COMP%]:before{vertical-align:0}.dropdown-menu[x-placement^=top][_ngcontent-%COMP%], .dropdown-menu[x-placement^=right][_ngcontent-%COMP%], .dropdown-menu[x-placement^=bottom][_ngcontent-%COMP%], .dropdown-menu[x-placement^=left][_ngcontent-%COMP%]{right:auto;bottom:auto}.dropdown-divider[_ngcontent-%COMP%]{height:0;margin:.5rem 0;overflow:hidden;border-top:1px solid #e9ecef}.dropdown-item[_ngcontent-%COMP%]{display:block;width:100%;padding:.25rem 1.5rem;clear:both;font-weight:400;color:#212529;text-align:inherit;white-space:nowrap;background-color:transparent;border:0}.dropdown-item[_ngcontent-%COMP%]:hover, .dropdown-item[_ngcontent-%COMP%]:focus{color:#16181b;text-decoration:none;background-color:#f8f9fa}.dropdown-item.active[_ngcontent-%COMP%], .dropdown-item[_ngcontent-%COMP%]:active{color:#fff;text-decoration:none;background-color:#007bff}.dropdown-item.disabled[_ngcontent-%COMP%], .dropdown-item[_ngcontent-%COMP%]:disabled{color:#6c757d;pointer-events:none;background-color:transparent}.dropdown-menu.show[_ngcontent-%COMP%]{display:block}.dropdown-header[_ngcontent-%COMP%]{display:block;padding:.5rem 1.5rem;margin-bottom:0;font-size:.875rem;color:#6c757d;white-space:nowrap}.dropdown-item-text[_ngcontent-%COMP%]{display:block;padding:.25rem 1.5rem;color:#212529}\", \"li.iti__country[_ngcontent-%COMP%]:hover{background-color:#0000000d}.iti__selected-flag.dropdown-toggle[_ngcontent-%COMP%]:after{content:none}.iti__flag-container.disabled[_ngcontent-%COMP%]{cursor:default!important}.iti.iti--allow-dropdown[_ngcontent-%COMP%]   .flag-container.disabled[_ngcontent-%COMP%]:hover   .iti__selected-flag[_ngcontent-%COMP%]{background:none}.country-dropdown[_ngcontent-%COMP%]{border:1px solid #ccc;width:-moz-fit-content;width:fit-content;padding:1px;border-collapse:collapse}.search-container[_ngcontent-%COMP%]{position:relative}.search-container[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{width:100%;border:none;border-bottom:1px solid #ccc;padding-left:10px}.search-icon[_ngcontent-%COMP%]{position:absolute;z-index:2;width:25px;margin:1px 10px}.iti__country-list[_ngcontent-%COMP%]{position:relative;border:none}.iti[_ngcontent-%COMP%]   input#country-search-box[_ngcontent-%COMP%]{padding-left:6px}.iti[_ngcontent-%COMP%]   .selected-dial-code[_ngcontent-%COMP%]{margin-left:6px}.iti.separate-dial-code[_ngcontent-%COMP%]   .iti__selected-flag[_ngcontent-%COMP%], .iti.separate-dial-code.iti--allow-dropdown.iti-sdc-2[_ngcontent-%COMP%]   .iti__selected-flag[_ngcontent-%COMP%], .iti.separate-dial-code.iti--allow-dropdown.iti-sdc-3[_ngcontent-%COMP%]   .iti__selected-flag[_ngcontent-%COMP%], .iti.separate-dial-code.iti--allow-dropdown.iti-sdc-4[_ngcontent-%COMP%]   .iti__selected-flag[_ngcontent-%COMP%]{width:93px}.iti.separate-dial-code[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .iti.separate-dial-code.iti--allow-dropdown.iti-sdc-2[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .iti.separate-dial-code.iti--allow-dropdown.iti-sdc-3[_ngcontent-%COMP%]   input[_ngcontent-%COMP%], .iti.separate-dial-code.iti--allow-dropdown.iti-sdc-4[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{padding-left:98px}\"]\n  });\n  return NgxIntlTelInputComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst dropdownModuleForRoot = BsDropdownModule.forRoot();\nlet NgxIntlTelInputModule = /*#__PURE__*/(() => {\n  class NgxIntlTelInputModule {}\n\n  NgxIntlTelInputModule.ɵfac = function NgxIntlTelInputModule_Factory(t) {\n    return new (t || NgxIntlTelInputModule)();\n  };\n\n  NgxIntlTelInputModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: NgxIntlTelInputModule\n  });\n  NgxIntlTelInputModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, ReactiveFormsModule, dropdownModuleForRoot]]\n  });\n  return NgxIntlTelInputModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of ngx-intl-tel-input\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CountryISO, NativeElementInjectorDirective, NgxIntlTelInputComponent, NgxIntlTelInputModule, PhoneNumberFormat, SearchCountryField, dropdownModuleForRoot }; //# sourceMappingURL=ngx-intl-tel-input.mjs.map","map":null,"metadata":{},"sourceType":"module"}