{"ast":null,"code":"import { DataUtil, getUniqueIdWithPrefix, EventHandlerUtil } from '../_utils/index'; // Helpers\n\nimport { CookieComponent } from './_CookieComponent';\nconst defaultToggleOptions = {\n  saveState: false\n};\nlet ToggleComponent = /*#__PURE__*/(() => {\n  class ToggleComponent {\n    constructor(_element, options) {\n      this.state = '';\n      this.mode = '';\n      this.target = null;\n      this.attribute = '';\n\n      this._handlers = () => {\n        this.element.addEventListener('click', e => {\n          e.preventDefault();\n\n          if (this.mode === '') {\n            this._toggle();\n\n            return;\n          }\n\n          if (this.mode === 'off' && !this._isEnabled()) {\n            this._toggle();\n          } else if (this.mode === 'on' && this._isEnabled()) {\n            this._toggle();\n          }\n        });\n      }; // Event handlers\n\n\n      this._toggle = () => {\n        // Trigger \"after.toggle\" event\n        EventHandlerUtil.trigger(this.element, 'kt.toggle.change');\n\n        if (this._isEnabled()) {\n          this._disable();\n        } else {\n          this._enable();\n        } // Trigger \"before.toggle\" event\n\n\n        EventHandlerUtil.trigger(this.element, 'kt.toggle.changed');\n        return this;\n      };\n\n      this._enable = () => {\n        var _a;\n\n        if (this._isEnabled()) {\n          return;\n        }\n\n        EventHandlerUtil.trigger(this.element, 'kt.toggle.enable');\n        (_a = this.target) === null || _a === void 0 ? void 0 : _a.setAttribute(this.attribute, 'on');\n\n        if (this.state.length > 0) {\n          this.element.classList.add(this.state);\n        }\n\n        if (this.options.saveState) {\n          CookieComponent.set(this.attribute, 'on', {});\n        }\n\n        EventHandlerUtil.trigger(this.element, 'kt.toggle.enabled');\n        return this;\n      };\n\n      this._disable = () => {\n        var _a;\n\n        if (!this._isEnabled()) {\n          return false;\n        }\n\n        EventHandlerUtil.trigger(this.element, 'kt.toggle.disable');\n        (_a = this.target) === null || _a === void 0 ? void 0 : _a.removeAttribute(this.attribute);\n\n        if (this.state.length > 0) {\n          this.element.classList.remove(this.state);\n        }\n\n        if (this.options.saveState) {\n          CookieComponent.delete(this.attribute);\n        }\n\n        EventHandlerUtil.trigger(this.element, 'kt.toggle.disabled');\n        return this;\n      };\n\n      this._isEnabled = () => {\n        if (!this.target) {\n          return false;\n        }\n\n        return String(this.target.getAttribute(this.attribute)).toLowerCase() === 'on';\n      }; ///////////////////////\n      // ** Public API  ** //\n      ///////////////////////\n      // Plugin API\n      // Plugin API\n\n\n      this.toggle = () => {\n        return this._toggle();\n      };\n\n      this.enable = () => {\n        return this._enable();\n      };\n\n      this.disable = () => {\n        return this._disable();\n      };\n\n      this.isEnabled = () => {\n        return this._isEnabled();\n      };\n\n      this.goElement = () => {\n        return this.element;\n      }; // Event API\n\n\n      this.on = (name, handler) => {\n        return EventHandlerUtil.on(this.element, name, handler);\n      };\n\n      this.one = (name, handler) => {\n        return EventHandlerUtil.one(this.element, name, handler);\n      };\n\n      this.off = (name, handlerId) => {\n        return EventHandlerUtil.off(this.element, name, handlerId);\n      };\n\n      this.trigger = (name, event) => {\n        return EventHandlerUtil.trigger(this.element, name, event);\n      };\n\n      this.options = Object.assign(defaultToggleOptions, options);\n      this.instanceUid = getUniqueIdWithPrefix('toggle');\n      this.element = _element;\n      const elementTargetAttr = this.element.getAttribute('data-kt-toggle-target');\n\n      if (elementTargetAttr) {\n        this.target = document.querySelector(elementTargetAttr);\n      }\n\n      const elementToggleAttr = this.element.getAttribute('data-kt-toggle-state');\n      this.state = elementToggleAttr || '';\n      const elementModeAttr = this.element.getAttribute('data-kt-toggle-mode');\n      this.mode = elementModeAttr || '';\n      this.attribute = 'data-kt-' + this.element.getAttribute('data-kt-toggle-name'); // Event Handlers\n\n      this._handlers(); // Update Instance\n      // Bind Instance\n\n\n      DataUtil.set(this.element, 'toggle', this);\n    }\n\n  }\n\n  // Static methods\n  ToggleComponent.getInstance = el => {\n    const toggleElement = DataUtil.get(el, 'toggle');\n\n    if (toggleElement) {\n      return toggleElement;\n    }\n\n    return null;\n  };\n\n  ToggleComponent.createInstances = selector => {\n    const elements = document.body.querySelectorAll(selector);\n    elements.forEach(el => {\n      let toggle = ToggleComponent.getInstance(el);\n\n      if (!toggle) {\n        toggle = new ToggleComponent(el, defaultToggleOptions);\n      }\n    });\n  };\n\n  ToggleComponent.reinitialization = () => {\n    ToggleComponent.createInstances('[data-kt-toggle]');\n  };\n\n  ToggleComponent.bootstrap = () => {\n    ToggleComponent.createInstances('[data-kt-toggle]');\n  };\n\n  return ToggleComponent;\n})();\nexport { ToggleComponent, defaultToggleOptions };","map":null,"metadata":{},"sourceType":"module"}