{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { map, catchError, switchMap, finalize } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth-http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(authHttpService, router) {\n      this.authHttpService = authHttpService;\n      this.router = router; // private fields\n\n      this.unsubscribe = []; // Read more: => https://brianflove.com/2016/12/11/anguar-2-unsubscribe-observables/\n\n      this.authLocalStorageToken = `${environment.appVersion}-${environment.USERDATA_KEY}`;\n      this.isLoadingSubject = new BehaviorSubject(false);\n      this.currentUserSubject = new BehaviorSubject(undefined);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      this.isLoading$ = this.isLoadingSubject.asObservable();\n      const subscr = this.getUserByToken().subscribe();\n      this.unsubscribe.push(subscr);\n    }\n\n    get currentUserValue() {\n      return this.currentUserSubject.value;\n    }\n\n    set currentUserValue(user) {\n      this.currentUserSubject.next(user);\n    } // public methods\n\n\n    login(email, password) {\n      this.isLoadingSubject.next(true);\n      return this.authHttpService.login(email, password).pipe(map(auth => {\n        const result = this.setAuthFromLocalStorage(auth);\n        this.currentUserSubject.next(auth);\n        return true;\n      }), switchMap(() => this.getUserByToken()), catchError(err => {\n        console.error('err', err);\n        return of(undefined);\n      }), finalize(() => this.isLoadingSubject.next(false)));\n    }\n\n    logout() {\n      this.router.navigate(['/auth/login'], {\n        queryParams: {}\n      });\n      localStorage.removeItem(this.authLocalStorageToken);\n    }\n\n    getUserByToken() {\n      const auth = this.getAuthFromLocalStorage();\n\n      if (!auth || !auth.token) {\n        return of(undefined);\n      }\n\n      this.isLoadingSubject.next(true);\n      return this.authHttpService.getUserByToken(auth.token, auth.data.id).pipe(map(user => {\n        if (user) {\n          this.currentUserSubject.next(user.response.data);\n        } else {\n          this.logout();\n        }\n\n        return user;\n      }), finalize(() => this.isLoadingSubject.next(false)));\n    } // need create new user then login\n\n\n    registration(user) {\n      this.isLoadingSubject.next(true);\n      return this.authHttpService.createUser(user).pipe(map(() => {\n        this.isLoadingSubject.next(false);\n      }), switchMap(() => this.login(user.email, user.password)), catchError(err => {\n        console.error('err', err);\n        return of(undefined);\n      }), finalize(() => this.isLoadingSubject.next(false)));\n    }\n\n    forgotPassword(email) {\n      this.isLoadingSubject.next(true);\n      return this.authHttpService.forgotPassword(email).pipe(finalize(() => this.isLoadingSubject.next(false)));\n    } // private methods\n\n\n    setAuthFromLocalStorage(auth) {\n      // store auth authToken/refreshToken/epiresIn in local storage to keep user logged in between page refreshes\n      if (auth && auth.token) {\n        localStorage.setItem(this.authLocalStorageToken, JSON.stringify(auth)); // return true;\n      }\n\n      return false;\n    }\n\n    getAuthFromLocalStorage() {\n      try {\n        const lsValue = localStorage.getItem(this.authLocalStorageToken);\n\n        if (!lsValue) {\n          return undefined;\n        }\n\n        const authData = JSON.parse(lsValue);\n        return authData;\n      } catch (error) {\n        console.error(error);\n        return undefined;\n      }\n    }\n\n    addUser() {}\n\n    ngOnDestroy() {\n      this.unsubscribe.forEach(sb => sb.unsubscribe());\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.AuthHTTPService), i0.ɵɵinject(i2.Router));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}