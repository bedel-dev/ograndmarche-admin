{"ast":null,"code":"import { getScrollTop, getAttributeValueByBreakpoint, throttle, getObjectPropertyValueByKey, stringSnakeToCamel, getUniqueIdWithPrefix, DataUtil, ElementAnimateUtil } from '../_utils/index';\nconst defaultScrollTopOptions = {\n  offset: 200,\n  speed: 600\n};\nlet ScrollTopComponent = /*#__PURE__*/(() => {\n  class ScrollTopComponent {\n    constructor(_element, options) {\n      this._handlers = () => {\n        let timer;\n        window.addEventListener('scroll', () => {\n          throttle(timer, () => {\n            this._scroll();\n          });\n        });\n        this.element.addEventListener('click', e => {\n          e.preventDefault();\n\n          this._go();\n        });\n      };\n\n      this._scroll = () => {\n        const offset = parseInt(this._getOption('offset'));\n        const pos = getScrollTop(); // current vertical position\n\n        if (pos > offset) {\n          if (!document.body.hasAttribute('data-kt-scrolltop')) {\n            document.body.setAttribute('data-kt-scrolltop', 'on');\n          }\n        } else {\n          if (document.body.hasAttribute('data-kt-scrolltop')) {\n            document.body.removeAttribute('data-kt-scrolltop');\n          }\n        }\n      };\n\n      this._go = () => {\n        const speed = parseInt(this._getOption('speed'));\n        ElementAnimateUtil.scrollTop(0, speed);\n      };\n\n      this._getOption = name => {\n        const attr = this.element.getAttribute(`data-kt-scrolltop-${name}`);\n\n        if (attr) {\n          const value = getAttributeValueByBreakpoint(attr);\n          return value !== null && String(value) === 'true';\n        }\n\n        const optionName = stringSnakeToCamel(name);\n        const option = getObjectPropertyValueByKey(this.options, optionName);\n\n        if (option) {\n          return getAttributeValueByBreakpoint(option);\n        }\n\n        return null;\n      }; ///////////////////////\n      // ** Public API  ** //\n      ///////////////////////\n      // Plugin API\n\n\n      this.go = () => {\n        return this._go();\n      };\n\n      this.getElement = () => {\n        return this.element;\n      };\n\n      this.element = _element;\n      this.options = Object.assign(defaultScrollTopOptions, options);\n      this.instanceUid = getUniqueIdWithPrefix('scrolltop'); // Event Handlers\n\n      this._handlers(); // Bind Instance\n\n\n      DataUtil.set(this.element, 'scrolltop', this);\n    }\n\n  }\n\n  // Static methods\n  ScrollTopComponent.getInstance = el => {\n    const scrollTop = DataUtil.get(el, 'scrolltop');\n\n    if (scrollTop) {\n      return scrollTop;\n    }\n  };\n\n  ScrollTopComponent.createInstances = selector => {\n    const elements = document.body.querySelectorAll(selector);\n    elements.forEach(el => {\n      const item = el;\n      let scrollTop = ScrollTopComponent.getInstance(item);\n\n      if (!scrollTop) {\n        scrollTop = new ScrollTopComponent(item, defaultScrollTopOptions);\n      }\n    });\n  };\n\n  ScrollTopComponent.createInsance = (selector, options = defaultScrollTopOptions) => {\n    const element = document.body.querySelector(selector);\n\n    if (!element) {\n      return;\n    }\n\n    const item = element;\n    let scrollTop = ScrollTopComponent.getInstance(item);\n\n    if (!scrollTop) {\n      scrollTop = new ScrollTopComponent(item, options);\n    }\n\n    return scrollTop;\n  };\n\n  ScrollTopComponent.bootstrap = () => {\n    ScrollTopComponent.createInstances('[data-kt-scrolltop=\"true\"]');\n  };\n\n  ScrollTopComponent.reinitialization = () => {\n    ScrollTopComponent.createInstances('[data-kt-scrolltop=\"true\"]');\n  };\n\n  ScrollTopComponent.goTop = () => {\n    ElementAnimateUtil.scrollTop(0, defaultScrollTopOptions.speed);\n  };\n\n  return ScrollTopComponent;\n})();\nexport { ScrollTopComponent, defaultScrollTopOptions };","map":null,"metadata":{},"sourceType":"module"}