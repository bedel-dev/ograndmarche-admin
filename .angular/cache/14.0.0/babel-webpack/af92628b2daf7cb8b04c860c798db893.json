{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { BehaviorSubject } from 'rxjs';\nimport * as objectPath from 'object-path';\nimport { DarkHeaderConfig } from './configs/dark-header.config';\nimport { DarkSidebarConfig } from './configs/dark-sidebar.config';\nimport { LightHeaderConfig } from './configs/light-header.config';\nimport { LightSidebarConfig } from './configs/light-sidebar.config';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nconst LAYOUT_CONFIG_LOCAL_STORAGE_KEY = `${environment.appVersion}-layoutConfig`;\nconst BASE_LAYOUT_TYPE_LOCAL_STORAGE_KEY = `${environment.appVersion}-baseLayoutType`;\nconst defaultBaseLayoutType = 'dark-sidebar';\nconst defaultLayoutConfig = DarkSidebarConfig;\nexport function getEmptyHTMLAttributes() {\n  return {\n    asideMenu: {},\n    headerMobile: {},\n    headerMenu: {},\n    headerContainer: {},\n    pageTitle: {}\n  };\n}\nexport function getEmptyCssClasses() {\n  return {\n    header: [],\n    headerContainer: [],\n    headerMobile: [],\n    headerMenu: [],\n    aside: [],\n    asideMenu: [],\n    asideToggle: [],\n    toolbar: [],\n    toolbarContainer: [],\n    content: [],\n    contentContainer: [],\n    footerContainer: [],\n    sidebar: [],\n    pageTitle: [],\n    wrapper: []\n  };\n}\nexport let LayoutService = /*#__PURE__*/(() => {\n  class LayoutService {\n    constructor(activatedRoute) {\n      this.activatedRoute = activatedRoute;\n      this.currentLayoutTypeSubject = new BehaviorSubject(null);\n      this.layoutConfigSubject = new BehaviorSubject(this.getLayoutConfig(this.getBaseLayoutTypeFromRouteOrLocalStorage())); // scope list of css classes\n\n      this.classes = new BehaviorSubject(getEmptyCssClasses()); // scope list of html attributes\n\n      this.attrs = new BehaviorSubject(getEmptyHTMLAttributes());\n    }\n\n    getProp(path, config) {\n      if (config) {\n        return objectPath.get(config, path);\n      }\n\n      return objectPath.get(this.layoutConfigSubject.value, path);\n    }\n\n    setCSSClass(path, classesInStr) {\n      const updatedCssClasses = Object.assign({}, this.classes.value);\n      const cssClasses = updatedCssClasses[path];\n\n      if (!cssClasses) {\n        updatedCssClasses[path] = [];\n      }\n\n      classesInStr.split(' ').forEach(cssClass => updatedCssClasses[path].push(cssClass));\n      this.classes.next(updatedCssClasses);\n    }\n\n    getCSSClasses(path) {\n      const cssClasses = this.classes.value[path];\n\n      if (!cssClasses) {\n        return [];\n      }\n\n      return cssClasses;\n    }\n\n    getStringCSSClasses(path) {\n      return this.getCSSClasses(path).join(' ');\n    }\n\n    getHTMLAttributes(path) {\n      const attributesObj = this.attrs.value[path];\n\n      if (!attributesObj) {\n        return {};\n      }\n\n      return attributesObj;\n    }\n\n    setHTMLAttribute(path, attrKey, attrValue) {\n      const updatedAttributes = Object.assign({}, this.attrs.value);\n      const attributesObj = updatedAttributes[path];\n\n      if (!attributesObj) {\n        updatedAttributes[path] = {};\n      }\n\n      updatedAttributes[path][attrKey] = attrValue;\n      this.attrs.next(updatedAttributes);\n    }\n\n    getBaseLayoutTypeFromRouteOrLocalStorage() {\n      var _a, _b;\n\n      const routeData = (_b = (_a = this.activatedRoute.firstChild) === null || _a === void 0 ? void 0 : _a.snapshot) === null || _b === void 0 ? void 0 : _b.data;\n\n      if (routeData && routeData.layout) {\n        return routeData.layout;\n      }\n\n      return this.getBaseLayoutTypeFromLocalStorage();\n    }\n\n    getBaseLayoutTypeFromLocalStorage() {\n      if (localStorage) {\n        const layoutType = localStorage.getItem(BASE_LAYOUT_TYPE_LOCAL_STORAGE_KEY);\n\n        if (layoutType) {\n          return layoutType;\n        }\n\n        this.setBaseLayoutType(defaultBaseLayoutType);\n      }\n\n      return defaultBaseLayoutType;\n    }\n\n    getLayoutByType(layoutType) {\n      switch (layoutType) {\n        case 'dark-sidebar':\n          return DarkSidebarConfig;\n\n        case 'light-sidebar':\n          return LightSidebarConfig;\n\n        case 'dark-header':\n          return DarkHeaderConfig;\n\n        case 'light-header':\n          return LightHeaderConfig;\n\n        default:\n          return defaultLayoutConfig;\n      }\n    }\n\n    getLayoutConfig(layoutType) {\n      const storedLayoutType = this.getBaseLayoutTypeFromLocalStorage();\n\n      if (layoutType && storedLayoutType) {\n        const configInString = localStorage.getItem(`${layoutType}-${LAYOUT_CONFIG_LOCAL_STORAGE_KEY}`);\n\n        if (configInString) {\n          try {\n            return JSON.parse(configInString);\n          } catch (ex) {\n            console.log('reading config exception', ex);\n          }\n        }\n      }\n\n      return this.getLayoutByType(layoutType);\n    }\n\n    setBaseLayoutType(layoutType) {\n      const config = this.getLayoutByType(layoutType);\n\n      if (localStorage) {\n        localStorage.setItem(BASE_LAYOUT_TYPE_LOCAL_STORAGE_KEY, layoutType);\n        localStorage.setItem(`${layoutType}-${LAYOUT_CONFIG_LOCAL_STORAGE_KEY}`, JSON.stringify(config));\n      } // document.location.reload();\n\n    }\n\n    saveBaseConfig(config) {\n      const baseLayoutType = this.getBaseLayoutTypeFromLocalStorage();\n\n      if (localStorage) {\n        localStorage.setItem(`${baseLayoutType}-${LAYOUT_CONFIG_LOCAL_STORAGE_KEY}`, JSON.stringify(config));\n      }\n\n      document.location.reload();\n    }\n\n    resetBaseConfig() {\n      const layoutType = this.getBaseLayoutTypeFromLocalStorage;\n\n      if (localStorage) {\n        localStorage.removeItem(`${layoutType}-${LAYOUT_CONFIG_LOCAL_STORAGE_KEY}`);\n      }\n\n      document.location.reload();\n    }\n\n    reInitProps() {\n      this.classes.next(getEmptyCssClasses());\n      this.attrs.next(getEmptyHTMLAttributes());\n    }\n\n  }\n\n  LayoutService.ɵfac = function LayoutService_Factory(t) {\n    return new (t || LayoutService)(i0.ɵɵinject(i1.ActivatedRoute));\n  };\n\n  LayoutService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LayoutService,\n    factory: LayoutService.ɵfac,\n    providedIn: 'root'\n  });\n  return LayoutService;\n})();","map":null,"metadata":{},"sourceType":"module"}