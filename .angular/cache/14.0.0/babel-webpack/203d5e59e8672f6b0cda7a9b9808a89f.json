{"ast":null,"code":"import { getElementOffset, getScrollTop, getAttributeValueByBreakpoint, getUniqueIdWithPrefix, getObjectPropertyValueByKey, stringSnakeToCamel, getCSS, DataUtil, ElementAnimateUtil, ElementStyleUtil, EventHandlerUtil } from '../_utils/index';\nconst defaultStickyOptions = {\n  offset: 200,\n  reverse: false,\n  animation: true,\n  animationSpeed: '0.3s',\n  animationClass: 'animation-slide-in-down'\n};\nlet StickyComponent = /*#__PURE__*/(() => {\n  class StickyComponent {\n    constructor(_element, options) {\n      this.instanceName = '';\n\n      this.scroll = () => {\n        let offset = this.getOption('offset');\n        let reverse = this.getOption('reverse'); // Exit if false\n\n        if (offset === false) {\n          return;\n        }\n\n        let offsetNum = 0;\n\n        if (typeof offset === 'string') {\n          offsetNum = parseInt(offset);\n        }\n\n        const st = getScrollTop(); // Reverse scroll mode\n\n        if (reverse === true) {\n          // Release on reverse scroll mode\n          if (st > offsetNum && this.lastScrollTop < st) {\n            if (document.body.hasAttribute(this.attributeName) === false) {\n              this.enable();\n              document.body.setAttribute(this.attributeName, 'on');\n            }\n\n            if (this.eventTriggerState === true) {\n              EventHandlerUtil.trigger(this.element, 'kt.sticky.on');\n              EventHandlerUtil.trigger(this.element, 'kt.sticky.change');\n              this.eventTriggerState = false;\n            }\n          } else {\n            // Back scroll mode\n            if (document.body.hasAttribute(this.attributeName)) {\n              this.disable();\n              document.body.removeAttribute(this.attributeName);\n            }\n\n            if (this.eventTriggerState === false) {\n              EventHandlerUtil.trigger(this.element, 'kt.sticky.off');\n              EventHandlerUtil.trigger(this.element, 'kt.sticky.change');\n              this.eventTriggerState = true;\n            }\n          }\n\n          this.lastScrollTop = st;\n          return;\n        } // Classic scroll mode\n\n\n        if (st > offsetNum) {\n          if (document.body.hasAttribute(this.attributeName) === false) {\n            this.enable();\n            document.body.setAttribute(this.attributeName, 'on');\n          }\n\n          if (this.eventTriggerState === true) {\n            EventHandlerUtil.trigger(this.element, 'kt.sticky.on');\n            EventHandlerUtil.trigger(this.element, 'kt.sticky.change');\n            this.eventTriggerState = false;\n          }\n        } else {\n          // back scroll mode\n          if (document.body.hasAttribute(this.attributeName) === true) {\n            this.disable();\n            document.body.removeAttribute(this.attributeName);\n          }\n\n          if (this.eventTriggerState === false) {\n            EventHandlerUtil.trigger(this.element, 'kt.sticky.off');\n            EventHandlerUtil.trigger(this.element, 'kt.sticky.change');\n            this.eventTriggerState = true;\n          }\n        }\n      };\n\n      this.getOption = name => {\n        const dataStickyAttr = 'data-kt-sticky-' + name;\n\n        if (this.element.hasAttribute(dataStickyAttr) === true) {\n          const attrValueInStr = this.element.getAttribute(dataStickyAttr);\n          const attrValue = getAttributeValueByBreakpoint(attrValueInStr || '');\n\n          if (attrValue !== null && String(attrValue) === 'true') {\n            return true;\n          } else if (attrValue !== null && String(attrValue) === 'false') {\n            return false;\n          }\n\n          return attrValue;\n        } else {\n          const optionName = stringSnakeToCamel(name);\n          const option = getObjectPropertyValueByKey(this.options, optionName);\n\n          if (option) {\n            return getAttributeValueByBreakpoint(option);\n          }\n        }\n      };\n\n      this.disable = () => {\n        ElementStyleUtil.remove(this.element, 'top');\n        ElementStyleUtil.remove(this.element, 'width');\n        ElementStyleUtil.remove(this.element, 'left');\n        ElementStyleUtil.remove(this.element, 'right');\n        ElementStyleUtil.remove(this.element, 'z-index');\n        ElementStyleUtil.remove(this.element, 'position');\n      };\n\n      this.enable = (update = false) => {\n        const top = this.getOption('top');\n        const left = this.getOption('left'); // const right = this.getOption(\"right\");\n\n        let width = this.getOption('width');\n        const zindex = this.getOption('zindex');\n\n        if (update !== true && this.getOption('animation') === true) {\n          ElementStyleUtil.set(this.element, 'animationDuration', this.getOption('animationSpeed'));\n          ElementAnimateUtil.animateClass(this.element, 'animation ' + this.getOption('animationClass'));\n        }\n\n        if (zindex !== null) {\n          ElementStyleUtil.set(this.element, 'z-index', zindex);\n          ElementStyleUtil.set(this.element, 'position', 'fixed');\n        }\n\n        if (top !== null) {\n          ElementStyleUtil.set(this.element, 'top', top);\n        }\n\n        if (width !== null && width !== undefined) {\n          const widthTarget = getObjectPropertyValueByKey(width, 'target');\n\n          if (widthTarget) {\n            const targetElement = document.querySelector(widthTarget);\n\n            if (targetElement) {\n              width = getCSS(targetElement, 'width');\n            }\n          }\n\n          ElementStyleUtil.set(this.element, 'width', width);\n        }\n\n        if (left !== null) {\n          if (String(left).toLowerCase() === 'auto') {\n            var offsetLeft = getElementOffset(this.element).left;\n\n            if (offsetLeft > 0) {\n              ElementStyleUtil.set(this.element, 'left', String(offsetLeft) + 'px');\n            }\n          }\n        }\n      };\n\n      this.update = () => {\n        if (document.body.hasAttribute(this.attributeName) === true) {\n          this.disable();\n          document.body.removeAttribute(this.attributeName);\n          this.enable(true);\n          document.body.setAttribute(this.attributeName, 'on');\n        }\n      }; // Event API\n\n\n      this.on = (name, callBack) => {\n        return EventHandlerUtil.on(this.element, name, callBack);\n      };\n\n      this.one = (name, callback) => {\n        return EventHandlerUtil.one(this.element, name, callback);\n      };\n\n      this.off = (name, handlerId) => {\n        return EventHandlerUtil.off(this.element, name, handlerId);\n      };\n\n      this.trigger = name => {\n        return EventHandlerUtil.trigger(this.element, name);\n      };\n\n      this.element = _element;\n      this.options = Object.assign(defaultStickyOptions, options);\n      this.instanceUid = getUniqueIdWithPrefix('sticky');\n      this.instanceName = this.element.getAttribute('data-kt-sticky-name');\n      this.attributeName = 'data-kt-sticky-' + this.instanceName;\n      this.eventTriggerState = true;\n      this.lastScrollTop = 0; // Event Handlers\n\n      window.addEventListener('scroll', this.scroll); // Initial Launch\n\n      this.scroll();\n      DataUtil.set(this.element, 'sticky', this);\n    } // Static methods\n\n\n    static hasInstace(element) {\n      return DataUtil.has(element, 'sticky');\n    }\n\n    static getInstance(element) {\n      if (element !== null && StickyComponent.hasInstace(element)) {\n        const data = DataUtil.get(element, 'sticky');\n\n        if (data) {\n          return data;\n        }\n      }\n    } // Create Instances\n\n\n    static createInstances(selector) {\n      const elements = document.body.querySelectorAll(selector);\n      elements.forEach(element => {\n        const item = element;\n        let sticky = StickyComponent.getInstance(item);\n\n        if (!sticky) {\n          sticky = new StickyComponent(item, defaultStickyOptions);\n        }\n      });\n    }\n\n    static bootstrap(attr = '[data-kt-sticky=\"true\"]') {\n      StickyComponent.createInstances(attr);\n    }\n\n    static reInitialization(attr = '[data-kt-sticky=\"true\"]') {\n      StickyComponent.createInstances(attr);\n    }\n\n  }\n\n  StickyComponent.createInsance = (selector, options = defaultStickyOptions) => {\n    const element = document.body.querySelector(selector);\n\n    if (!element) {\n      return;\n    }\n\n    const item = element;\n    let sticky = StickyComponent.getInstance(item);\n\n    if (!sticky) {\n      sticky = new StickyComponent(item, options);\n    }\n\n    return sticky;\n  };\n\n  return StickyComponent;\n})();\nexport { StickyComponent, defaultStickyOptions };","map":null,"metadata":{},"sourceType":"module"}