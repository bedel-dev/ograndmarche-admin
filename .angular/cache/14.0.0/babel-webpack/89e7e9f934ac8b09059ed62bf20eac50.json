{"ast":null,"code":"import { getUniqueIdWithPrefix } from './_TypesHelpers';\nexport class DOMEventHandlerUtil {\n  static on(element, selector, eventName, callBack) {\n    const eventId = getUniqueIdWithPrefix('DOMEvent');\n    DOMEventHandlerUtil.store.set(eventId, e => {\n      const targets = element.querySelectorAll(selector);\n      let target = e.target;\n\n      while (target && target !== element) {\n        for (let i = 0; i < targets.length; i++) {\n          if (target === targets[i]) {\n            callBack.call(target, e);\n          }\n        }\n\n        if (target.parentElement) {\n          target = target.parentElement;\n        } else {\n          target = null;\n        }\n      }\n    });\n    element.addEventListener(eventName, DOMEventHandlerUtil.store.get(eventId));\n    return eventId;\n  }\n\n  static off(element, eventName, eventId) {\n    const funcFromStore = DOMEventHandlerUtil.store.get(eventId);\n\n    if (!funcFromStore) {\n      return;\n    }\n\n    element.removeEventListener(eventName, funcFromStore);\n    DOMEventHandlerUtil.store.delete(eventId);\n  }\n\n  static one(element, eventName, callBack) {\n    element.addEventListener(eventName, function calee(e) {\n      // remove event\n      if (e.target && e.target.removeEventListener) {\n        e.target.removeEventListener(e.type, calee);\n      }\n\n      if (element && e && e.currentTarget) {\n        // if (element && element.removeEventListener && e && e.currentTarget) {\n        e.currentTarget.removeEventListener(e.type, calee);\n      } // call hander\n\n\n      return callBack(e);\n    });\n  }\n\n}\nDOMEventHandlerUtil.store = new Map();","map":null,"metadata":{},"sourceType":"module"}