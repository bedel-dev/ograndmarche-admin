{"ast":null,"code":"import { DataUtil } from './_DataUtil';\nimport { getUniqueIdWithPrefix } from './_TypesHelpers';\nexport let EventHandlerUtil = /*#__PURE__*/(() => {\n  class EventHandlerUtil {\n    static setEventMetasByName(name, handlers) {\n      EventHandlerUtil.store[name] = handlers;\n    }\n\n    static getEventMetaByName(name) {\n      return EventHandlerUtil.store[name];\n    }\n\n    static setEventMetaByNameAndHandlerId(name, handlerId, meta) {\n      if (EventHandlerUtil.store[name]) {\n        EventHandlerUtil.store[name][handlerId] = meta;\n        return;\n      }\n\n      EventHandlerUtil.store[name] = {};\n      EventHandlerUtil.store[name][handlerId] = meta;\n    }\n\n    static getEventMetaByHandlerId(name, handlerId) {\n      const handlersIds = EventHandlerUtil.store[name];\n\n      if (!handlersIds) {\n        return;\n      }\n\n      return handlersIds[handlerId];\n    }\n\n    static setFiredByNameAndHandlerId(name, handerId, fired) {\n      const meta = EventHandlerUtil.getEventMetaByHandlerId(name, handerId);\n\n      if (!meta) {\n        return;\n      }\n\n      meta.fired = fired;\n      EventHandlerUtil.setEventMetaByNameAndHandlerId(name, handerId, meta);\n    }\n\n    static addEvent(element, name, callback, one = false) {\n      const handlerId = getUniqueIdWithPrefix('event');\n      const data = DataUtil.get(element, name);\n      const handlersIds = data ? data : [];\n      handlersIds.push(handlerId);\n      DataUtil.set(element, name, handlersIds);\n      const meta = {\n        name: name,\n        callback: callback,\n        one: one,\n        fired: false\n      };\n      EventHandlerUtil.setEventMetaByNameAndHandlerId(name, handlerId, meta);\n      return handlerId;\n    }\n\n    static removeEvent(element, name, handerId) {\n      DataUtil.removeOne(element, name, handerId);\n      const handlersIds = EventHandlerUtil.store[name];\n\n      if (handlersIds) {\n        return;\n      }\n\n      delete EventHandlerUtil.store[name][handerId];\n    }\n\n    static trigger(element, name, target, e) {\n      let returnValue = true;\n\n      if (!DataUtil.has(element, name)) {\n        return returnValue;\n      }\n\n      let eventValue;\n      let handlerId;\n      const data = DataUtil.get(element, name);\n      const handlersIds = data ? data : [];\n\n      for (let i = 0; i < handlersIds.length; i++) {\n        handlerId = handlersIds[i];\n\n        if (EventHandlerUtil.store[name] && EventHandlerUtil.store[name][handlerId]) {\n          const handler = EventHandlerUtil.store[name][handlerId];\n\n          if (handler.name === name) {\n            if (handler.one) {\n              if (handler.fired) {\n                EventHandlerUtil.store[name][handlerId].fired = true;\n                eventValue = handler.callback.call(this, target);\n              }\n            } else {\n              eventValue = handler.callback.call(this, target);\n            }\n\n            if (eventValue === false) {\n              returnValue = false;\n            }\n          }\n        }\n      }\n\n      return returnValue;\n    }\n\n    static one(element, name, callBack) {\n      EventHandlerUtil.addEvent(element, name, callBack, true);\n    }\n\n    static off(element, name, handerId) {\n      EventHandlerUtil.removeEvent(element, name, handerId);\n    }\n\n  }\n\n  EventHandlerUtil.store = {};\n\n  EventHandlerUtil.on = function (element, name, callBack) {\n    EventHandlerUtil.addEvent(element, name, callBack, false);\n  };\n\n  return EventHandlerUtil;\n})();","map":null,"metadata":{},"sourceType":"module"}