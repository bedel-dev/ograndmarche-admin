{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { ThemeModeComponent } from '../../../kt/layout';\nimport * as i0 from \"@angular/core\";\nconst systemMode = ThemeModeComponent.getSystemMode();\n\nconst themeModeSwitchHelper = _mode => {\n  // change background image url\n  const mode = _mode !== 'system' ? _mode : systemMode;\n  const imageUrl = './assets/media/patterns/header-bg' + (mode === 'light' ? '.jpg' : '-dark.png');\n  document.body.style.backgroundImage = `url(\"${imageUrl}\")`;\n};\n\nconst themeModeLSKey = 'kt_theme_mode_value';\nconst themeMenuModeLSKey = 'kt_theme_mode_menu';\n\nconst getThemeModeFromLocalStorage = lsKey => {\n  if (!localStorage) {\n    return 'light';\n  }\n\n  const data = localStorage.getItem(lsKey);\n\n  if (!data) {\n    return 'light';\n  }\n\n  if (data === 'light') {\n    return 'light';\n  }\n\n  if (data === 'dark') {\n    return 'dark';\n  }\n\n  return 'system';\n};\n\nexport let ThemeModeService = /*#__PURE__*/(() => {\n  class ThemeModeService {\n    constructor() {\n      this.mode = new BehaviorSubject(getThemeModeFromLocalStorage(themeModeLSKey));\n      this.menuMode = new BehaviorSubject(getThemeModeFromLocalStorage(themeMenuModeLSKey));\n    }\n\n    updateMode(_mode) {\n      const updatedMode = _mode === 'system' ? systemMode : _mode;\n      this.mode.next(updatedMode); // themeModeSwitchHelper(updatedMode)\n\n      if (localStorage) {\n        localStorage.setItem(themeModeLSKey, updatedMode);\n      }\n\n      document.documentElement.setAttribute('data-theme', updatedMode);\n      ThemeModeComponent.init();\n    }\n\n    updateMenuMode(_menuMode) {\n      this.menuMode.next(_menuMode);\n\n      if (localStorage) {\n        localStorage.setItem(themeMenuModeLSKey, _menuMode);\n      }\n    }\n\n    init() {\n      this.updateMode(this.mode.value);\n      this.updateMenuMode(this.menuMode.value);\n    }\n\n    switchMode(_mode) {\n      if (localStorage) {\n        const updatedMode = _mode === 'system' ? systemMode : _mode;\n        localStorage.setItem(themeModeLSKey, updatedMode);\n        localStorage.setItem(themeMenuModeLSKey, _mode);\n      }\n\n      document.location.reload();\n    }\n\n  }\n\n  ThemeModeService.ɵfac = function ThemeModeService_Factory(t) {\n    return new (t || ThemeModeService)();\n  };\n\n  ThemeModeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ThemeModeService,\n    factory: ThemeModeService.ɵfac,\n    providedIn: 'root'\n  });\n  return ThemeModeService;\n})();","map":null,"metadata":{},"sourceType":"module"}