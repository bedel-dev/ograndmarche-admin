{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./layout.service\";\nexport let LayoutInitService = /*#__PURE__*/(() => {\n  class LayoutInitService {\n    constructor(layout) {\n      this.layout = layout;\n      this.config = new BehaviorSubject(null);\n    }\n\n    reInitProps(layoutType) {\n      this.layout.reInitProps();\n      const currentLayoutType = layoutType ? layoutType : this.layout.getBaseLayoutTypeFromRouteOrLocalStorage();\n      const config = this.layout.getLayoutConfig(currentLayoutType);\n      this.layout.currentLayoutTypeSubject.next(currentLayoutType);\n      this.config.next(Object.assign({}, config)); // init base layout\n\n      this.initLayoutSettings(currentLayoutType, config);\n      this.initToolbarSettings(config);\n      this.initWidthSettings(config);\n      this.layout.layoutConfigSubject.next(Object.assign({}, this.config.value));\n    }\n\n    setBaseLayoutType(layoutType) {\n      this.layout.setBaseLayoutType(layoutType);\n      this.reInitProps(layoutType);\n    }\n\n    initLayoutSettings(layoutType, config) {\n      var _a, _b, _c, _d, _e, _f; // clear body classes\n\n\n      const bodyClasses = document.body.classList.value.split(' ');\n      bodyClasses.forEach(cssClass => document.body.classList.remove(cssClass)); // clear body attributes\n\n      const bodyAttributes = document.body.getAttributeNames().filter(t => t.indexOf('data-') > -1);\n      bodyAttributes.forEach(attr => document.body.removeAttribute(attr));\n      document.body.setAttribute('style', '');\n      document.body.setAttribute('id', 'kt_app_body');\n      document.body.setAttribute('data-kt-app-layout', layoutType);\n      document.body.setAttribute('data-kt-name', 'metronic');\n      document.body.classList.add('app-default');\n      const pageWidth = (_b = (_a = config.app) === null || _a === void 0 ? void 0 : _a.general) === null || _b === void 0 ? void 0 : _b.pageWidth;\n\n      if (layoutType === 'light-header' || layoutType === 'dark-header') {\n        if (pageWidth === 'default') {\n          const header = (_c = config.app) === null || _c === void 0 ? void 0 : _c.header;\n\n          if (header && header.default && header.default.container) {\n            header.default.container = 'fixed';\n          }\n\n          const toolbar = (_d = config.app) === null || _d === void 0 ? void 0 : _d.toolbar;\n\n          if (toolbar) {\n            toolbar.container = 'fixed';\n          }\n\n          const content = (_e = config.app) === null || _e === void 0 ? void 0 : _e.content;\n\n          if (content) {\n            content.container = 'fixed';\n          }\n\n          const footer = (_f = config.app) === null || _f === void 0 ? void 0 : _f.footer;\n\n          if (footer) {\n            footer.container = 'fixed';\n          }\n\n          const updatedApp = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, config.app), header), toolbar), content), footer);\n          this.config.next(Object.assign(Object.assign({}, config), updatedApp));\n        }\n      }\n    }\n\n    initToolbarSettings(config) {\n      var _a, _b, _c, _d, _e, _f;\n\n      const appHeaderDefaultContent = (_c = (_b = (_a = config.app) === null || _a === void 0 ? void 0 : _a.header) === null || _b === void 0 ? void 0 : _b.default) === null || _c === void 0 ? void 0 : _c.content;\n\n      if (appHeaderDefaultContent === 'page-title') {\n        const toolbar = (_d = config.app) === null || _d === void 0 ? void 0 : _d.toolbar;\n\n        if (toolbar) {\n          toolbar.display = false;\n          const updatedApp = Object.assign(Object.assign({}, config.app), toolbar);\n          this.config.next(Object.assign(Object.assign({}, config), updatedApp));\n        }\n\n        return;\n      }\n\n      const pageTitle = (_f = (_e = this.config.value) === null || _e === void 0 ? void 0 : _e.app) === null || _f === void 0 ? void 0 : _f.pageTitle;\n\n      if (pageTitle) {\n        pageTitle.description = false;\n        pageTitle.breadCrumb = true;\n        const updatedApp = Object.assign(Object.assign({}, config.app), pageTitle);\n        this.config.next(Object.assign(Object.assign({}, config), updatedApp));\n      }\n    }\n\n    initWidthSettings(config) {\n      var _a, _b, _c, _d, _e, _f;\n\n      const pageWidth = (_b = (_a = config.app) === null || _a === void 0 ? void 0 : _a.general) === null || _b === void 0 ? void 0 : _b.pageWidth;\n\n      if (!pageWidth || pageWidth === 'default') {\n        return;\n      }\n\n      const header = (_c = config.app) === null || _c === void 0 ? void 0 : _c.header;\n\n      if (header && header.default) {\n        header.default.container = pageWidth;\n      }\n\n      const toolbar = (_d = config.app) === null || _d === void 0 ? void 0 : _d.toolbar;\n\n      if (toolbar) {\n        toolbar.container = pageWidth;\n      }\n\n      const content = (_e = config.app) === null || _e === void 0 ? void 0 : _e.content;\n\n      if (content) {\n        content.container = pageWidth;\n      }\n\n      const footer = (_f = config.app) === null || _f === void 0 ? void 0 : _f.footer;\n\n      if (footer) {\n        footer.container = pageWidth;\n      }\n\n      const updatedApp = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, config.app), header), toolbar), content), footer);\n      this.config.next(Object.assign(Object.assign({}, this.config.value), updatedApp));\n    }\n\n  }\n\n  LayoutInitService.ɵfac = function LayoutInitService_Factory(t) {\n    return new (t || LayoutInitService)(i0.ɵɵinject(i1.LayoutService));\n  };\n\n  LayoutInitService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LayoutInitService,\n    factory: LayoutInitService.ɵfac,\n    providedIn: 'root'\n  });\n  return LayoutInitService;\n})();","map":null,"metadata":{},"sourceType":"module"}