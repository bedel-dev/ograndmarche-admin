{"ast":null,"code":"export class DataUtil {\n  static set(instance, key, data) {\n    if (!instance) {\n      return;\n    }\n\n    const instanceData = DataUtil.store.get(instance);\n\n    if (!instanceData) {\n      const newMap = new Map().set(key, data);\n      DataUtil.store.set(instance, newMap);\n      return;\n    }\n\n    instanceData.set(key, data);\n  }\n\n  static get(instance, key) {\n    const instanceData = DataUtil.store.get(instance);\n\n    if (!instanceData) {\n      return;\n    }\n\n    return instanceData.get(key);\n  }\n\n  static remove(instance, key) {\n    const instanceData = DataUtil.store.get(instance);\n\n    if (!instanceData) {\n      return;\n    }\n\n    instanceData.delete(key);\n  }\n\n  static removeOne(instance, key, eventId) {\n    const instanceData = DataUtil.store.get(instance);\n\n    if (!instanceData) {\n      return;\n    }\n\n    const eventsIds = instanceData.get(key);\n\n    if (!eventsIds) {\n      return;\n    }\n\n    const updateEventsIds = eventsIds.filter(f => f !== eventId);\n    DataUtil.set(instance, key, updateEventsIds);\n  }\n\n  static has(instance, key) {\n    const instanceData = DataUtil.store.get(instance);\n\n    if (instanceData) {\n      return instanceData.has(key);\n    }\n\n    return false;\n  }\n\n  static getAllInstancesByKey(key) {\n    const result = [];\n    DataUtil.store.forEach(val => {\n      val.forEach((v, k) => {\n        if (k === key) {\n          result.push(v);\n        }\n      });\n    });\n    return result;\n  }\n\n}\nDataUtil.store = new Map();","map":null,"metadata":{},"sourceType":"module"}